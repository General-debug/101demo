###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  17:52:24
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\SRC\DemoPrj\Components\mac\low_level\srf04\mac_autopend.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWCB12.tmp
#        (D:\SRC\DemoPrj\Components\mac\low_level\srf04\mac_autopend.c -D
#        ZIGBEEPRO -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\mac_autopend.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\mac_autopend.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\mac\low_level\srf04\mac_autopend.c
      1          /**************************************************************************************************
      2            Filename:       mac_autopend.c
      3            Revised:        $Date: 2008-07-31 17:11:07 -0700 (Thu, 31 Jul 2008) $
      4            Revision:       $Revision: 17677 $
      5          
      6            Description:    This file implements the TIMAC Autopend feature.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* low-level */
     41          #include "mac_api.h"
     42          #include "mac_radio_defs.h"
     43          
     44          /* osal */
     45          #include "OSAL.h"
     46          #include "saddr.h"
     47          #include "ZComDef.h"
     48          
     49          #include "mac_autopend.h"
     50          
     51          /* ------------------------------------------------------------------------------------------------
     52           *                                           Defines
     53           * ------------------------------------------------------------------------------------------------
     54           */
     55          #define MAC_SRCMATCH_INVALID_INDEX           0xFF
     56          
     57          #define MAC_SRCMATCH_SHORT_ENTRY_SIZE        4
     58          #define MAC_SRCMATCH_EXT_ENTRY_SIZE          Z_EXTADDR_LEN
     59          
     60          #define MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES   24
     61          #define MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES     12
     62          
     63          #define MAC_SRCMATCH_ENABLE_BITMAP_LEN       3
     64                    
     65          
     66          /* ------------------------------------------------------------------------------------------------
     67           *                                      Global Variables
     68           * ------------------------------------------------------------------------------------------------
     69           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          bool macSrcMatchIsEnabled = FALSE; 
   \                     macSrcMatchIsEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          
     73          /* ------------------------------------------------------------------------------------------------
     74           *                                         Local Variables
     75           * ------------------------------------------------------------------------------------------------
     76           */
     77          
     78          /* 
     79           The following local Varables are only set in MAC_SrcMatchEnable()  
     80           They are read only to the rest of the module.
     81           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          uint8 macSrcMatchMaxNumEntries = 0;   
   \                     macSrcMatchMaxNumEntries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint8 macSrcMatchAddrMode = SADDR_MODE_SHORT;  
   \                     macSrcMatchAddrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for macSrcMatchAddrMode>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          bool macSrcMatchIsAckAllPending = FALSE;
   \                     macSrcMatchIsAckAllPending:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     85          
     86          /* ------------------------------------------------------------------------------------------------
     87           *                                         Local Functions
     88           * ------------------------------------------------------------------------------------------------
     89           */
     90          static uint8 macSrcMatchFindEmptyEntry( void );
     91          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  );
     92          static void macSrcMatchSetPendEnBit( uint8 index );
     93          static void macSrcMatchSetEnableBit( uint8 index, bool option );
     94          static bool macSrcMatchCheckEnableBit( uint8 index );
     95          static uint24 macSrcMatchGetEnableBit( void );
     96          static uint24 macSrcMatchGetPendEnBit( void );
     97          
     98          
     99          
    100          /*********************************************************************
    101           * @fn          MAC_SrcMatchEnable
    102           *
    103           * @brief      Enabled AUTOPEND and source address matching. If number of source
    104           *             address table entries asked for is more than the hardware
    105           *             supports. It will allocate maximum number of entries and return 
    106           *             MAC_INVALID_PARAMETER. This function shall be not be called from 
    107           *             ISR. It is not thread safe.
    108           *
    109           * @param      addressType - address type that the application uses
    110           *                           SADDR_MODE_SHORT or SADDR_MODE_EXT
    111           * @param      num - number of source address table entries to be used
    112           *
    113           * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER
    114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          uint8 MAC_SrcMatchEnable ( uint8 addrType, uint8 num  )
   \                     MAC_SrcMatchEnable:
    116          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FB           MOV       R3,A
    117            uint8 rtn;
    118            uint8 maxNum;
    119              
    120            /* Verify the address type */
    121            if( addrType != SADDR_MODE_SHORT && addrType != SADDR_MODE_EXT )
   \   000006   7402         MOV       A,#0x2
   \   000008   6B           XRL       A,R3
   \   000009   6009         JZ        ??MAC_SrcMatchEnable_0
   \   00000B   7403         MOV       A,#0x3
   \   00000D   6B           XRL       A,R3
   \   00000E   6008         JZ        ??MAC_SrcMatchEnable_1
    122            {
    123              return MAC_INVALID_PARAMETER;
   \   000010   79E8         MOV       R1,#-0x18
   \   000012   803C         SJMP      ??MAC_SrcMatchEnable_2
    124            }
   \                     ??MAC_SrcMatchEnable_0:
   \   000014   7818         MOV       R0,#0x18
   \   000016   8002         SJMP      ??MAC_SrcMatchEnable_3
   \                     ??MAC_SrcMatchEnable_1:
   \   000018   780C         MOV       R0,#0xc
    125            
    126            maxNum = ( addrType == SADDR_MODE_SHORT ) ? 
    127                     MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES : MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES;
    128                     
    129            if( num > maxNum )
   \                     ??MAC_SrcMatchEnable_3:
   \   00001A   E8           MOV       A,R0
   \   00001B   C3           CLR       C
   \   00001C   9A           SUBB      A,R2
   \   00001D   5006         JNC       ??MAC_SrcMatchEnable_4
    130            {
    131              rtn = MAC_INVALID_PARAMETER;
   \   00001F   79E8         MOV       R1,#-0x18
    132              num = maxNum;
   \   000021   E8           MOV       A,R0
   \   000022   FA           MOV       R2,A
   \   000023   8002         SJMP      ??MAC_SrcMatchEnable_5
    133            }
    134            else
    135            {
    136              rtn = MAC_SUCCESS;
   \                     ??MAC_SrcMatchEnable_4:
   \   000025   7900         MOV       R1,#0x0
    137            }
    138              
    139            /* Turn on Frame Filter (TIMAC enables frame filter by default), TBD */
    140            MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \                     ??MAC_SrcMatchEnable_5:
   \   000027   906180       MOV       DPTR,#0x6180
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   D2E0         SETB      0xE0 /* A   */.0
   \   00002D   F0           MOVX      @DPTR,A
    141            
    142            /* Turn on Auto ACK (TIMAC turn on Auto ACK by default), TBD */
    143            MAC_RADIO_TURN_ON_AUTO_ACK();
   \   00002E   906189       MOV       DPTR,#0x6189
   \   000031   E0           MOVX      A,@DPTR
   \   000032   D2E5         SETB      0xE0 /* A   */.5
   \   000034   F0           MOVX      @DPTR,A
    144            
    145            /* Turn on Autopend: set SRCMATCH.AUTOPEND and SRCMATCH.SRC_MATCH_EN */
    146            MAC_RADIO_TURN_ON_SRC_MATCH();
   \   000035   906182       MOV       DPTR,#0x6182
   \   000038   E0           MOVX      A,@DPTR
   \   000039   D2E0         SETB      0xE0 /* A   */.0
   \   00003B   F0           MOVX      @DPTR,A
    147           
    148            /* Set SRCMATCH.AUTOPEND */
    149            MAC_RADIO_TURN_ON_AUTOPEND();
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   D2E1         SETB      0xE0 /* A   */.1
   \   00003F   F0           MOVX      @DPTR,A
    150            
    151            /* Configure all the globals */
    152            macSrcMatchIsEnabled = TRUE;
   \   000040   90....       MOV       DPTR,#macSrcMatchIsEnabled
   \   000043   7401         MOV       A,#0x1
   \   000045   F0           MOVX      @DPTR,A
    153            macSrcMatchMaxNumEntries = num;
   \   000046   EA           MOV       A,R2
   \   000047   90....       MOV       DPTR,#macSrcMatchMaxNumEntries
   \   00004A   F0           MOVX      @DPTR,A
    154            macSrcMatchAddrMode = addrType;           
   \   00004B   EB           MOV       A,R3
   \   00004C   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   00004F   F0           MOVX      @DPTR,A
    155          
    156            return rtn;
   \                     ??MAC_SrcMatchEnable_2:
   \   000050   02....       LJMP      ?Subroutine0 & 0xFFFF
    157          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    158          
    159          /*********************************************************************
    160           * @fn          MAC_SrcMatchAddEntry
    161           *
    162           * @brief       Add a short or extended address to source address table. This 
    163           *              function shall be not be called from ISR. It is not thread safe.
    164           *
    165           * @param       addr - a pointer to sAddr_t which contains addrMode 
    166           *                     and a union of a short 16-bit MAC address or an extended 
    167           *                     64-bit MAC address to be added to the source address table. 
    168           * @param       panID - the device PAN ID. It is only used when the addr is 
    169           *                      using short address 
    170          
    171           * @return      MAC_SUCCESS or MAC_NO_RESOURCES (source address table full) 
    172           *              or MAC_DUPLICATED_ENTRY (the entry added is duplicated),
    173           *              or MAC_INVALID_PARAMETER if the input parameters are invalid.
    174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          uint8 MAC_SrcMatchAddEntry ( sAddr_t *addr, uint16 panID )
   \                     MAC_SrcMatchAddEntry:
    176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   EC           MOV       A,R4
   \   000015   FE           MOV       R6,A
   \   000016   ED           MOV       A,R5
   \   000017   FF           MOV       R7,A
    177            uint8 index;
    178            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];
    179            
    180            /* Check if the input parameters are valid */
    181            if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   6012         JZ        ??MAC_SrcMatchAddEntry_0
   \   000026   E8           MOV       A,R0
   \   000027   2408         ADD       A,#0x8
   \   000029   F582         MOV       DPL,A
   \   00002B   E4           CLR       A
   \   00002C   3B           ADDC      A,R3
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F8           MOV       R0,A
   \   000031   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   000034   E0           MOVX      A,@DPTR
   \   000035   68           XRL       A,R0
   \   000036   6005         JZ        ??MAC_SrcMatchAddEntry_1
    182            {
    183              return MAC_INVALID_PARAMETER;  
   \                     ??MAC_SrcMatchAddEntry_0:
   \   000038   79E8         MOV       R1,#-0x18
   \   00003A   02....       LJMP      ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    184            }
    185            
    186            /* Check if the entry already exists. Do not add duplicated entry */
    187            if ( macSrcMatchCheckSrcAddr( addr, panID ) != MAC_SRCMATCH_INVALID_INDEX )
   \                     ??MAC_SrcMatchAddEntry_1:
   \   00003D                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   00003D   7401         MOV       A,#0x1
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FA           MOV       R2,A
   \   000044   12....       LCALL     `??macSrcMatchCheckSrcAddr::?relay`; Banked call to: macSrcMatchCheckSrcAddr
   \   000047   E9           MOV       A,R1
   \   000048   F4           CPL       A
   \   000049   6005         JZ        ??MAC_SrcMatchAddEntry_3
    188            {
    189              return MAC_DUPLICATED_ENTRY; 
   \   00004B   791E         MOV       R1,#0x1e
   \   00004D   02....       LJMP      ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    190            }
    191            
    192            /* If not duplicated, write to the radio RAM and enable the control bit */
    193            
    194            /* Find the first empty entry */
    195            index = macSrcMatchFindEmptyEntry();
   \                     ??MAC_SrcMatchAddEntry_3:
   \   000050                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   000050   12....       LCALL     `??macSrcMatchGetEnableBit::?relay`; Banked call to: macSrcMatchGetEnableBit
   \   000053   EA           MOV       A,R2
   \   000054   F8           MOV       R0,A
   \   000055   EB           MOV       A,R3
   \   000056   F9           MOV       R1,A
   \   000057   EC           MOV       A,R4
   \   000058   FA           MOV       R2,A
   \   000059   ED           MOV       A,R5
   \   00005A   FB           MOV       R3,A
   \   00005B   740D         MOV       A,#0xd
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?XSTORE_R0123
   \   000063   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   000066   E0           MOVX      A,@DPTR
   \   000067   6402         XRL       A,#0x2
   \   000069   85..82       MOV       DPL,?XSP + 0
   \   00006C   85..83       MOV       DPH,?XSP + 1
   \   00006F   7041         JNZ       ??MAC_SrcMatchAddEntry_4
   \   000071   E4           CLR       A
   \                     ??MAC_SrcMatchAddEntry_5:
   \   000072   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000075   507E         JNC       ??MAC_SrcMatchAddEntry_6
   \   000077   740D         MOV       A,#0xd
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   C082         PUSH      DPL
   \   00007E   C083         PUSH      DPH
   \   000080   75..01       MOV       ?V0,#0x1
   \   000083   75..00       MOV       ?V1,#0x0
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?S_SHL
   \   000092   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000095   D083         POP       DPH
   \   000097   D082         POP       DPL
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?L_AND_X
   \   00009E   E5..         MOV       A,?V0
   \   0000A0   45..         ORL       A,?V1
   \   0000A2   45..         ORL       A,?V2
   \   0000A4   45..         ORL       A,?V3
   \   0000A6   6063         JZ        ??MAC_SrcMatchAddEntry_7
   \   0000A8   85..82       MOV       DPL,?XSP + 0
   \   0000AB   85..83       MOV       DPH,?XSP + 1
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   04           INC       A
   \   0000B0   80C0         SJMP      ??MAC_SrcMatchAddEntry_5
   \                     ??MAC_SrcMatchAddEntry_4:
   \   0000B2   E4           CLR       A
   \   0000B3   803B         SJMP      ??MAC_SrcMatchAddEntry_8
   \                     ??MAC_SrcMatchAddEntry_9:
   \   0000B5   740D         MOV       A,#0xd
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   C082         PUSH      DPL
   \   0000BC   C083         PUSH      DPH
   \   0000BE   75..01       MOV       ?V0,#0x1
   \   0000C1   75..00       MOV       ?V1,#0x0
   \   0000C4   85..82       MOV       DPL,?XSP + 0
   \   0000C7   85..83       MOV       DPH,?XSP + 1
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   C3           CLR       C
   \   0000CC   33           RLC       A
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?S_SHL
   \   0000D2   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000D5   D083         POP       DPH
   \   0000D7   D082         POP       DPL
   \   0000D9   78..         MOV       R0,#?V0
   \   0000DB   12....       LCALL     ?L_AND_X
   \   0000DE   E5..         MOV       A,?V0
   \   0000E0   45..         ORL       A,?V1
   \   0000E2   45..         ORL       A,?V2
   \   0000E4   45..         ORL       A,?V3
   \   0000E6   606F         JZ        ??MAC_SrcMatchAddEntry_10
   \   0000E8   85..82       MOV       DPL,?XSP + 0
   \   0000EB   85..83       MOV       DPH,?XSP + 1
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   04           INC       A
   \                     ??MAC_SrcMatchAddEntry_8:
   \   0000F0   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000F3   40C0         JC        ??MAC_SrcMatchAddEntry_9
    196            if ( index == macSrcMatchMaxNumEntries )
   \                     ??MAC_SrcMatchAddEntry_6:
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   F8           MOV       R0,A
   \   0000F7   90....       MOV       DPTR,#macSrcMatchMaxNumEntries
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   68           XRL       A,R0
   \   0000FC   7005         JNZ       ??MAC_SrcMatchAddEntry_11
    197            {
    198              return MAC_NO_RESOURCES;   /* Table is full */
   \   0000FE   791A         MOV       R1,#0x1a
   \   000100   02....       LJMP      ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    199            }
    200            
    201            if ( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \                     ??MAC_SrcMatchAddEntry_11:
   \   000103   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   000106   E0           MOVX      A,@DPTR
   \   000107   6402         XRL       A,#0x2
   \   000109   704C         JNZ       ??MAC_SrcMatchAddEntry_10
    202            {
    203              /* Write the PanID and short address */
    204              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \                     ??MAC_SrcMatchAddEntry_7:
   \   00010B   7406         MOV       A,#0x6
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   EE           MOV       A,R6
   \   000111   F0           MOVX      @DPTR,A
    205              entry[1] = HI_UINT16( panID );
   \   000112   7407         MOV       A,#0x7
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   EF           MOV       A,R7
   \   000118   F0           MOVX      @DPTR,A
    206              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   000119   7401         MOV       A,#0x1
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000121   E0           MOVX      A,@DPTR
   \   000122   C0E0         PUSH      A
   \   000124   7408         MOV       A,#0x8
   \   000126   12....       LCALL     ?XSTACK_DISP0_8
   \   000129   D0E0         POP       A
   \   00012B   F0           MOVX      @DPTR,A
    207              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   00012C   7401         MOV       A,#0x1
   \   00012E   12....       LCALL     ?XSTACK_DISP0_8
   \   000131   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   C0E0         PUSH      A
   \   000138   7409         MOV       A,#0x9
   \   00013A   12....       LCALL     ?XSTACK_DISP0_8
   \   00013D   D0E0         POP       A
   \   00013F   F0           MOVX      @DPTR,A
    208              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_SHORT_ENTRY_SIZE ), 
    209                             entry, MAC_SRCMATCH_SHORT_ENTRY_SIZE );
   \   000140                ; Setup parameters for call to function macMemWriteRam
   \   000140   7904         MOV       R1,#0x4
   \   000142   7406         MOV       A,#0x6
   \   000144   12....       LCALL     ?XSTACK_DISP102_8
   \   000147   85..82       MOV       DPL,?XSP + 0
   \   00014A   85..83       MOV       DPH,?XSP + 1
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   F5..         MOV       ?V0,A
   \   000150   75..00       MOV       ?V1,#0x0
   \   000153   7402         MOV       A,#0x2
   \   000155   801A         SJMP      ??MAC_SrcMatchAddEntry_12
    210            }
    211            else
    212            {
    213              /* Write the extended address */
    214              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_EXT_ENTRY_SIZE ), 
    215                             addr->addr.extAddr, MAC_SRCMATCH_EXT_ENTRY_SIZE ); 
   \                     ??MAC_SrcMatchAddEntry_10:
   \   000157                ; Setup parameters for call to function macMemWriteRam
   \   000157   7908         MOV       R1,#0x8
   \   000159   7401         MOV       A,#0x1
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   FC           MOV       R4,A
   \   000160   A3           INC       DPTR
   \   000161   E0           MOVX      A,@DPTR
   \   000162   FD           MOV       R5,A
   \   000163   85..82       MOV       DPL,?XSP + 0
   \   000166   85..83       MOV       DPH,?XSP + 1
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   F5..         MOV       ?V0,A
   \   00016C   75..00       MOV       ?V1,#0x0
   \   00016F   7403         MOV       A,#0x3
   \                     ??MAC_SrcMatchAddEntry_12:
   \   000171   78..         MOV       R0,#?V0
   \   000173   12....       LCALL     ?S_SHL
   \   000176   25..         ADD       A,?V0
   \   000178   FA           MOV       R2,A
   \   000179   7461         MOV       A,#0x61
   \   00017B   35..         ADDC      A,?V1
   \   00017D   FB           MOV       R3,A
   \   00017E   12....       LCALL     `??macMemWriteRam::?relay`; Banked call to: macMemWriteRam
    216            }
    217            
    218            /* Set the Autopend enable bits */
    219            macSrcMatchSetPendEnBit( index );
   \   000181   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   000184   E0           MOVX      A,@DPTR
   \   000185   6402         XRL       A,#0x2
   \   000187   7903         MOV       R1,#0x3
   \   000189   7009         JNZ       ??MAC_SrcMatchAddEntry_13
   \   00018B                ; Setup parameters for call to function macMemReadRam
   \   00018B   740A         MOV       A,#0xa
   \   00018D   12....       LCALL     ?XSTACK_DISP102_8
   \   000190   7A67         MOV       R2,#0x67
   \   000192   8007         SJMP      ??MAC_SrcMatchAddEntry_14
   \                     ??MAC_SrcMatchAddEntry_13:
   \   000194                ; Setup parameters for call to function macMemReadRam
   \   000194   740A         MOV       A,#0xa
   \   000196   12....       LCALL     ?XSTACK_DISP102_8
   \   000199   7A64         MOV       R2,#0x64
   \                     ??MAC_SrcMatchAddEntry_14:
   \   00019B   7B61         MOV       R3,#0x61
   \   00019D   12....       LCALL     `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   0001A0                ; Setup parameters for call to function osal_build_uint32
   \   0001A0   7903         MOV       R1,#0x3
   \   0001A2   740A         MOV       A,#0xa
   \   0001A4   12....       LCALL     ?XSTACK_DISP101_8
   \   0001A7   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   0001AA   8A..         MOV       ?V0,R2
   \   0001AC   8B..         MOV       ?V1,R3
   \   0001AE   8C..         MOV       ?V2,R4
   \   0001B0   8D..         MOV       ?V3,R5
   \   0001B2   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   0001B5   E0           MOVX      A,@DPTR
   \   0001B6   6402         XRL       A,#0x2
   \   0001B8   75..01       MOV       ?V4,#0x1
   \   0001BB   75..00       MOV       ?V5,#0x0
   \   0001BE   85..82       MOV       DPL,?XSP + 0
   \   0001C1   85..83       MOV       DPH,?XSP + 1
   \   0001C4   7028         JNZ       ??MAC_SrcMatchAddEntry_15
   \   0001C6                ; Setup parameters for call to function osal_buffer_uint24
   \   0001C6   E0           MOVX      A,@DPTR
   \   0001C7   78..         MOV       R0,#?V4
   \   0001C9   12....       LCALL     ?S_SHL
   \   0001CC   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001CF   12....       LCALL     ?L_IOR
   \   0001D2   78..         MOV       R0,#?V0
   \   0001D4   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0001D7   7407         MOV       A,#0x7
   \   0001D9   12....       LCALL     ?XSTACK_DISP101_8
   \   0001DC   12....       LCALL     `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   0001DF   7404         MOV       A,#0x4
   \   0001E1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E4                ; Setup parameters for call to function macMemWriteRam
   \   0001E4   7903         MOV       R1,#0x3
   \   0001E6   E9           MOV       A,R1
   \   0001E7   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EA   7A67         MOV       R2,#0x67
   \   0001EC   8028         SJMP      ??MAC_SrcMatchAddEntry_16
   \                     ??MAC_SrcMatchAddEntry_15:
   \   0001EE                ; Setup parameters for call to function osal_buffer_uint24
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   C3           CLR       C
   \   0001F0   33           RLC       A
   \   0001F1   78..         MOV       R0,#?V4
   \   0001F3   12....       LCALL     ?S_SHL
   \   0001F6   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001F9   12....       LCALL     ?L_IOR
   \   0001FC   78..         MOV       R0,#?V0
   \   0001FE   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000201   7407         MOV       A,#0x7
   \   000203   12....       LCALL     ?XSTACK_DISP101_8
   \   000206   12....       LCALL     `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   000209   7404         MOV       A,#0x4
   \   00020B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00020E                ; Setup parameters for call to function macMemWriteRam
   \   00020E   7903         MOV       R1,#0x3
   \   000210   E9           MOV       A,R1
   \   000211   12....       LCALL     ?XSTACK_DISP102_8
   \   000214   7A64         MOV       R2,#0x64
   \                     ??MAC_SrcMatchAddEntry_16:
   \   000216   7B61         MOV       R3,#0x61
   \   000218   12....       LCALL     `??macMemWriteRam::?relay`; Banked call to: macMemWriteRam
    220            
    221            /* Set the Src Match enable bits */
    222            macSrcMatchSetEnableBit( index, TRUE );
   \   00021B                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   00021B   7A01         MOV       R2,#0x1
   \   00021D   85..82       MOV       DPL,?XSP + 0
   \   000220   85..83       MOV       DPH,?XSP + 1
   \   000223   E0           MOVX      A,@DPTR
   \   000224   F9           MOV       R1,A
   \   000225   12....       LCALL     `??macSrcMatchSetEnableBit::?relay`; Banked call to: macSrcMatchSetEnableBit
    223            
    224            return MAC_SUCCESS;
   \   000228   7900         MOV       R1,#0x0
   \                     ??MAC_SrcMatchAddEntry_2:
   \   00022A   7411         MOV       A,#0x11
   \   00022C                REQUIRE ?Subroutine1
   \   00022C                ; // Fall through to label ?Subroutine1
    225            
    226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    227          
    228          /*********************************************************************
    229           * @fn         MAC_SrcMatchDeleteEntry
    230           *
    231           * @brief      Delete a short or extended address from source address table. 
    232           *             This function shall be not be called from ISR. It is not thread safe.
    233           *
    234           * @param      addr - a pointer to sAddr_t which contains addrMode 
    235           *                    and a union of a short 16-bit MAC address or an extended 
    236           *                    64-bit MAC address to be deleted from the source address table. 
    237           * @param      panID - the device PAN ID. It is only used when the addr is 
    238           *                     using short address  
    239           *
    240           * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER (address to be deleted 
    241           *                  cannot be found in the source address table).
    242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    243          uint8 MAC_SrcMatchDeleteEntry ( sAddr_t *addr, uint16 panID  )
   \                     MAC_SrcMatchDeleteEntry:
    244          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    245            uint8 index;
    246            
    247            if ( addr == NULL || addr->addrMode != macSrcMatchAddrMode )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   601F         JZ        ??MAC_SrcMatchDeleteEntry_0
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   68           XRL       A,R0
   \   00001B   700A         JNZ       ??MAC_SrcMatchDeleteEntry_0
    248            {
    249              return MAC_INVALID_PARAMETER;  
    250            }
    251            
    252            /* Look up the source address table and find the entry. */
    253            index = macSrcMatchCheckSrcAddr( addr, panID );
   \   00001D                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   00001D   12....       LCALL     `??macSrcMatchCheckSrcAddr::?relay`; Banked call to: macSrcMatchCheckSrcAddr
   \   000020   E9           MOV       A,R1
   \   000021   F9           MOV       R1,A
    254          
    255            if( index == MAC_SRCMATCH_INVALID_INDEX )
   \   000022   74FF         MOV       A,#-0x1
   \   000024   69           XRL       A,R1
   \   000025   7004         JNZ       ??MAC_SrcMatchDeleteEntry_1
    256            {
    257              return MAC_INVALID_PARAMETER; 
   \                     ??MAC_SrcMatchDeleteEntry_0:
   \   000027   79E8         MOV       R1,#-0x18
   \   000029   8007         SJMP      ??MAC_SrcMatchDeleteEntry_2
    258            }
    259            
    260            /* Clear Src Match enable bits */
    261            macSrcMatchSetEnableBit( index, FALSE );
   \                     ??MAC_SrcMatchDeleteEntry_1:
   \   00002B                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   00002B   7A00         MOV       R2,#0x0
   \   00002D   12....       LCALL     `??macSrcMatchSetEnableBit::?relay`; Banked call to: macSrcMatchSetEnableBit
    262          
    263            return MAC_SUCCESS;
   \   000030   7900         MOV       R1,#0x0
   \                     ??MAC_SrcMatchDeleteEntry_2:
   \   000032   80..         SJMP      ?Subroutine0
    264          }
    265                            
    266          
    267          /*********************************************************************
    268           * @fn          MAC_SrcMatchAckAllPending
    269           *
    270           * @brief       Enabled/disable acknowledging all packets with pending bit set
    271           *              The application normally enables it when adding new entries to 
    272           *              the source address table fails due to the table is full, or 
    273           *              disables it when more entries are deleted and the table has
    274           *              empty slots.
    275           *
    276           * @param       option - TRUE (acknowledging all packets with pending field set)
    277           *                       FALSE (acknowledging all packets with pending field cleared) 
    278           *
    279           * @return      none
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          void MAC_SrcMatchAckAllPending ( uint8 option  ) 
   \                     MAC_SrcMatchAckAllPending:
    282          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    283            if( option == TRUE )
   \   000004   7401         MOV       A,#0x1
   \   000006   69           XRL       A,R1
   \   000007   90....       MOV       DPTR,#macSrcMatchIsAckAllPending
   \   00000A   700B         JNZ       ??MAC_SrcMatchAckAllPending_0
    284            {
    285              macSrcMatchIsAckAllPending = TRUE;
   \   00000C   7401         MOV       A,#0x1
   \   00000E   F0           MOVX      @DPTR,A
    286              
    287              /* Set the PENDING_OR register */
    288              MAC_RADIO_TURN_ON_PENDING_OR();
   \   00000F   90618A       MOV       DPTR,#0x618a
   \   000012   E0           MOVX      A,@DPTR
   \   000013   D2E2         SETB      0xE0 /* A   */.2
   \   000015   8008         SJMP      ??MAC_SrcMatchAckAllPending_1
    289            }
    290            else
    291            {
    292              macSrcMatchIsAckAllPending = FALSE;
   \                     ??MAC_SrcMatchAckAllPending_0:
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
    293              
    294              /* Clear the PENDING_OR register */
    295              MAC_RADIO_TURN_OFF_PENDING_OR();
   \   000019   90618A       MOV       DPTR,#0x618a
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   C2E2         CLR       0xE0 /* A   */.2
   \                     ??MAC_SrcMatchAckAllPending_1:
   \   00001F   F0           MOVX      @DPTR,A
    296            }
    297          }
   \   000020   80..         SJMP      ?Subroutine0
    298          
    299          /*********************************************************************
    300           * @fn          MAC_SrcMatchCheckAllPending
    301           *
    302           * @brief       Check if acknowledging all packets with pending bit set
    303           *              is enabled. 
    304           *
    305           * @param       none 
    306           *
    307           * @return      MAC_AUTOACK_PENDING_ALL_ON or MAC_AUTOACK_PENDING_ALL_OFF
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          uint8 MAC_SrcMatchCheckAllPending ( void )
   \                     MAC_SrcMatchCheckAllPending:
    310          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    311            if( macSrcMatchIsAckAllPending == TRUE )
   \   000004   90....       MOV       DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7004         JNZ       ??MAC_SrcMatchCheckAllPending_0
    312            {
    313              return MAC_AUTOACK_PENDING_ALL_ON; 
   \   00000C   79FE         MOV       R1,#-0x2
   \   00000E   8002         SJMP      ??MAC_SrcMatchCheckAllPending_1
    314            }
    315            
    316            return MAC_AUTOACK_PENDING_ALL_OFF;
   \                     ??MAC_SrcMatchCheckAllPending_0:
   \   000010   79FF         MOV       R1,#-0x1
   \                     ??MAC_SrcMatchCheckAllPending_1:
   \   000012                REQUIRE ?Subroutine0
   \   000012                ; // Fall through to label ?Subroutine0
    317          }
    318          
    319          /*********************************************************************
    320           * @fn          MAC_SrcMatchCheckResult
    321           *
    322           * @brief       Check the result of source matching
    323           *
    324           * @param       index - index of the entry in the source address table
    325           *
    326           * @return      TRUE or FALSE
    327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    328          bool MAC_SrcMatchCheckResult( void )
   \                     MAC_SrcMatchCheckResult:
    329          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    330            uint8 resIndex;
    331            
    332            if ( macSrcMatchIsAckAllPending )
   \   000004   90....       MOV       DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6004         JZ        ??MAC_SrcMatchCheckResult_0
    333            {
    334              return (TRUE);
   \   00000A   7901         MOV       R1,#0x1
   \   00000C   8009         SJMP      ??MAC_SrcMatchCheckResult_1
    335            }
    336            
    337            MAC_RADIO_SRC_MATCH_RESINDEX( resIndex );
   \                     ??MAC_SrcMatchCheckResult_0:
   \   00000E   906163       MOV       DPTR,#0x6163
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
    338            
    339            return ( resIndex & AUTOPEND_RES );
   \   000013   7440         MOV       A,#0x40
   \   000015   58           ANL       A,R0
   \   000016   F9           MOV       R1,A
   \                     ??MAC_SrcMatchCheckResult_1:
   \   000017   80..         SJMP      ?Subroutine0
    340          }
    341          
    342          /*********************************************************************
    343           * @fn          macSrcMatchFindEmptyEntry
    344           *
    345           * @brief       return index of the first empty entry found
    346           *
    347           * @param       none
    348           *
    349           * @return      uint8 - return index of the first empty entry found
    350           */
    351          static uint8 macSrcMatchFindEmptyEntry( void )
    352          {
    353            uint8  index;
    354            uint24 enable;
    355               
    356            enable = MAC_RADIO_SRC_MATCH_GET_EN();
    357                  
    358            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    359            {
    360              for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
    361              {  
    362                if( ( enable & ( 0x01 << index ) ) == 0 )
    363                {
    364                  return index;
    365                }
    366              }
    367            }
    368            else
    369            {
    370              for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
    371              {  
    372                if( ( enable & ( 0x01 << ( index * 2 ) ) ) == 0 )
    373                {
    374                  return index;
    375                }
    376              }
    377            }
    378            
    379            /* 
    380             The value of index shall be macSrcMatchMaxNumEntries when it executes
    381             here. The table is full.
    382            */
    383            return index;
    384          }
    385          
    386          /*********************************************************************
    387           * @fn         macSrcMatchCheckSrcAddr
    388           *
    389           * @brief      Check if a short or extended address is in the source address table.
    390           *             This function shall not be called from ISR. It is not thread safe.
    391           *
    392           * @param      addr - a pointer to sAddr_t which contains addrMode 
    393           *                    and a union of a short 16-bit MAC address or an extended 
    394           *                    64-bit MAC address to be checked in the source address table. 
    395           * @param      panID - the device PAN ID. It is only used when the addr is 
    396           *                     using short address 
    397          
    398           * @return     uint8 - index of the entry in the table. Return 
    399           *                     MAC_SRCMATCH_INVALID_INDEX (0xFF) if address not found.
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  )
   \                     macSrcMatchCheckSrcAddr:
    402          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    403            
    404            uint8 index;     
    405            uint8 *pAddr;
    406            uint8 entrySize;
    407            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];  
    408            uint8 ramEntry[MAC_SRCMATCH_EXT_ENTRY_SIZE];
    409                
    410            /*
    411             Currently, shadow memory is not supported to optimize SPI traffic.
    412            */
    413            
    414            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   00000A   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6402         XRL       A,#0x2
   \   000010   7040         JNZ       ??macSrcMatchCheckSrcAddr_0
    415            {
    416              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   EC           MOV       A,R4
   \   000018   F0           MOVX      @DPTR,A
    417              entry[1] = HI_UINT16( panID );
   \   000019   7404         MOV       A,#0x4
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   ED           MOV       A,R5
   \   00001F   F0           MOVX      @DPTR,A
    418              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C0E0         PUSH      A
   \   000027   7405         MOV       A,#0x5
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
    419              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C0E0         PUSH      A
   \   000037   7406         MOV       A,#0x6
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
    420              pAddr = entry;
   \   00003F   7403         MOV       A,#0x3
   \   000041   12....       LCALL     ?XSTACK_DISP100_8
   \   000044   7401         MOV       A,#0x1
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E8           MOV       A,R0
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   E9           MOV       A,R1
   \   00004D   F0           MOVX      @DPTR,A
    421              entrySize = MAC_SRCMATCH_SHORT_ENTRY_SIZE;
   \   00004E   7F04         MOV       R7,#0x4
   \   000050   800C         SJMP      ??macSrcMatchCheckSrcAddr_1
    422            }
    423            else
    424            {
    425              pAddr = addr->addr.extAddr;
   \                     ??macSrcMatchCheckSrcAddr_0:
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   EA           MOV       A,R2
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   EB           MOV       A,R3
   \   00005B   F0           MOVX      @DPTR,A
    426              entrySize = MAC_SRCMATCH_EXT_ENTRY_SIZE;
   \   00005C   7F08         MOV       R7,#0x8
    427            }
    428            
    429            for( index = 0; index < macSrcMatchMaxNumEntries; index++ )
   \                     ??macSrcMatchCheckSrcAddr_1:
   \   00005E   7E00         MOV       R6,#0x0
   \   000060   8001         SJMP      ??macSrcMatchCheckSrcAddr_2
   \                     ??macSrcMatchCheckSrcAddr_3:
   \   000062   0E           INC       R6
   \                     ??macSrcMatchCheckSrcAddr_2:
   \   000063   90....       MOV       DPTR,#macSrcMatchMaxNumEntries
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F8           MOV       R0,A
   \   000068   EE           MOV       A,R6
   \   000069   C3           CLR       C
   \   00006A   98           SUBB      A,R0
   \   00006B   4003         JC        $+5
   \   00006D   02....       LJMP      ??macSrcMatchCheckSrcAddr_4 & 0xFFFF
    430            {
    431              /* Check if the entry is enabled */
    432              if( macSrcMatchCheckEnableBit( index ) == FALSE )
   \   000070   EE           MOV       A,R6
   \   000071   85..82       MOV       DPL,?XSP + 0
   \   000074   85..83       MOV       DPH,?XSP + 1
   \   000077   F0           MOVX      @DPTR,A
   \   000078   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   6403         XRL       A,#0x3
   \   00007E   700A         JNZ       ??macSrcMatchCheckSrcAddr_5
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   C3           CLR       C
   \   000088   33           RLC       A
   \   000089   F0           MOVX      @DPTR,A
   \                     ??macSrcMatchCheckSrcAddr_5:
   \   00008A                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   00008A   12....       LCALL     `??macSrcMatchGetEnableBit::?relay`; Banked call to: macSrcMatchGetEnableBit
   \   00008D   8A..         MOV       ?V4,R2
   \   00008F   8B..         MOV       ?V5,R3
   \   000091   8C..         MOV       ?V6,R4
   \   000093   8D..         MOV       ?V7,R5
   \   000095   75..01       MOV       ?V0,#0x1
   \   000098   75..00       MOV       ?V1,#0x0
   \   00009B   85..82       MOV       DPL,?XSP + 0
   \   00009E   85..83       MOV       DPH,?XSP + 1
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?S_SHL
   \   0000A7   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000AA   78..         MOV       R0,#?V4
   \   0000AC   79..         MOV       R1,#?V0
   \   0000AE   12....       LCALL     ?L_AND
   \   0000B1   E5..         MOV       A,?V4
   \   0000B3   45..         ORL       A,?V5
   \   0000B5   45..         ORL       A,?V6
   \   0000B7   45..         ORL       A,?V7
   \   0000B9   60A7         JZ        ??macSrcMatchCheckSrcAddr_3
    433              {
    434                continue; 
    435              }
    436                
    437              /* Compare the short address and pan ID */
    438              MAC_RADIO_SRC_MATCH_TABLE_READ( ( index * entrySize ), ramEntry, entrySize );
   \   0000BB                ; Setup parameters for call to function macMemReadRam
   \   0000BB   EF           MOV       A,R7
   \   0000BC   F9           MOV       R1,A
   \   0000BD   7407         MOV       A,#0x7
   \   0000BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C2   EE           MOV       A,R6
   \   0000C3   89F0         MOV       B,R1
   \   0000C5   A4           MUL       AB
   \   0000C6   FA           MOV       R2,A
   \   0000C7   A8F0         MOV       R0,B
   \   0000C9   E4           CLR       A
   \   0000CA   28           ADD       A,R0
   \   0000CB   FB           MOV       R3,A
   \   0000CC   7461         MOV       A,#0x61
   \   0000CE   3B           ADDC      A,R3
   \   0000CF   FB           MOV       R3,A
   \   0000D0   12....       LCALL     `??macMemReadRam::?relay`; Banked call to: macMemReadRam
    439               
    440              if( osal_memcmp( pAddr, ramEntry, entrySize ) == TRUE )
   \   0000D3                ; Setup parameters for call to function osal_memcmp
   \   0000D3   7407         MOV       A,#0x7
   \   0000D5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000D8   88..         MOV       ?V0,R0
   \   0000DA   89..         MOV       ?V1,R1
   \   0000DC   75..00       MOV       ?V2,#0x0
   \   0000DF   78..         MOV       R0,#?V0
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E4   EF           MOV       A,R7
   \   0000E5   FC           MOV       R4,A
   \   0000E6   7D00         MOV       R5,#0x0
   \   0000E8   7404         MOV       A,#0x4
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000F0   A982         MOV       R1,DPL
   \   0000F2   AA83         MOV       R2,DPH
   \   0000F4   7B00         MOV       R3,#0x0
   \   0000F6   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000F9   7403         MOV       A,#0x3
   \   0000FB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FE   E9           MOV       A,R1
   \   0000FF   6401         XRL       A,#0x1
   \   000101   6003         JZ        $+5
   \   000103   02....       LJMP      ??macSrcMatchCheckSrcAddr_3 & 0xFFFF
    441              {
    442                /* Match found */
    443                return index;
   \   000106   EE           MOV       A,R6
   \   000107   F9           MOV       R1,A
   \   000108   8002         SJMP      ??macSrcMatchCheckSrcAddr_6
    444              }
    445            }
    446            
    447            return MAC_SRCMATCH_INVALID_INDEX;
   \                     ??macSrcMatchCheckSrcAddr_4:
   \   00010A   79FF         MOV       R1,#-0x1
   \                     ??macSrcMatchCheckSrcAddr_6:
   \   00010C   740F         MOV       A,#0xf
   \   00010E   02....       LJMP      ?Subroutine1 & 0xFFFF
    448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E5..         MOV       A,?V1
   \   000002   33           RLC       A
   \   000003   95E0         SUBB      A,0xE0 /* A   */
   \   000005   F5..         MOV       ?V2,A
   \   000007   F5..         MOV       ?V3,A
   \   000009   22           RET
    449          
    450          
    451          /*********************************************************************
    452           * @fn          macSrcMatchSetPendEnBit
    453           *
    454           * @brief       Set the enable bit in the source address table
    455           *
    456           * @param       index - index of the entry in the source address table
    457           *
    458           * @return      none
    459           */
    460          static void macSrcMatchSetPendEnBit( uint8 index )
    461          {
    462            uint24 enable;
    463            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    464                 
    465            enable = MAC_RADIO_SRC_MATCH_GET_PENDEN(); 
    466                
    467            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    468            {
    469              enable |= ( 0x01 << index );
    470              osal_buffer_uint24( buf, enable );
    471              MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN( buf );
    472            }
    473            else
    474            {
    475              enable |= ( 0x01 << ( index * 2 ) );
    476              osal_buffer_uint24( buf, enable );
    477              MAC_RADIO_SRC_MATCH_SET_EXTPENDEN( buf );
    478            }
    479          }
    480          
    481          /*********************************************************************
    482           * @fn          macSrcMatchSetEnableBit
    483           *
    484           * @brief       Set or clear the enable bit in the SRCMATCH EN register
    485           *
    486           * @param       index - index of the entry in the source address table
    487           * @param       option - true (set the enable bit), or false (clear the enable bit)
    488           *
    489           * @return      none
    490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E5..         MOV       A,?V5
   \   000002                REQUIRE ??Subroutine6_0
   \   000002                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   33           RLC       A
   \   000001   95E0         SUBB      A,0xE0 /* A   */
   \   000003   F5..         MOV       ?V6,A
   \   000005   F5..         MOV       ?V7,A
   \   000007   78..         MOV       R0,#?V0
   \   000009   79..         MOV       R1,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    491          static void macSrcMatchSetEnableBit( uint8 index, bool option )
   \                     macSrcMatchSetEnableBit:
    492          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    493            uint24 enable;  
    494            
    495            enable = MAC_RADIO_SRC_MATCH_GET_EN(); 
   \   000009                ; Setup parameters for call to function macSrcMatchGetEnableBit
   \   000009   12....       LCALL     `??macSrcMatchGetEnableBit::?relay`; Banked call to: macSrcMatchGetEnableBit
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V3,R5
    496                
    497            if( option == TRUE )
   \   000014   75..01       MOV       ?V6,#0x1
   \   000017   75..00       MOV       ?V7,#0x0
   \   00001A   EE           MOV       A,R6
   \   00001B   C3           CLR       C
   \   00001C   33           RLC       A
   \   00001D   78..         MOV       R0,#?V6
   \   00001F   12....       LCALL     ?S_SHL
   \   000022   85....       MOV       ?V4,?V6
   \   000025   85....       MOV       ?V5,?V7
   \   000028   75..01       MOV       ?V6,#0x1
   \   00002B   F5..         MOV       ?V7,A
   \   00002D   EE           MOV       A,R6
   \   00002E   78..         MOV       R0,#?V6
   \   000030   12....       LCALL     ?S_SHL
   \   000033   A8..         MOV       R0,?V6
   \   000035   A9..         MOV       R1,?V7
   \   000037   04           INC       A
   \   000038   6F           XRL       A,R7
   \   000039   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   00003C   701A         JNZ       ??macSrcMatchSetEnableBit_0
    498            {
    499              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6402         XRL       A,#0x2
   \   000041   700D         JNZ       ??macSrcMatchSetEnableBit_1
    500              {
    501                enable |= ( 0x01 << index );
    502                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   000043                ; Setup parameters for call to function osal_buffer_uint24
   \   000043   88..         MOV       ?V4,R0
   \   000045   E9           MOV       A,R1
   \   000046   F5..         MOV       ?V5,A
   \   000048   12....       LCALL     ??Subroutine6_0 & 0xFFFF
    503              }
   \                     ??CrossCallReturnLabel_8:
   \   00004B   12....       LCALL     ?L_IOR
   \   00004E   801B         SJMP      ??macSrcMatchSetEnableBit_2
    504              else
    505              {
    506                enable |= ( 0x01 << ( index * 2 ) );
    507                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \                     ??macSrcMatchSetEnableBit_1:
   \   000050                ; Setup parameters for call to function osal_buffer_uint24
   \   000050   12....       LCALL     ?Subroutine4 & 0xFFFF
    508              }
    509            }
   \                     ??CrossCallReturnLabel_13:
   \   000053   12....       LCALL     ?L_IOR
   \   000056   802D         SJMP      ??macSrcMatchSetEnableBit_3
    510            else
    511            {
    512              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \                     ??macSrcMatchSetEnableBit_0:
   \   000058   E0           MOVX      A,@DPTR
   \   000059   6402         XRL       A,#0x2
   \   00005B   7017         JNZ       ??macSrcMatchSetEnableBit_4
    513              {
    514                enable &= ~( 0x01 << index );
    515                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   00005D                ; Setup parameters for call to function osal_buffer_uint24
   \   00005D   E8           MOV       A,R0
   \   00005E   F4           CPL       A
   \   00005F   F5..         MOV       ?V4,A
   \   000061   E9           MOV       A,R1
   \   000062   F4           CPL       A
   \   000063   F5..         MOV       ?V5,A
   \   000065   12....       LCALL     ??Subroutine6_0 & 0xFFFF
    516              }
   \                     ??CrossCallReturnLabel_9:
   \   000068   12....       LCALL     ?L_AND
   \                     ??macSrcMatchSetEnableBit_2:
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000070   7A83         MOV       R2,#-0x7d
   \   000072   8018         SJMP      ??macSrcMatchSetEnableBit_5
    517              else
    518              {
    519                enable &= ~( 0x01 << ( index * 2 ) );
    520                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \                     ??macSrcMatchSetEnableBit_4:
   \   000074                ; Setup parameters for call to function osal_buffer_uint24
   \   000074   E5..         MOV       A,?V4
   \   000076   F4           CPL       A
   \   000077   F8           MOV       R0,A
   \   000078   E5..         MOV       A,?V5
   \   00007A   F4           CPL       A
   \   00007B   88..         MOV       ?V4,R0
   \   00007D   F5..         MOV       ?V5,A
   \   00007F   12....       LCALL     ??Subroutine6_0 & 0xFFFF
    521              }
    522          
    523            }
   \                     ??CrossCallReturnLabel_10:
   \   000082   12....       LCALL     ?L_AND
   \                     ??macSrcMatchSetEnableBit_3:
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00008A   7A86         MOV       R2,#-0x7a
   \                     ??macSrcMatchSetEnableBit_5:
   \   00008C   7B61         MOV       R3,#0x61
   \   00008E   12....       LCALL     `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   000091   7404         MOV       A,#0x4
   \   000093   02....       LJMP      ?Subroutine1 & 0xFFFF
    524          }
    525          
    526          /*********************************************************************
    527           * @fn          macSrcMatchCheckEnableBit
    528           *
    529           * @brief       Check the enable bit in the source address table
    530           *
    531           * @param       index - index of the entry in the source address table
    532           *
    533           * @return      TRUE or FALSE
    534           */
    535          static bool macSrcMatchCheckEnableBit( uint8 index )
    536          {
    537            uint24 enable;
    538            
    539            if( macSrcMatchAddrMode == SADDR_MODE_EXT )
    540            {
    541              index *= 2;
    542            }
    543            
    544            enable = MAC_RADIO_SRC_MATCH_GET_EN();
    545               
    546            if( enable & ( 0x01 << index ) )
    547            {
    548              return TRUE;
    549            }
    550          
    551            return FALSE; 
    552          }
    553           
    554          
    555          /*********************************************************************
    556           * @fn          macSrcMatchGetEnableBit
    557           *
    558           * @brief       Return the SRCMATCH enable bitmap
    559           *
    560           * @param       none
    561           *
    562           * @return      uint24 - 24 bits bitmap
    563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          static uint24 macSrcMatchGetEnableBit( void )
   \                     macSrcMatchGetEnableBit:
    565          { 
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    566            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    567            
    568            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   000009   90....       MOV       DPTR,#macSrcMatchAddrMode
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7903         MOV       R1,#0x3
   \   000011   AC..         MOV       R4,?XSP + 0
   \   000013   AD..         MOV       R5,?XSP + 1
   \   000015   7004         JNZ       ??macSrcMatchGetEnableBit_0
    569            {
    570              MAC_RADIO_GET_SRC_SHORTEN( buf );
   \   000017                ; Setup parameters for call to function macMemReadRam
   \   000017   7A83         MOV       R2,#-0x7d
   \   000019   8002         SJMP      ??macSrcMatchGetEnableBit_1
    571            }
    572            else
    573            {
    574              MAC_RADIO_GET_SRC_EXTEN( buf );
   \                     ??macSrcMatchGetEnableBit_0:
   \   00001B                ; Setup parameters for call to function macMemReadRam
   \   00001B   7A86         MOV       R2,#-0x7a
   \                     ??macSrcMatchGetEnableBit_1:
   \   00001D   7B61         MOV       R3,#0x61
   \   00001F   12....       LCALL     `??macMemReadRam::?relay`; Banked call to: macMemReadRam
    575            }
    576            
    577            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
   \   000022                ; Setup parameters for call to function osal_build_uint32
   \   000022   7903         MOV       R1,#0x3
   \   000024   AA..         MOV       R2,?XSP + 0
   \   000026   AB..         MOV       R3,?XSP + 1
   \   000028   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00002B   7403         MOV       A,#0x3
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
    578          
    579          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#macSrcMatchMaxNumEntries
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   C3           CLR       C
   \   00000E   98           SUBB      A,R0
   \   00000F   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for macSrcMatchAddrMode>`:
   \   000000   02           DB 2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchDeleteEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchAckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchCheckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchCheckResult::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckResult

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchCheckSrcAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchCheckSrcAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchSetEnableBit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchSetEnableBit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchGetEnableBit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchGetEnableBit
    580          
    581          
    582          /*********************************************************************
    583           * @fn          macSrcMatchGetPendEnBit
    584           *
    585           * @brief       Return the SRCMATCH Pend enable bitmap
    586           *
    587           * @param       none
    588           *
    589           * @return      uint24 - 24 bits bitmap
    590           */
    591          static uint24 macSrcMatchGetPendEnBit( void )
    592          {
    593            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    594          
    595            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    596            {
    597              MAC_RADIO_GET_SRC_SHORTPENDEN( buf );
    598            }
    599            else
    600            {
    601              MAC_RADIO_GET_SRC_EXTENPEND( buf );
    602            }
    603            
    604            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    605          }
    606          
    607          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_SrcMatchAckAllPending
      2     37   MAC_SrcMatchAddEntry
        0     33   -> macMemReadRam
        0     33   -> macMemWriteRam
        0     33   -> macSrcMatchCheckSrcAddr
        0     33   -> macSrcMatchGetEnableBit
        0     33   -> macSrcMatchSetEnableBit
        0     37   -> osal_buffer_uint24
        0     33   -> osal_build_uint32
      2      0   MAC_SrcMatchCheckAllPending
      2      0   MAC_SrcMatchCheckResult
      2      0   MAC_SrcMatchDeleteEntry
        2      0   -> macSrcMatchCheckSrcAddr
        2      0   -> macSrcMatchSetEnableBit
      2      0   MAC_SrcMatchEnable
      1     67   macSrcMatchCheckSrcAddr
        0     31   -> macMemReadRam
        0     31   -> macSrcMatchGetEnableBit
        0     34   -> osal_memcmp
      2     36   macSrcMatchGetEnableBit
        2      3   -> macMemReadRam
        2      3   -> osal_build_uint32
      0     53   macSrcMatchSetEnableBit
        0     16   -> macSrcMatchGetEnableBit
        0     20   -> osal_buffer_uint24


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for macSrcMatchAddrMode>
      12  ??Subroutine6_0
       7  ?Subroutine0
       8  ?Subroutine1
      16  ?Subroutine2
       9  ?Subroutine3
       2  ?Subroutine4
      10  ?Subroutine5
      34  MAC_SrcMatchAckAllPending
       6  MAC_SrcMatchAckAllPending::?relay
     556  MAC_SrcMatchAddEntry
       6  MAC_SrcMatchAddEntry::?relay
      18  MAC_SrcMatchCheckAllPending
       6  MAC_SrcMatchCheckAllPending::?relay
      25  MAC_SrcMatchCheckResult
       6  MAC_SrcMatchCheckResult::?relay
      52  MAC_SrcMatchDeleteEntry
       6  MAC_SrcMatchDeleteEntry::?relay
      83  MAC_SrcMatchEnable
       6  MAC_SrcMatchEnable::?relay
       1  macSrcMatchAddrMode
     273  macSrcMatchCheckSrcAddr
       6  macSrcMatchCheckSrcAddr::?relay
      51  macSrcMatchGetEnableBit
       6  macSrcMatchGetEnableBit::?relay
       1  macSrcMatchIsAckAllPending
       1  macSrcMatchIsEnabled
       1  macSrcMatchMaxNumEntries
     150  macSrcMatchSetEnableBit
       6  macSrcMatchSetEnableBit::?relay

 
 1 306 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     3 bytes in segment XDATA_Z
 
    55 bytes of CODE     memory
 1 306 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
