###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  17:52:24
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_sleep.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWC8BC.tmp
#        (D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_sleep.c -D
#        ZIGBEEPRO -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\hal_sleep.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\hal_sleep.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_sleep.c
      1          /**************************************************************************************************
      2            Filename:       hal_sleep.c
      3            Revised:        $Date: 2009-01-29 15:49:56 -0800 (Thu, 29 Jan 2009) $
      4            Revision:       $Revision: 18906 $
      5          
      6            Description:    This module contains the HAL power management procedures for the CC2530.
      7          
      8          
      9            Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "hal_types.h"
     45          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1
     46          #include "hal_board.h"
     47          #include "hal_sleep.h"
     48          #include "hal_led.h"
     49          #include "hal_key.h"
     50          #include "mac_api.h"
     51          #include "OSAL.h"
     52          #include "OSAL_Timers.h"
     53          #include "OSAL_Tasks.h"
     54          #include "OSAL_PwrMgr.h"
     55          #include "OnBoard.h"
     56          #include "hal_drivers.h"
     57          #include "hal_assert.h"
     58          #include "mac_mcu.h"
     59          
     60          #if !defined (RTR_NWK) && defined (NWK_AUTO_POLL)
     61          #include "nwk_globals.h"
     62          #include "ZGlobals.h"
     63          #endif
     64          
     65          /* ------------------------------------------------------------------------------------------------
     66           *                                           Macros
     67           * ------------------------------------------------------------------------------------------------
     68           */
     69          
     70          /* POWER CONSERVATION DEFINITIONS
     71           * Sleep mode H/W definitions (enabled with POWER_SAVING compile option)
     72           */
     73          #define CC2530_PM0            0  /* PM0, Clock oscillators on, voltage regulator on */
     74          #define CC2530_PM1            1  /* PM1, 32.768 kHz oscillators on, voltage regulator on */
     75          #define CC2530_PM2            2  /* PM2, 32.768 kHz oscillators on, voltage regulator off */
     76          #define CC2530_PM3            3  /* PM3, All clock oscillators off, voltage regulator off */
     77          
     78          /* HAL power management mode is set according to the power management state. The default
     79           * setting is HAL_SLEEP_OFF. The actual value is tailored to different HW platform. Both
     80           * HAL_SLEEP_TIMER and HAL_SLEEP_DEEP selections will:
     81           *   1. turn off the system clock, and
     82           *   2. halt the MCU.
     83           * HAL_SLEEP_TIMER can be woken up by sleep timer interrupt, I/O interrupt and reset.
     84           * HAL_SLEEP_DEEP can be woken up by I/O interrupt and reset.
     85           */
     86          #define HAL_SLEEP_OFF         CC2530_PM0
     87          #define HAL_SLEEP_TIMER       CC2530_PM2
     88          #define HAL_SLEEP_DEEP        CC2530_PM3
     89          
     90          /* MAX_SLEEP_TIME calculation:
     91           *   Sleep timer maximum duration = 0xFFFF7F / 32768 Hz = 511.996 seconds
     92           *   Round it to 510 seconds or 510000 ms
     93           */
     94          #define MAX_SLEEP_TIME                   510000             /* maximum time to sleep allowed by ST */
     95          
     96          
     97          /* minimum time to sleep, this macro is to:
     98           * 1. avoid thrashing in-and-out of sleep with short OSAL timer (~2ms)
     99           * 2. define minimum safe sleep period
    100           */
    101          #if !defined (PM_MIN_SLEEP_TIME)
    102          #define PM_MIN_SLEEP_TIME                14                 /* default to minimum safe sleep time minimum CAP */
    103          #endif
    104          
    105          /* The PCON instruction must be 4-byte aligned. The following code may cause excessive power
    106           * consumption if not aligned. See linker file ".xcl" for actual placement.
    107           */
    108          #pragma location = "SLEEP_CODE"

   \                                 In  segment SLEEP_CODE, align 1, keep-with-next
    109          static void halSetSleepMode(void)
   \                     halSetSleepMode:
    110          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    111            PCON |= PCON_IDLE;
   \   000000   438701       ORL       0x87,#0x1
    112            asm("NOP");
   \   000003   00           NOP
    113          }
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE PCON
    114          
    115          /* This value is used to adjust the sleep timer compare value such that the sleep timer
    116           * compare takes into account the amount of processing time spent in function halSleep().
    117           * The first value is determined by measuring the number of sleep timer ticks it from
    118           * the beginning of the function to entering sleep mode.  The second value is determined
    119           * by measuring the number of sleep timer ticks from exit of sleep mode to the call to
    120           * osal_adjust_timers().
    121           */
    122          #define HAL_SLEEP_ADJ_TICKS   (7 + 10)
    123          
    124          #ifndef HAL_SLEEP_DEBUG_POWER_MODE
    125          /* set CC2530 power mode; always use PM2 */
    126          #define HAL_SLEEP_SET_POWER_MODE(mode)       st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \
    127                                                           SLEEPCMD |= mode;   /* set mode bits   */    \
    128                                                           while (!(STLOAD & LDRDY));                   \
    129                                                           {                                            \
    130                                                             halSetSleepMode();                         \
    131                                                           }                                            \
    132                                                         )
    133          #else
    134          /* Debug: don't set power mode, just block until sleep timer interrupt */
    135          #define HAL_SLEEP_SET_POWER_MODE(mode)      st( while(halSleepInt == FALSE); \
    136                                                          halSleepInt = FALSE; )
    137          #endif
    138          
    139          /* sleep and external interrupt port masks */
    140          #define STIE_BV                             BV(5)
    141          #define P0IE_BV                             BV(5)
    142          #define P1IE_BV                             BV(4)
    143          #define P2IE_BV                             BV(1)
    144          
    145          /* sleep timer interrupt control */
    146          #define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= STIE_BV;)     /* enable sleep timer interrupt */
    147          #define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~STIE_BV;)    /* disable sleep timer interrupt */
    148          #define HAL_SLEEP_TIMER_CLEAR_INT()         st(IRCON &= ~0x80;)      /* clear sleep interrupt flag */
    149          
    150          /* backup interrupt enable registers before sleep */
    151          #define HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2) st(ien0  = IEN0;    /* backup IEN0 register */ \
    152                                                                       ien1  = IEN1;    /* backup IEN1 register */ \
    153                                                                       ien2  = IEN2;    /* backup IEN2 register */ \
    154                                                                       IEN0 &= STIE_BV; /* disable IEN0 except STIE */ \
    155                                                                       IEN1 &= P0IE_BV; /* disable IEN1 except P0IE */ \
    156                                                                       IEN2 &= (P1IE_BV|P2IE_BV);) /* disable IEN2 except P1IE, P2IE */
    157          
    158          /* restore interrupt enable registers before sleep */
    159          #define HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2) st(IEN0 = ien0;   /* restore IEN0 register */ \
    160                                                            IEN1 = ien1;   /* restore IEN1 register */ \
    161                                                            IEN2 = ien2;)  /* restore IEN2 register */
    162          
    163          /* convert msec to 320 usec units with round */
    164          #define HAL_SLEEP_MS_TO_320US(ms)           (((((uint32) (ms)) * 100) + 31) / 32)
    165          
    166          /* for optimized indexing of uint32's */
    167          #if HAL_MCU_LITTLE_ENDIAN()
    168          #define UINT32_NDX0   0
    169          #define UINT32_NDX1   1
    170          #define UINT32_NDX2   2
    171          #define UINT32_NDX3   3
    172          #else
    173          #define UINT32_NDX0   3
    174          #define UINT32_NDX1   2
    175          #define UINT32_NDX2   1
    176          #define UINT32_NDX3   0
    177          #endif
    178          
    179          /* ------------------------------------------------------------------------------------------------
    180           *                                        Local Variables
    181           * ------------------------------------------------------------------------------------------------
    182           */
    183          
    184          /* HAL power management mode is set according to the power management state.
    185           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          static uint8 halPwrMgtMode = HAL_SLEEP_OFF;
   \                     halPwrMgtMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    187          
    188          /* stores the sleep timer count upon entering sleep */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static uint32 halSleepTimerStart;
   \                     halSleepTimerStart:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    190          
    191          /* stores the accumulated sleep time */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          static uint32 halAccumulatedSleepTime;
   \                     halAccumulatedSleepTime:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    193          
    194          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    195          static bool halSleepInt = FALSE;
    196          #endif
    197          
    198          /* ------------------------------------------------------------------------------------------------
    199           *                                      Function Prototypes
    200           * ------------------------------------------------------------------------------------------------
    201           */
    202          
    203          void halSleepSetTimer(uint32 timeout);
    204          uint32 HalTimerElapsed( void );
    205          
    206          /**************************************************************************************************
    207           * @fn          halSleep
    208           *
    209           * @brief       This function is called from the OSAL task loop using and existing OSAL
    210           *              interface.  It sets the low power mode of the MAC and the CC2530.
    211           *
    212           * input parameters
    213           *
    214           * @param       osal_timeout - Next OSAL timer timeout.
    215           *
    216           * output parameters
    217           *
    218           * None.
    219           *
    220           * @return      None.
    221           **************************************************************************************************
    222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          void halSleep( uint16 osal_timeout )
   \                     halSleep:
    224          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    225            uint32        timeout;
    226            uint32        macTimeout = 0;
    227          
    228            halAccumulatedSleepTime = 0;
   \   00000A   90....       MOV       DPTR,#halAccumulatedSleepTime
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   F0           MOVX      @DPTR,A
    229          
    230            /* get next OSAL timer expiration converted to 320 usec units */
    231            timeout = HAL_SLEEP_MS_TO_320US(osal_timeout);
   \   000015   8A..         MOV       ?V0,R2
   \   000017   8B..         MOV       ?V1,R3
   \   000019   F5..         MOV       ?V2,A
   \   00001B   F5..         MOV       ?V3,A
   \   00001D   90....       MOV       DPTR,#__Constant_64
   \   000020   78..         MOV       R0,#?V4
   \   000022   12....       LCALL     ?L_MOV_X
   \   000025   78..         MOV       R0,#?V0
   \   000027   79..         MOV       R1,#?V4
   \   000029   12....       LCALL     ?L_MUL
   \   00002C   90....       MOV       DPTR,#__Constant_1f
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?L_ADD_X
   \   000034   7405         MOV       A,#0x5
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?UL_SHR
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?L_MOV_TO_X
    232            if (timeout == 0)
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   12....       LCALL     ?XLOAD_R0123
   \   00004F   E8           MOV       A,R0
   \   000050   49           ORL       A,R1
   \   000051   4A           ORL       A,R2
   \   000052   4B           ORL       A,R3
   \   000053   7023         JNZ       ??halSleep_0
    233            {
    234              timeout = MAC_PwrNextTimeout();
   \   000055                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000055   12....       LCALL     `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   12....       LCALL     ?XSTORE_R2345
    235            }
    236            else
    237            {
    238              /* get next MAC timer expiration */
    239              macTimeout = MAC_PwrNextTimeout();
    240          
    241              /* get lesser of two timeouts */
    242              if ((macTimeout != 0) && (macTimeout < timeout))
    243              {
    244                timeout = macTimeout;
    245              }
    246            }
    247          
    248            /* HAL_SLEEP_PM2 is entered only if the timeout is zero and
    249             * the device is a stimulated device.
    250             */
    251            halPwrMgtMode = (timeout == 0) ? HAL_SLEEP_DEEP : HAL_SLEEP_TIMER;
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   12....       LCALL     ?XLOAD_R0123
   \   00006A   E8           MOV       A,R0
   \   00006B   49           ORL       A,R1
   \   00006C   4A           ORL       A,R2
   \   00006D   4B           ORL       A,R3
   \   00006E   7031         JNZ       ??halSleep_1
   \   000070   90....       MOV       DPTR,#halPwrMgtMode
   \   000073   7403         MOV       A,#0x3
   \   000075   F0           MOVX      @DPTR,A
   \   000076   8056         SJMP      ??halSleep_2
   \                     ??halSleep_0:
   \   000078                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000078   12....       LCALL     `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   00007B   8A..         MOV       ?V0,R2
   \   00007D   8B..         MOV       ?V1,R3
   \   00007F   8C..         MOV       ?V2,R4
   \   000081   8D..         MOV       ?V3,R5
   \   000083   EA           MOV       A,R2
   \   000084   4B           ORL       A,R3
   \   000085   4C           ORL       A,R4
   \   000086   4D           ORL       A,R5
   \   000087   6018         JZ        ??halSleep_1
   \   000089   85..82       MOV       DPL,?XSP + 0
   \   00008C   85..83       MOV       DPH,?XSP + 1
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?UL_GE_X
   \   000094   400B         JC        ??halSleep_1
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   78..         MOV       R0,#?V0
   \   00009E   12....       LCALL     ?L_MOV_TO_X
   \                     ??halSleep_1:
   \   0000A1   90....       MOV       DPTR,#halPwrMgtMode
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   F0           MOVX      @DPTR,A
    252          
    253            /* DEEP sleep can only be entered when zgPollRate == 0.
    254             * This is to eliminate any possibility of entering PM3 between
    255             * two network timers.
    256             */
    257          #if !defined (RTR_NWK) && defined (NWK_AUTO_POLL)
    258            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    259                (timeout == 0 && zgPollRate == 0))
    260          #else
    261            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    262                (timeout == 0))
   \   0000A7   90....       MOV       DPTR,#__Constant_2d
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?L_MOV_X
   \   0000AF   85..82       MOV       DPL,?XSP + 0
   \   0000B2   85..83       MOV       DPH,?XSP + 1
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?UL_GT_X
   \   0000BA   5012         JNC       ??halSleep_2
   \   0000BC   85..82       MOV       DPL,?XSP + 0
   \   0000BF   85..83       MOV       DPH,?XSP + 1
   \   0000C2   12....       LCALL     ?XLOAD_R0123
   \   0000C5   E8           MOV       A,R0
   \   0000C6   49           ORL       A,R1
   \   0000C7   4A           ORL       A,R2
   \   0000C8   4B           ORL       A,R3
   \   0000C9   6003         JZ        $+5
   \   0000CB   02....       LJMP      ??halSleep_3 & 0xFFFF
    263          #endif
    264            {
    265              halIntState_t ien0, ien1, ien2;
    266          
    267              HAL_ASSERT(HAL_INTERRUPTS_ARE_ENABLED());
   \                     ??halSleep_2:
   \   0000CE   A2AF         MOV       C,0xa8.7
   \   0000D0   4003         JC        ??halSleep_4
   \   0000D2                ; Setup parameters for call to function halAssertHandler
   \   0000D2   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    268              HAL_DISABLE_INTERRUPTS();
   \                     ??halSleep_4:
   \   0000D5   C2AF         CLR       0xa8.7
    269          
    270              /* always use "deep sleep" to turn off radio VREG on CC2530 */
    271              if (MAC_PwrOffReq(MAC_PWR_SLEEP_DEEP) == MAC_SUCCESS)
   \   0000D7                ; Setup parameters for call to function MAC_PwrOffReq
   \   0000D7   7902         MOV       R1,#0x2
   \   0000D9   12....       LCALL     `??MAC_PwrOffReq::?relay`; Banked call to: MAC_PwrOffReq
   \   0000DC   E9           MOV       A,R1
   \   0000DD   6003         JZ        $+5
   \   0000DF   02....       LJMP      ??halSleep_5 & 0xFFFF
    272              {
    273                while ( (HAL_SLEEP_MS_TO_320US(halAccumulatedSleepTime) < timeout) || (timeout == 0) )
   \                     ??halSleep_6:
   \   0000E2   85..82       MOV       DPL,?XSP + 0
   \   0000E5   85..83       MOV       DPH,?XSP + 1
   \   0000E8   C082         PUSH      DPL
   \   0000EA   C083         PUSH      DPH
   \   0000EC   90....       MOV       DPTR,#halAccumulatedSleepTime
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?L_MOV_X
   \   0000F4   90....       MOV       DPTR,#__Constant_64
   \   0000F7   78..         MOV       R0,#?V4
   \   0000F9   12....       LCALL     ?L_MOV_X
   \   0000FC   78..         MOV       R0,#?V0
   \   0000FE   79..         MOV       R1,#?V4
   \   000100   12....       LCALL     ?L_MUL
   \   000103   90....       MOV       DPTR,#__Constant_1f
   \   000106   78..         MOV       R0,#?V0
   \   000108   12....       LCALL     ?L_ADD_X
   \   00010B   7405         MOV       A,#0x5
   \   00010D   78..         MOV       R0,#?V0
   \   00010F   12....       LCALL     ?UL_SHR
   \   000112   D083         POP       DPH
   \   000114   D082         POP       DPL
   \   000116   78..         MOV       R0,#?V0
   \   000118   12....       LCALL     ?UL_GE_X
   \   00011B   5012         JNC       ??halSleep_7
   \   00011D   85..82       MOV       DPL,?XSP + 0
   \   000120   85..83       MOV       DPH,?XSP + 1
   \   000123   12....       LCALL     ?XLOAD_R0123
   \   000126   E8           MOV       A,R0
   \   000127   49           ORL       A,R1
   \   000128   4A           ORL       A,R2
   \   000129   4B           ORL       A,R3
   \   00012A   6003         JZ        $+5
   \   00012C   02....       LJMP      ??halSleep_8 & 0xFFFF
    274                {
    275                  /* get peripherals ready for sleep */
    276                  HalKeyEnterSleep();
   \                     ??halSleep_7:
   \   00012F                ; Setup parameters for call to function HalKeyEnterSleep
   \   00012F   12....       LCALL     `??HalKeyEnterSleep::?relay`; Banked call to: HalKeyEnterSleep
    277          
    278          #ifdef HAL_SLEEP_DEBUG_LED
    279                  HAL_TURN_OFF_LED3();
    280          #else
    281                  /* use this to turn LEDs off during sleep */
    282                  HalLedEnterSleep();
   \   000132                ; Setup parameters for call to function HalLedEnterSleep
   \   000132   12....       LCALL     `??HalLedEnterSleep::?relay`; Banked call to: HalLedEnterSleep
    283          #endif
    284          
    285                  /* enable sleep timer interrupt */
    286                  if (timeout != 0)
   \   000135   85..82       MOV       DPL,?XSP + 0
   \   000138   85..83       MOV       DPH,?XSP + 1
   \   00013B   12....       LCALL     ?XLOAD_R0123
   \   00013E   E8           MOV       A,R0
   \   00013F   49           ORL       A,R1
   \   000140   4A           ORL       A,R2
   \   000141   4B           ORL       A,R3
   \   000142   603D         JZ        ??halSleep_9
    287                  {
    288                    if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
   \   000144   90....       MOV       DPTR,#__Constant_185197
   \   000147   78..         MOV       R0,#?V0
   \   000149   12....       LCALL     ?L_MOV_X
   \   00014C   85..82       MOV       DPL,?XSP + 0
   \   00014F   85..83       MOV       DPH,?XSP + 1
   \   000152   78..         MOV       R0,#?V0
   \   000154   12....       LCALL     ?UL_GT_X
   \   000157   4018         JC        ??halSleep_10
    289                    {
    290                      timeout -= HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
   \   000159   90....       MOV       DPTR,#__Constant_ffe7ae6a
   \   00015C   78..         MOV       R0,#?V0
   \   00015E   12....       LCALL     ?L_MOV_X
   \   000161   85..82       MOV       DPL,?XSP + 0
   \   000164   85..83       MOV       DPH,?XSP + 1
   \   000167   78..         MOV       R0,#?V0
   \   000169   12....       LCALL     ?L_ADD_TO_X
    291                      halSleepSetTimer(HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ));
   \   00016C                ; Setup parameters for call to function halSleepSetTimer
   \   00016C   90....       MOV       DPTR,#__Constant_185196
   \   00016F   8006         SJMP      ??halSleep_11
    292                    }
    293                    else
    294                    {
    295                      /* set sleep timer */
    296                      halSleepSetTimer(timeout);
   \                     ??halSleep_10:
   \   000171                ; Setup parameters for call to function halSleepSetTimer
   \   000171   85..82       MOV       DPL,?XSP + 0
   \   000174   85..83       MOV       DPH,?XSP + 1
   \                     ??halSleep_11:
   \   000177   12....       LCALL     ?XLOAD_R2345
   \   00017A   12....       LCALL     `??halSleepSetTimer::?relay`; Banked call to: halSleepSetTimer
    297                    }
    298          
    299                    /* set up sleep timer interrupt */
    300                    HAL_SLEEP_TIMER_CLEAR_INT();
   \   00017D   C2C7         CLR       0xc0.7
    301                    HAL_SLEEP_TIMER_ENABLE_INT();
   \   00017F   D2AD         SETB      0xa8.5
    302                  }
    303          
    304          #ifdef HAL_SLEEP_DEBUG_LED
    305                  if (halPwrMgtMode == CC2530_PM1)
    306                  {
    307                    HAL_TURN_ON_LED1();
    308                  }
    309                  else
    310                  {
    311                    HAL_TURN_OFF_LED1();
    312                  }
    313          #endif
    314          
    315                  /* save interrupt enable registers and disable all interrupts */
    316                  HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
   \                     ??halSleep_9:
   \   000181   85A8..       MOV       ?V0,0xa8+0x0
   \   000184   AFB8         MOV       R7,0xb8+0x0
   \   000186   AE9A         MOV       R6,0x9a+0x0
   \   000188   53A820       ANL       0xa8,#0x20
   \   00018B   53B820       ANL       0xb8,#0x20
   \   00018E   539A12       ANL       0x9a,#0x12
    317                  HAL_ENABLE_INTERRUPTS();
   \   000191   D2AF         SETB      0xa8.7
    318          
    319                  /* set CC2530 power mode, interrupt is disabled after this function */
    320                  HAL_SLEEP_SET_POWER_MODE(halPwrMgtMode);
   \   000193   53BEFC       ANL       0xbe,#0xfc
   \   000196   90....       MOV       DPTR,#halPwrMgtMode
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   42BE         ORL       0xbe,A
   \                     ??halSleep_12:
   \   00019C   E5AD         MOV       A,0xad
   \   00019E   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001A0   50FA         JNC       ??halSleep_12
   \   0001A2                ; Setup parameters for call to function halSetSleepMode
   \   0001A2   12....       LCALL     `??halSetSleepMode::?relay`; Banked call to: halSetSleepMode
    321                  HAL_DISABLE_INTERRUPTS();
   \   0001A5   C2AF         CLR       0xa8.7
    322          
    323                  /* restore interrupt enable registers */
    324                  HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2);
   \   0001A7   85..A8       MOV       0xa8,?V0
   \   0001AA   8FB8         MOV       0xb8,R7
   \   0001AC   8E9A         MOV       0x9a,R6
    325          
    326                  /* disable sleep timer interrupt */
    327                  HAL_SLEEP_TIMER_DISABLE_INT();
   \   0001AE   C2AD         CLR       0xa8.5
    328          
    329                  /* Calculate timer elasped */
    330                  halAccumulatedSleepTime += (HalTimerElapsed() / TICK_COUNT);
   \   0001B0                ; Setup parameters for call to function HalTimerElapsed
   \   0001B0   12....       LCALL     `??HalTimerElapsed::?relay`; Banked call to: HalTimerElapsed
   \   0001B3   8A..         MOV       ?V0,R2
   \   0001B5   8B..         MOV       ?V1,R3
   \   0001B7   8C..         MOV       ?V2,R4
   \   0001B9   8D..         MOV       ?V3,R5
   \   0001BB   90....       MOV       DPTR,#halAccumulatedSleepTime
   \   0001BE   78..         MOV       R0,#?V0
   \   0001C0   12....       LCALL     ?L_ADD_TO_X
    331          
    332                  /* deduct the sleep time for the next iteration */
    333                  if ( osal_timeout > halAccumulatedSleepTime)
    334                  {
    335                    osal_timeout -= halAccumulatedSleepTime;
    336                  }
    337          
    338          #ifdef HAL_SLEEP_DEBUG_LED
    339                  HAL_TURN_ON_LED3();
    340          #else
    341                  /* use this to turn LEDs back on after sleep */
    342                  HalLedExitSleep();
   \   0001C3                ; Setup parameters for call to function HalLedExitSleep
   \   0001C3   12....       LCALL     `??HalLedExitSleep::?relay`; Banked call to: HalLedExitSleep
    343          #endif
    344          
    345                  /* handle peripherals; exit loop if key presses */
    346                  if ( HalKeyExitSleep() )
   \   0001C6                ; Setup parameters for call to function HalKeyExitSleep
   \   0001C6   12....       LCALL     `??HalKeyExitSleep::?relay`; Banked call to: HalKeyExitSleep
   \   0001C9   E9           MOV       A,R1
   \   0001CA   7012         JNZ       ??halSleep_8
    347                  {
    348                    break;
    349                  }
    350          
    351                  /* exit loop if no timer active */
    352                  if ( timeout == 0 ) break;
   \   0001CC   85..82       MOV       DPL,?XSP + 0
   \   0001CF   85..83       MOV       DPH,?XSP + 1
   \   0001D2   12....       LCALL     ?XLOAD_R0123
   \   0001D5   E8           MOV       A,R0
   \   0001D6   49           ORL       A,R1
   \   0001D7   4A           ORL       A,R2
   \   0001D8   4B           ORL       A,R3
   \   0001D9   6003         JZ        $+5
   \   0001DB   02....       LJMP      ??halSleep_6 & 0xFFFF
    353                }
    354          
    355                /* power on the MAC; blocks until completion */
    356                MAC_PwrOnReq();
   \                     ??halSleep_8:
   \   0001DE                ; Setup parameters for call to function MAC_PwrOnReq
   \   0001DE   12....       LCALL     `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
    357          
    358              }
    359          
    360              HAL_ENABLE_INTERRUPTS();
   \                     ??halSleep_5:
   \   0001E1   D2AF         SETB      0xa8.7
    361            }
    362          }
   \                     ??halSleep_3:
   \   0001E3                REQUIRE ?Subroutine0
   \   0001E3                REQUIRE _A_IEN0
   \   0001E3                REQUIRE _A_IRCON
   \   0001E3                REQUIRE _A_IEN1
   \   0001E3                REQUIRE IEN2
   \   0001E3                REQUIRE SLEEPCMD
   \   0001E3                REQUIRE STLOAD
   \   0001E3                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7404         MOV       A,#0x4
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   7F08         MOV       R7,#0x8
   \   000007   02....       LJMP      ?BANKED_LEAVE_XDATA
    363          
    364          /**************************************************************************************************
    365           * @fn          halSleepSetTimer
    366           *
    367           * @brief       This function sets the CC2530 sleep timer compare value.  First it reads and
    368           *              stores the value of the sleep timer; this value is used later to update OSAL
    369           *              timers.  Then the timeout value is converted from 320 usec units to 32 kHz
    370           *              period units and the compare value is set to the timeout.
    371           *
    372           * input parameters
    373           *
    374           * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
    375           *                        this value.
    376           *
    377           * output parameters
    378           *
    379           * None.
    380           *
    381           * @return      None.
    382           **************************************************************************************************
    383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          void halSleepSetTimer(uint32 timeout)
   \                     halSleepSetTimer:
    385          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
    386            uint32 ticks;
    387          
    388            /* read the sleep timer; ST0 must be read first */
    389            ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
   \   000012   E595         MOV       A,0x95
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   F0           MOVX      @DPTR,A
    390            ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
   \   00001B   E596         MOV       A,0x96
   \   00001D   C0E0         PUSH      A
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   D0E0         POP       A
   \   000026   F0           MOVX      @DPTR,A
    391            ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
   \   000027   E597         MOV       A,0x97
   \   000029   C0E0         PUSH      A
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   D0E0         POP       A
   \   000032   F0           MOVX      @DPTR,A
    392            ((uint8 *) &ticks)[UINT32_NDX3] = 0;
   \   000033   7403         MOV       A,#0x3
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
    393          
    394            /* store value for later */
    395            halSleepTimerStart = ticks;
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   12....       LCALL     ?XLOAD_R0123
   \   000043   90....       MOV       DPTR,#halSleepTimerStart
   \   000046   12....       LCALL     ?XSTORE_R0123
    396          
    397            /* Compute sleep timer compare value.  The ratio of 32 kHz ticks to 320 usec ticks
    398             * is 32768/3125 = 10.48576.  This is nearly 671/64 = 10.484375.
    399             */
    400            ticks += (timeout * 671) / 64;
    401          
    402            /* subtract the processing time spent in function halSleep() */
    403            ticks -= HAL_SLEEP_ADJ_TICKS;
   \   000049   90....       MOV       DPTR,#__Constant_29f
   \   00004C   78..         MOV       R0,#?V4
   \   00004E   12....       LCALL     ?L_MOV_X
   \   000051   78..         MOV       R0,#?V0
   \   000053   79..         MOV       R1,#?V4
   \   000055   12....       LCALL     ?L_MUL
   \   000058   7406         MOV       A,#0x6
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?UL_SHR
   \   00005F   90....       MOV       DPTR,#__Constant_ffffffef
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?L_ADD_X
   \   000067   85..82       MOV       DPL,?XSP + 0
   \   00006A   85..83       MOV       DPH,?XSP + 1
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   12....       LCALL     ?L_ADD_TO_X
    404          
    405            /* set sleep timer compare; ST0 must be written last */
    406            ST2 = ((uint8 *) &ticks)[UINT32_NDX2];
   \   000072   7402         MOV       A,#0x2
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F597         MOV       0x97,A
    407            ST1 = ((uint8 *) &ticks)[UINT32_NDX1];
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F596         MOV       0x96,A
    408            ST0 = ((uint8 *) &ticks)[UINT32_NDX0];
   \   000082   85..82       MOV       DPL,?XSP + 0
   \   000085   85..83       MOV       DPH,?XSP + 1
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F595         MOV       0x95,A
    409          }
   \   00008B   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   00008E                REQUIRE ST0
   \   00008E                REQUIRE ST1
   \   00008E                REQUIRE ST2
    410          
    411          /**************************************************************************************************
    412           * @fn          TimerElapsed
    413           *
    414           * @brief       Determine the number of OSAL timer ticks elapsed during sleep.
    415           *
    416           * input parameters
    417           *
    418           * @param       None.
    419           *
    420           * output parameters
    421           *
    422           * None.
    423           *
    424           * @return      Number of timer ticks elapsed during sleep.
    425           **************************************************************************************************
    426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    427          uint32 TimerElapsed( void )
   \                     TimerElapsed:
    428          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    429            return ( halAccumulatedSleepTime );
   \   000004   90....       MOV       DPTR,#halAccumulatedSleepTime
   \   000007   12....       LCALL     ?XLOAD_R2345
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
    430          }
    431          
    432          /**************************************************************************************************
    433           * @fn          HalTimerElapsed
    434           *
    435           * @brief       Determine the number of OSAL timer ticks elapsed during sleep.  This function
    436           *              relies on OSAL macro TICK_COUNT to be set to 1; then ticks are calculated in
    437           *              units of msec.
    438           *
    439           * input parameters
    440           *
    441           * @param       None.
    442           *
    443           * output parameters
    444           *
    445           * None.
    446           *
    447           * @return      Number of timer ticks elapsed during sleep.
    448           **************************************************************************************************
    449           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    450          uint32 HalTimerElapsed( void )
   \                     HalTimerElapsed:
    451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    452            uint32 ticks;
    453          
    454            /* read the sleep timer; ST0 must be read first */
    455            ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
   \   00000A   E595         MOV       A,0x95
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   F0           MOVX      @DPTR,A
    456            ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
   \   000013   E596         MOV       A,0x96
   \   000015   C0E0         PUSH      A
   \   000017   7401         MOV       A,#0x1
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   D0E0         POP       A
   \   00001E   F0           MOVX      @DPTR,A
    457            ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
   \   00001F   E597         MOV       A,0x97
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   F0           MOVX      @DPTR,A
    458          
    459            /* set bit 24 to handle wraparound */
    460            ((uint8 *) &ticks)[UINT32_NDX3] = 0x01;
   \   00002B   7403         MOV       A,#0x3
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   7401         MOV       A,#0x1
   \   000032   F0           MOVX      @DPTR,A
    461          
    462            /* calculate elapsed time */
    463            ticks -= halSleepTimerStart;
    464          
    465            /* add back the processing time spent in function halSleep() */
    466            ticks += HAL_SLEEP_ADJ_TICKS;
    467          
    468            /* mask off excess if no wraparound */
    469            ticks &= 0x00FFFFFF;
    470          
    471            /* Convert elapsed time in milliseconds with round.  1000/32768 = 125/4096 */
    472            return ( ((ticks * 125) + 4095) / 4096 );
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?L_MOV_X
   \   00003E   90....       MOV       DPTR,#halSleepTimerStart
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?L_SUB_X
   \   000046   90....       MOV       DPTR,#__Constant_11
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?L_ADD_X
   \   00004E   90....       MOV       DPTR,#__Constant_ffffff
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?L_AND_X
   \   000056   90....       MOV       DPTR,#__Constant_7d
   \   000059   78..         MOV       R0,#?V4
   \   00005B   12....       LCALL     ?L_MOV_X
   \   00005E   78..         MOV       R0,#?V0
   \   000060   79..         MOV       R1,#?V4
   \   000062   12....       LCALL     ?L_MUL
   \   000065   90....       MOV       DPTR,#__Constant_fff
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?L_ADD_X
   \   00006D   740C         MOV       A,#0xc
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?UL_SHR
   \   000074   AA..         MOV       R2,?V0
   \   000076   AB..         MOV       R3,?V1
   \   000078   AC..         MOV       R4,?V2
   \   00007A   FD           MOV       R5,A
   \   00007B   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   00007E                REQUIRE ST0
   \   00007E                REQUIRE ST1
   \   00007E                REQUIRE ST2
    473          }
    474          
    475          /**************************************************************************************************
    476           * @fn          halSleepWait
    477           *
    478           * @brief       Perform a blocking wait.
    479           *
    480           * input parameters
    481           *
    482           * @param       duration - Duration of wait in microseconds.
    483           *
    484           * output parameters
    485           *
    486           * None.
    487           *
    488           * @return      None.
    489           **************************************************************************************************
    490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    491          void halSleepWait(uint16 duration)
   \                     halSleepWait:
    492          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8008         SJMP      ??halSleepWait_0
    493            while (duration--)
    494            {
    495              asm("NOP");
   \                     ??halSleepWait_1:
   \   000002   00           NOP
    496              asm("NOP");
   \   000003   00           NOP
    497              asm("NOP");
   \   000004   00           NOP
    498              asm("NOP");
   \   000005   00           NOP
    499              asm("NOP");
   \   000006   00           NOP
    500              asm("NOP");
   \   000007   00           NOP
    501              asm("NOP");
   \   000008   00           NOP
    502              asm("NOP");
   \   000009   00           NOP
    503            }
   \                     ??halSleepWait_0:
   \   00000A   EA           MOV       A,R2
   \   00000B   F8           MOV       R0,A
   \   00000C   EB           MOV       A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   24FF         ADD       A,#-0x1
   \   000011   1A           DEC       R2
   \   000012   E9           MOV       A,R1
   \   000013   34FF         ADDC      A,#-0x1
   \   000015   FB           MOV       R3,A
   \   000016   E8           MOV       A,R0
   \   000017   49           ORL       A,R1
   \   000018   70E8         JNZ       ??halSleepWait_1
    504          }
   \   00001A   02....       LJMP      ?BRET
    505          
    506          /**************************************************************************************************
    507           * @fn          halRestoreSleepLevel
    508           *
    509           * @brief       Restore the deepest timer sleep level.
    510           *
    511           * input parameters
    512           *
    513           * @param       None
    514           *
    515           * output parameters
    516           *
    517           *              None.
    518           *
    519           * @return      None.
    520           **************************************************************************************************
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          void halRestoreSleepLevel( void )
   \                     halRestoreSleepLevel:
    523          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    524            /* Stubs */
    525          }
   \   000000   02....       LJMP      ?BRET
    526          
    527          /**************************************************************************************************
    528           * @fn          halSleepTimerIsr
    529           *
    530           * @brief       Sleep timer ISR.
    531           *
    532           * input parameters
    533           *
    534           * None.
    535           *
    536           * output parameters
    537           *
    538           * None.
    539           *
    540           * @return      None.
    541           **************************************************************************************************
    542           */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    543          HAL_ISR_FUNCTION(halSleepTimerIsr, ST_VECTOR)
   \                     halSleepTimerIsr:
    544          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    545            HAL_SLEEP_TIMER_CLEAR_INT();
   \   000007   C2C7         CLR       0xc0.7
    546            CLEAR_SLEEP_MODE();
    547          
    548            /* CC2530 chip bug workaround */
    549            macMcuTimer2OverflowWorkaround();
   \   000009                ; Setup parameters for call to function macMcuTimer2OverflowWorkaround
   \   000009   12....       LCALL     `??macMcuTimer2OverflowWorkaround::?relay`; Banked call to: macMcuTimer2OverflowWorkaround
    550          
    551          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    552            halSleepInt = TRUE;
    553          #endif
    554          }
   \   00000C   7F01         MOV       R7,#0x1
   \   00000E   02....       LJMP      ?INTERRUPT_LEAVE_XSP
   \   000011                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??halSleepTimerIsr::??INTVEC 43`:
   \   00002B   02....       LJMP       (halSleepTimerIsr)

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f:
   \   000000   1F000000     DD 31

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2d:
   \   000000   2D000000     DD 45

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185197:
   \   000000   97511800     DD 1593751

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffe7ae6a:
   \   000000   6AAEE7FF     DD 4293373546

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185196:
   \   000000   96511800     DD 1593750

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_29f:
   \   000000   9F020000     DD 671

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffef:
   \   000000   EFFFFFFF     DD 4294967279

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_11:
   \   000000   11000000     DD 17

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffff:
   \   000000   FFFFFF00     DD 16777215

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7d:
   \   000000   7D000000     DD 125

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fff:
   \   000000   FF0F0000     DD 4095

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSetSleepMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetSleepMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleepSetTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleepSetTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TimerElapsed::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TimerElapsed

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalTimerElapsed::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalTimerElapsed

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleepWait::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleepWait

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halRestoreSleepLevel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halRestoreSleepLevel
    555          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     40   HalTimerElapsed
      2      0   TimerElapsed
      0      0   halRestoreSleepLevel
      0     20   halSetSleepMode
      2     20   halSleep
        0     20   -> HalKeyEnterSleep
        0     20   -> HalKeyExitSleep
        0     20   -> HalLedEnterSleep
        0     20   -> HalLedExitSleep
        0     20   -> HalTimerElapsed
        0     20   -> MAC_PwrNextTimeout
        0     20   -> MAC_PwrOffReq
        0     20   -> MAC_PwrOnReq
        0     20   -> halAssertHandler
        0     20   -> halSetSleepMode
        0     20   -> halSleepSetTimer
      1     40   halSleepSetTimer
      0     14   halSleepTimerIsr
        0     14   -> macMcuTimer2OverflowWorkaround
      0      0   halSleepWait


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?Subroutine0
     126  HalTimerElapsed
       6  HalTimerElapsed::?relay
       1  IEN2
       1  PCON
       1  SLEEPCMD
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
      17  TimerElapsed
       6  TimerElapsed::?relay
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       4  __Constant_11
       4  __Constant_185196
       4  __Constant_185197
       4  __Constant_1f
       4  __Constant_29f
       4  __Constant_2d
       4  __Constant_64
       4  __Constant_7d
       4  __Constant_ffe7ae6a
       4  __Constant_fff
       4  __Constant_ffffff
       4  __Constant_ffffffef
       4  halAccumulatedSleepTime
       1  halPwrMgtMode
       3  halRestoreSleepLevel
       6  halRestoreSleepLevel::?relay
       7  halSetSleepMode
       6  halSetSleepMode::?relay
     483  halSleep
       6  halSleep::?relay
     142  halSleepSetTimer
       6  halSleepSetTimer::?relay
      17  halSleepTimerIsr
       3  halSleepTimerIsr::??INTVEC 43
       4  halSleepTimerStart
      29  halSleepWait
       6  halSleepWait::?relay

 
 810 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   3 bytes in segment INTVEC
  17 bytes in segment NEAR_CODE
  10 bytes in segment SFR_AN
   7 bytes in segment SLEEP_CODE
  48 bytes in segment XDATA_ROM_C
   9 bytes in segment XDATA_Z
 
  59 bytes of CODE     memory (+  3 bytes shared)
   0 bytes of CONST    memory (+ 48 bytes shared)
   0 bytes of DATA     memory (+ 10 bytes shared)
 817 bytes of HUGECODE memory
   9 bytes of XDATA    memory

Errors: none
Warnings: none
