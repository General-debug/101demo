###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  17:52:32
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\SRC\DemoPrj\Projects\zstack\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWEB50.tmp
#        (D:\SRC\DemoPrj\Projects\zstack\ZMain\TI2530DB\ZMain.c -D ZIGBEEPRO -D
#        HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\ZMain.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\ZMain.r51
#
###############################################################################

D:\SRC\DemoPrj\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2009-04-03 12:59:44 -0700 (Fri, 03 Apr 2009) $
      4            Revision:       $Revision: 19677 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x81
   \   unsigned char volatile __sfr SP
   \                     `SP`:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     49          #include "ZMAC.h"
     50          
     51          #ifndef NONWK
     52            #include "AF.h"
     53          #endif
     54          
     55          /* Hal */
     56          #include "hal_lcd.h"
     57          #include "hal_led.h"
     58          #include "hal_adc.h"
     59          #include "hal_drivers.h"
     60          #include "hal_assert.h"
     61          #include "hal_flash.h"
     62          
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          // Maximun number of Vdd samples checked before go on
     72          #define MAX_VDD_SAMPLES  3
     73          #define ZMAIN_VDD_LIMIT  HAL_ADC_VDD_LIMIT_4
     74          
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          
     79          /*********************************************************************
     80           * GLOBAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          extern bool HalAdcCheckVdd (uint8 limit);
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void zmain_dev_info( void );
    102          static void zmain_ext_addr( void );
    103          static void zmain_ram_init( void );
    104          static void zmain_vdd_check( void );
    105          
    106          #ifdef LCD_SUPPORTED
    107          static void zmain_lcd_init( void );
    108          #endif
    109          
    110          /*********************************************************************
    111           * @fn      main
    112           * @brief   First function called after startup.
    113           * @return  don't care
    114           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          int main( void )
   \                     main:
    116          {
   \   000000                ; Auto size: 17
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?ALLOC_XSTACK8
    117            // Turn off interrupts
    118            osal_int_disable( INTS_ALL );
   \   000005                ; Setup parameters for call to function osal_int_disable
   \   000005   79FF         MOV       R1,#-0x1
   \   000007   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
    119          
    120            // Initialization for board related stuff such as LEDs
    121            HAL_BOARD_INIT();
   \   00000A   53BEFB       ANL       0xbe,#0xfb
   \                     ??main_0:
   \   00000D   E59D         MOV       A,0x9d
   \   00000F   A2E6         MOV       C,0xE0 /* A   */.6
   \   000011   50FA         JNC       ??main_0
   \   000013   00           NOP
   \   000014   78F8         MOV       R0,#-0x8
   \   000016   7901         MOV       R1,#0x1
   \                     ??main_1:
   \   000018   00           NOP
   \   000019   E8           MOV       A,R0
   \   00001A   24FF         ADD       A,#-0x1
   \   00001C   18           DEC       R0
   \   00001D   E9           MOV       A,R1
   \   00001E   34FF         ADDC      A,#-0x1
   \   000020   F9           MOV       R1,A
   \   000021   E8           MOV       A,R0
   \   000022   49           ORL       A,R1
   \   000023   70F3         JNZ       ??main_1
   \   000025   75C680       MOV       0xc6,#-0x80
   \                     ??main_2:
   \   000028   7480         MOV       A,#-0x80
   \   00002A   659E         XRL       A,0x9e
   \   00002C   70FA         JNZ       ??main_2
   \   00002E   43BE04       ORL       0xbe,#0x4
   \   000031   43FD02       ORL       0xfd,#0x2
   \   000034   43FD08       ORL       0xfd,#0x8
   \   000037   43FD20       ORL       0xfd,#0x20
   \   00003A   43FD80       ORL       0xfd,#0x80
   \   00003D   43FE02       ORL       0xfe,#0x2
   \   000040   43FE04       ORL       0xfe,#0x4
   \   000043   438F04       ORL       0x8f,#0x4
    122          
    123            // Make sure supply voltage is high enough to run
    124            zmain_vdd_check();
   \   000046                ; Setup parameters for call to function zmain_vdd_check
   \   000046   12....       LCALL     `??zmain_vdd_check::?relay`; Banked call to: zmain_vdd_check
    125          
    126            // Initialize stack memory
    127            zmain_ram_init();
   \   000049   78..         MOV       R0,#SFB(XSP) & 0xff
   \   00004B   8682         MOV       DPL,@R0
   \   00004D   08           INC       R0
   \   00004E   8683         MOV       DPH,@R0
   \   000050   8003         SJMP      ??main_3
   \                     ??main_4:
   \   000052   74CD         MOV       A,#-0x33
   \   000054   F0           MOVX      @DPTR,A
   \                     ??main_3:
   \   000055   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000058   C3           CLR       C
   \   000059   74..         MOV       A,#SFB(XSTACK) & 0xff
   \   00005B   9582         SUBB      A,DPL
   \   00005D   74..         MOV       A,#(SFB(XSTACK) >> 8) & 0xff
   \   00005F   9583         SUBB      A,DPH
   \   000061   40EF         JC        ??main_4
   \   000063   7582..       MOV       DPL,#(SFE(ISTACK) + 255) & 0xff
   \   000066   7583..       MOV       DPH,#((SFE(ISTACK) - 1) >> 8) & 0xff
   \   000069   8004         SJMP      ??main_5
   \                     ??main_6:
   \   00006B   A882         MOV       R0,DPL
   \   00006D   76CD         MOV       @R0,#-0x33
   \                     ??main_5:
   \   00006F   A881         MOV       R0,0x81+0x0
   \   000071   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000074   E8           MOV       A,R0
   \   000075   C3           CLR       C
   \   000076   9582         SUBB      A,DPL
   \   000078   E4           CLR       A
   \   000079   9583         SUBB      A,DPH
   \   00007B   40EE         JC        ??main_6
    128          
    129            // Initialize board I/O
    130            InitBoard( OB_COLD );
   \   00007D                ; Setup parameters for call to function InitBoard
   \   00007D   7900         MOV       R1,#0x0
   \   00007F   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    131          
    132            // Initialze HAL drivers
    133            HalDriverInit();
   \   000082                ; Setup parameters for call to function HalDriverInit
   \   000082   12....       LCALL     `??HalDriverInit::?relay`; Banked call to: HalDriverInit
    134          
    135            // Initialize NV System
    136            osal_nv_init( NULL );
   \   000085                ; Setup parameters for call to function osal_nv_init
   \   000085   7A00         MOV       R2,#0x0
   \   000087   7B00         MOV       R3,#0x0
   \   000089   12....       LCALL     `??osal_nv_init::?relay`; Banked call to: osal_nv_init
    137          
    138            // Initialize basic NV items
    139            zgInit();
   \   00008C                ; Setup parameters for call to function zgInit
   \   00008C   12....       LCALL     `??zgInit::?relay`; Banked call to: zgInit
    140          
    141            // Initialize the MAC
    142            ZMacInit();
   \   00008F                ; Setup parameters for call to function ZMacInit
   \   00008F   12....       LCALL     `??ZMacInit::?relay`; Banked call to: ZMacInit
    143          
    144            // Determine the extended address
    145            zmain_ext_addr();
   \   000092                ; Setup parameters for call to function zmain_ext_addr
   \   000092   12....       LCALL     `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
    146          
    147          #ifndef NONWK
    148            // Since the AF isn't a task, call it's initialization routine
    149            afInit();
   \   000095                ; Setup parameters for call to function afInit
   \   000095   12....       LCALL     `??afInit::?relay`; Banked call to: afInit
    150          #endif
    151          
    152            // Initialize the operating system
    153            osal_init_system();
   \   000098                ; Setup parameters for call to function osal_init_system
   \   000098   12....       LCALL     `??osal_init_system::?relay`; Banked call to: osal_init_system
    154          
    155            // Allow interrupts
    156            osal_int_enable( INTS_ALL );
   \   00009B                ; Setup parameters for call to function osal_int_enable
   \   00009B   79FF         MOV       R1,#-0x1
   \   00009D   12....       LCALL     `??osal_int_enable::?relay`; Banked call to: osal_int_enable
    157          
    158            // Final board initialization
    159            InitBoard( OB_READY );
   \   0000A0                ; Setup parameters for call to function InitBoard
   \   0000A0   7902         MOV       R1,#0x2
   \   0000A2   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    160          
    161            // Display information about this device
    162            zmain_dev_info();
   \   0000A5   78..         MOV       R0,#(aExtendedAddress + 7) & 0xff
   \   0000A7   79..         MOV       R1,#((aExtendedAddress + 7) >> 8) & 0xff
   \   0000A9   7A00         MOV       R2,#0x0
   \                     ??main_7:
   \   0000AB   8882         MOV       DPL,R0
   \   0000AD   8983         MOV       DPH,R1
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C4           SWAP      A
   \   0000B1   540F         ANL       A,#0xf
   \   0000B3   FC           MOV       R4,A
   \   0000B4   EA           MOV       A,R2
   \   0000B5   FE           MOV       R6,A
   \   0000B6   7401         MOV       A,#0x1
   \   0000B8   2E           ADD       A,R6
   \   0000B9   FA           MOV       R2,A
   \   0000BA   EC           MOV       A,R4
   \   0000BB   C3           CLR       C
   \   0000BC   940A         SUBB      A,#0xa
   \   0000BE   5004         JNC       ??main_8
   \   0000C0   7B30         MOV       R3,#0x30
   \   0000C2   8002         SJMP      ??main_9
   \                     ??main_8:
   \   0000C4   7B37         MOV       R3,#0x37
   \                     ??main_9:
   \   0000C6   EC           MOV       A,R4
   \   0000C7   2B           ADD       A,R3
   \   0000C8   C0E0         PUSH      A
   \   0000CA   85..82       MOV       DPL,?XSP + 0
   \   0000CD   85..83       MOV       DPH,?XSP + 1
   \   0000D0   E582         MOV       A,DPL
   \   0000D2   2E           ADD       A,R6
   \   0000D3   F582         MOV       DPL,A
   \   0000D5   E4           CLR       A
   \   0000D6   3583         ADDC      A,DPH
   \   0000D8   F583         MOV       DPH,A
   \   0000DA   D0E0         POP       A
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   8882         MOV       DPL,R0
   \   0000DF   8983         MOV       DPH,R1
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   540F         ANL       A,#0xf
   \   0000E4   FC           MOV       R4,A
   \   0000E5   EA           MOV       A,R2
   \   0000E6   FF           MOV       R7,A
   \   0000E7   7401         MOV       A,#0x1
   \   0000E9   2A           ADD       A,R2
   \   0000EA   FA           MOV       R2,A
   \   0000EB   EC           MOV       A,R4
   \   0000EC   C3           CLR       C
   \   0000ED   940A         SUBB      A,#0xa
   \   0000EF   5004         JNC       ??main_10
   \   0000F1   7B30         MOV       R3,#0x30
   \   0000F3   8002         SJMP      ??main_11
   \                     ??main_10:
   \   0000F5   7B37         MOV       R3,#0x37
   \                     ??main_11:
   \   0000F7   EC           MOV       A,R4
   \   0000F8   2B           ADD       A,R3
   \   0000F9   C0E0         PUSH      A
   \   0000FB   85..82       MOV       DPL,?XSP + 0
   \   0000FE   85..83       MOV       DPH,?XSP + 1
   \   000101   E582         MOV       A,DPL
   \   000103   2F           ADD       A,R7
   \   000104   F582         MOV       DPL,A
   \   000106   E4           CLR       A
   \   000107   3583         ADDC      A,DPH
   \   000109   F583         MOV       DPH,A
   \   00010B   D0E0         POP       A
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   E8           MOV       A,R0
   \   00010F   24FF         ADD       A,#-0x1
   \   000111   18           DEC       R0
   \   000112   E9           MOV       A,R1
   \   000113   34FF         ADDC      A,#-0x1
   \   000115   F9           MOV       R1,A
   \   000116   EA           MOV       A,R2
   \   000117   C3           CLR       C
   \   000118   9410         SUBB      A,#0x10
   \   00011A   408F         JC        ??main_7
   \   00011C   7410         MOV       A,#0x10
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   E4           CLR       A
   \   000122   F0           MOVX      @DPTR,A
   \   000123                ; Setup parameters for call to function HalLcdWriteString
   \   000123   7901         MOV       R1,#0x1
   \   000125   7A..         MOV       R2,#`?<Constant "IEEE: ">` & 0xff
   \   000127   7B..         MOV       R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
   \   000129   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00012C                ; Setup parameters for call to function HalLcdWriteString
   \   00012C   7902         MOV       R1,#0x2
   \   00012E   AA..         MOV       R2,?XSP + 0
   \   000130   AB..         MOV       R3,?XSP + 1
   \   000132   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    163          
    164            /* Display the device info on the LCD */
    165          #ifdef LCD_SUPPORTED
    166            zmain_lcd_init();
    167          #endif
    168          
    169          #ifdef WDT_IN_PM1
    170            /* If WDT is used, this is a good place to enable it. */
    171            WatchDogEnable( WDTIMX );
    172          #endif
    173          
    174            osal_start_system(); // No Return from here
   \   000135                ; Setup parameters for call to function osal_start_system
   \   000135   12....       LCALL     `??osal_start_system::?relay`; Banked call to: osal_start_system
    175          
    176            // Shouldn't get here
    177            return ( 0 );
   \   000138   7A00         MOV       R2,#0x0
   \   00013A   7B00         MOV       R3,#0x0
   \   00013C   7411         MOV       A,#0x11
   \   00013E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000141   02....       LJMP      ?BRET
   \   000144                REQUIRE SLEEPCMD
   \   000144                REQUIRE SLEEPSTA
   \   000144                REQUIRE CLKCONCMD
   \   000144                REQUIRE CLKCONSTA
   \   000144                REQUIRE P0DIR
   \   000144                REQUIRE P1DIR
   \   000144                REQUIRE P0INP
   \   000144                REQUIRE `SP`
    178          } // main()
    179          
    180          /*********************************************************************
    181           * @fn      zmain_vdd_check
    182           * @brief   Check if the Vdd is OK to run the processor.
    183           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    184           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    185          static void zmain_vdd_check( void )
   \                     zmain_vdd_check:
    186          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    187            uint8 vdd_passed_count = 0;
   \   000005   7E00         MOV       R6,#0x0
    188            bool toggle = 0;
   \   000007   7F00         MOV       R7,#0x0
   \   000009   8002         SJMP      ??zmain_vdd_check_0
    189          
    190            // Repeat getting the sample until number of failures or successes hits MAX
    191            // then based on the count value, determine if the device is ready or not
    192            while ( vdd_passed_count < MAX_VDD_SAMPLES )
    193            {
    194              if ( HalAdcCheckVdd (ZMAIN_VDD_LIMIT) )
    195              {
    196                vdd_passed_count++;    // Keep track # times Vdd passes in a row
    197                MicroWait (10000);     // Wait 10ms to try again
    198              }
    199              else
    200              {
    201                vdd_passed_count = 0;  // Reset passed counter
    202                MicroWait (50000);     // Wait 50ms
    203                MicroWait (50000);     // Wait another 50ms to try again
    204              }
    205          
    206              /* toggle LED1 and LED2 */
    207              if (vdd_passed_count == 0)
    208              {
    209                if ((toggle = !(toggle)))
    210                  HAL_TOGGLE_LED1();
   \                     ??zmain_vdd_check_1:
   \   00000B   C281         CLR       0x80.1
   \                     ??zmain_vdd_check_0:
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   7904         MOV       R1,#0x4
   \   00000F   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV       A,R1
   \   000013   6019         JZ        ??zmain_vdd_check_2
   \   000015   0E           INC       R6
   \   000016                ; Setup parameters for call to function Onboard_wait
   \   000016   7A10         MOV       R2,#0x10
   \   000018   7B27         MOV       R3,#0x27
   \   00001A   12....       LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
   \   00001D   EE           MOV       A,R6
   \   00001E   601E         JZ        ??zmain_vdd_check_3
   \   000020   C3           CLR       C
   \   000021   9403         SUBB      A,#0x3
   \   000023   40E8         JC        ??zmain_vdd_check_0
    211                else
    212                  HAL_TOGGLE_LED2();
    213              }
    214            }
    215          
    216            /* turn off LED1 */
    217            HAL_TURN_OFF_LED1();
   \   000025   C281         CLR       0x80.1
    218            HAL_TURN_OFF_LED2();
   \   000027   C283         CLR       0x80.3
    219          }
   \   000029   7F01         MOV       R7,#0x1
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??zmain_vdd_check_2:
   \   00002E   7E00         MOV       R6,#0x0
   \   000030                ; Setup parameters for call to function Onboard_wait
   \   000030   7A50         MOV       R2,#0x50
   \   000032   7BC3         MOV       R3,#-0x3d
   \   000034   12....       LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
   \   000037                ; Setup parameters for call to function Onboard_wait
   \   000037   7A50         MOV       R2,#0x50
   \   000039   7BC3         MOV       R3,#-0x3d
   \   00003B   12....       LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
   \                     ??zmain_vdd_check_3:
   \   00003E   EF           MOV       A,R7
   \   00003F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000041   B3           CPL       C
   \   000042   E4           CLR       A
   \   000043   33           RLC       A
   \   000044   FF           MOV       R7,A
   \   000045   A2E0         MOV       C,0xE0 /* A   */.0
   \   000047   5008         JNC       ??zmain_vdd_check_4
   \   000049   A281         MOV       C,0x80.1
   \   00004B   40BE         JC        ??zmain_vdd_check_1
   \   00004D   D281         SETB      0x80.1
   \   00004F   80BC         SJMP      ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_4:
   \   000051   A283         MOV       C,0x80.3
   \   000053   5004         JNC       ??zmain_vdd_check_5
   \   000055   C283         CLR       0x80.3
   \   000057   80B4         SJMP      ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_5:
   \   000059   D283         SETB      0x80.3
   \   00005B   80B0         SJMP      ??zmain_vdd_check_0
   \   00005D                REQUIRE _A_P0
    220          
    221          /**************************************************************************************************
    222           * @fn          zmain_ext_addr
    223           *
    224           * @brief       Execute a prioritized search for a valid extended address and write the results
    225           *              into the OSAL NV system for use by the system.
    226           *
    227           * input parameters
    228           *
    229           * None.
    230           *
    231           * output parameters
    232           *
    233           * None.
    234           *
    235           * @return      None.
    236           **************************************************************************************************
    237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    239          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    240            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   7403         MOV       A,#0x3
   \   00000F   12....       LCALL     ?XSTACK_DISP102_8
   \   000012   7408         MOV       A,#0x8
   \   000014   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    241            uint8 writeNV = TRUE;
    242          
    243            // First check whether a non-erased extended address exists in the OSAL NV.
    244            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    245                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    246                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000017   85..82       MOV       DPL,?XSP + 0
   \   00001A   85..83       MOV       DPH,?XSP + 1
   \   00001D   74..         MOV       A,#aExtendedAddress & 0xff
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   74..         MOV       A,#(aExtendedAddress >> 8) & 0xff
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E4           CLR       A
   \   000026   F0           MOVX      @DPTR,A
   \   000027   7403         MOV       A,#0x3
   \   000029   12....       LCALL     ?XSTACK_DISP100_8
   \   00002C   88..         MOV       ?V0,R0
   \   00002E   89..         MOV       ?V1,R1
   \   000030   75..00       MOV       ?V2,#0x0
   \   000033                ; Setup parameters for call to function osal_nv_item_init
   \   000033   E4           CLR       A
   \   000034   F5..         MOV       ?V4,A
   \   000036   F5..         MOV       ?V5,A
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C08         MOV       R4,#0x8
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A01         MOV       R2,#0x1
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   E9           MOV       A,R1
   \   00004E   7043         JNZ       ??zmain_ext_addr_0
   \   000050                ; Setup parameters for call to function osal_nv_read
   \   000050   75....       MOV       ?V4,#aExtendedAddress & 0xff
   \   000053   75....       MOV       ?V5,#(aExtendedAddress >> 8) & 0xff
   \   000056   78..         MOV       R0,#?V4
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75..08       MOV       ?V4,#0x8
   \   00005E   75..00       MOV       ?V5,#0x0
   \   000061   78..         MOV       R0,#?V4
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7C00         MOV       R4,#0x0
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7A01         MOV       R2,#0x1
   \   00006C   7B00         MOV       R3,#0x0
   \   00006E   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076   E9           MOV       A,R1
   \   000077   701A         JNZ       ??zmain_ext_addr_0
   \   000079                ; Setup parameters for call to function osal_memcmp
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007E   7C08         MOV       R4,#0x8
   \   000080   7D00         MOV       R5,#0x0
   \   000082   7403         MOV       A,#0x3
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   E9           MOV       A,R1
   \   00008E   7003         JNZ       $+5
   \   000090   02....       LJMP      ??zmain_ext_addr_1 & 0xFFFF
    247            {
    248              // Attempt to read the extended address from the location on the lock bits page
    249              // where the programming tools know to reserve it.
    250              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000093                ; Setup parameters for call to function HalFlashRead
   \   000093   75..08       MOV       ?V4,#0x8
   \   000096   78..         MOV       R0,#?V4
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   00009D   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   00009F   7AE8         MOV       R2,#-0x18
   \   0000A1   7B07         MOV       R3,#0x7
   \   0000A3   797F         MOV       R1,#0x7f
   \   0000A5   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000A8   7402         MOV       A,#0x2
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
    251          
    252              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AD                ; Setup parameters for call to function osal_memcmp
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B2   7C08         MOV       R4,#0x8
   \   0000B4   7D00         MOV       R5,#0x0
   \   0000B6   7403         MOV       A,#0x3
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C1   E9           MOV       A,R1
   \   0000C2   6035         JZ        ??zmain_ext_addr_2
    253              {
    254                // Attempt to read the extended address from the designated location in the Info Page.
    255                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000C4                ; Setup parameters for call to function osal_memcmp
   \   0000C4   78..         MOV       R0,#?V0
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C9   7C08         MOV       R4,#0x8
   \   0000CB   7D00         MOV       R5,#0x0
   \   0000CD   790C         MOV       R1,#0xc
   \   0000CF   7A78         MOV       R2,#0x78
   \   0000D1   7B00         MOV       R3,#0x0
   \   0000D3   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D6   7403         MOV       A,#0x3
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DB   E9           MOV       A,R1
   \   0000DC   7054         JNZ       ??zmain_ext_addr_3
    256                {
    257                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000DE                ; Setup parameters for call to function osal_memcpy
   \   0000DE   75..0C       MOV       ?V0,#0xc
   \   0000E1   75..78       MOV       ?V1,#0x78
   \   0000E4   78..         MOV       R0,#?V0
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E9   7C08         MOV       R4,#0x8
   \   0000EB   7D00         MOV       R5,#0x0
   \   0000ED   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   0000EF   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   0000F1   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F4   7403         MOV       A,#0x3
   \   0000F6   12....       LCALL     ?DEALLOC_XSTACK8
    258                }
    259                else  // No valid extended address was found.
    260                {
    261                  uint8 idx;
    262                  
    263          #if !defined ( NV_RESTORE )
    264                  writeNV = FALSE;  // Make this a temporary IEEE address
    265          #endif
    266          
    267                  /* Attempt to create a sufficiently random extended address for expediency.
    268                   * Note: this is only valid/legal in a test environment and
    269                   *       must never be used for a commercial product.
    270                   */
    271                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    272                  {
    273                    uint16 randy = osal_rand();
    274                    aExtendedAddress[idx++] = LO_UINT16(randy);
    275                    aExtendedAddress[idx++] = HI_UINT16(randy);
    276                  }
    277                  // Next-to-MSB identifies ZigBee devicetype.
    278          #if defined ZDO_COORDINATOR
    279                  aExtendedAddress[idx++] = 0x10;
    280          #elif defined RTR_NWK
    281                  aExtendedAddress[idx++] = 0x20;
    282          #else
    283                  aExtendedAddress[idx++] = 0x30;
    284          #endif
    285                  // MSB has historical signficance.
    286                  aExtendedAddress[idx] = 0xF8;
    287                }
    288              }
    289          
    290              if ( writeNV )
    291              {
    292                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   0000F9                ; Setup parameters for call to function osal_nv_write
   \   0000F9   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   0000FC   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   0000FF   78..         MOV       R0,#?V0
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000104   75..08       MOV       ?V0,#0x8
   \   000107   75..00       MOV       ?V1,#0x0
   \   00010A   78..         MOV       R0,#?V0
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010F   7C00         MOV       R4,#0x0
   \   000111   7D00         MOV       R5,#0x0
   \   000113   7A01         MOV       R2,#0x1
   \   000115   7B00         MOV       R3,#0x0
   \   000117   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00011A   7404         MOV       A,#0x4
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
    293              }
    294            }
    295          
    296            // Set the MAC PIB extended address according to results from above.
    297            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   00011F                ; Setup parameters for call to function ZMacSetReq
   \   00011F   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000121   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000123   79E2         MOV       R1,#-0x1e
   \   000125   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    298          }
   \   000128   740B         MOV       A,#0xb
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012D   7F06         MOV       R7,#0x6
   \   00012F   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000132   7E00         MOV       R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   000134                ; Setup parameters for call to function osal_rand
   \   000134   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000137   8A..         MOV       ?V0,R2
   \   000139   EE           MOV       A,R6
   \   00013A   FA           MOV       R2,A
   \   00013B   74..         MOV       A,#aExtendedAddress & 0xff
   \   00013D   2A           ADD       A,R2
   \   00013E   F582         MOV       DPL,A
   \   000140   E4           CLR       A
   \   000141   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000143   F583         MOV       DPH,A
   \   000145   E5..         MOV       A,?V0
   \   000147   F0           MOVX      @DPTR,A
   \   000148   0E           INC       R6
   \   000149   EE           MOV       A,R6
   \   00014A   F8           MOV       R0,A
   \   00014B   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00014E   EB           MOV       A,R3
   \   00014F   F0           MOVX      @DPTR,A
   \   000150   0E           INC       R6
   \   000151   EE           MOV       A,R6
   \   000152   C3           CLR       C
   \   000153   9406         SUBB      A,#0x6
   \   000155   40DD         JC        ??zmain_ext_addr_4
   \   000157   08           INC       R0
   \   000158   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00015B   7410         MOV       A,#0x10
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E   08           INC       R0
   \   00015F   74..         MOV       A,#aExtendedAddress & 0xff
   \   000161   28           ADD       A,R0
   \   000162   F582         MOV       DPL,A
   \   000164   E4           CLR       A
   \   000165   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000167   F583         MOV       DPH,A
   \   000169   74F8         MOV       A,#-0x8
   \   00016B   F0           MOVX      @DPTR,A
   \   00016C   80B1         SJMP      ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   74..         MOV       A,#aExtendedAddress & 0xff
   \   000002   2E           ADD       A,R6
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00000B   7403         MOV       A,#0x3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E582         MOV       A,DPL
   \   000002   24FF         ADD       A,#-0x1
   \   000004   F582         MOV       DPL,A
   \   000006   E583         MOV       A,DPH
   \   000008   34FF         ADDC      A,#-0x1
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_vdd_check::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_vdd_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_ext_addr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  
    299          
    300          /**************************************************************************************************
    301           * @fn          zmain_dev_info
    302           *
    303           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    304           *
    305           * input parameters
    306           *
    307           * None.
    308           *
    309           * output parameters
    310           *
    311           * None.
    312           *
    313           * @return      None.
    314           **************************************************************************************************
    315           */
    316          static void zmain_dev_info(void)
    317          {
    318          #ifdef LCD_SUPPORTED
    319            uint8 i;
    320            uint8 *xad;
    321            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    322          
    323            // Display the extended address.
    324            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    325          
    326            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    327            {
    328              uint8 ch;
    329              ch = (*xad >> 4) & 0x0F;
    330              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    331              ch = *xad & 0x0F;
    332              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    333            }
    334            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    335            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    336            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    337          #endif
    338          }
    339          
    340          /*********************************************************************
    341           * @fn      zmain_ram_init
    342           * @brief   Initialize ram for stack "high-water-mark" observations.
    343           * @return  none
    344           *********************************************************************/
    345          static void zmain_ram_init( void )
    346          {
    347            uint8 *end;
    348            uint8 *ptr;
    349          
    350            // Initialize the call (parameter) stack
    351            end = (uint8*)CSTK_BEG;  // Lower end
    352            ptr = (uint8*)(*( __idata uint16*)(CSTK_PTR));  // Upper end
    353            while ( --ptr > end )
    354              *ptr = STACK_INIT_VALUE;
    355          
    356            // Initialize the return (address) stack
    357            ptr = (uint8*)RSTK_END - 1;  // Upper end
    358            while ( --ptr > (uint8*)SP )
    359              *(__idata uint8*)ptr = STACK_INIT_VALUE;
    360          }
    361          
    362          #ifdef LCD_SUPPORTED
    363          /*********************************************************************
    364           * @fn      zmain_lcd_init
    365           * @brief   Initialize LCD at start up.
    366           * @return  none
    367           *********************************************************************/
    368          static void zmain_lcd_init ( void )
    369          {
    370          #ifdef SERIAL_DEBUG_SUPPORTED
    371            {
    372              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    373          
    374          #if defined( MT_MAC_FUNC )
    375          #if defined( ZDO_COORDINATOR )
    376                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    377          #else
    378                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    379          #endif // ZDO
    380          #elif defined( MT_NWK_FUNC )
    381          #if defined( ZDO_COORDINATOR )
    382                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    383          #else
    384                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    385          #endif // ZDO
    386          #endif // MT_FUNC
    387            }
    388          #endif // SERIAL_DEBUG_SUPPORTED
    389          }
    390          #endif
    391          
    392          /*********************************************************************
    393          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     17   main
        0     17   -> HalDriverInit
        0     17   -> HalLcdWriteString
        0     17   -> InitBoard
        0     17   -> ZMacInit
        0     17   -> afInit
        0     17   -> osal_init_system
        0     17   -> osal_int_disable
        0     17   -> osal_int_enable
        0     17   -> osal_nv_init
        0     17   -> osal_start_system
        0     17   -> zgInit
        0     17   -> zmain_ext_addr
        0     17   -> zmain_vdd_check
      1     46   zmain_ext_addr
        0     27   -> HalFlashRead
        0     25   -> ZMacSetReq
        0     28   -> osal_memcmp
        0     28   -> osal_memcpy
        0     27   -> osal_nv_item_init
        0     29   -> osal_nv_read
        0     29   -> osal_nv_write
        0     25   -> osal_rand
      0     26   zmain_vdd_check
        0      9   -> HalAdcCheckVdd
        0      9   -> Onboard_wait


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "IEEE: ">
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      14  ?Subroutine0
      13  ?Subroutine1
      11  ?Subroutine2
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0DIR
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  SP
       1  _A_P0
     324  main
       6  main::?relay
     366  zmain_ext_addr
       6  zmain_ext_addr::?relay
      93  zmain_vdd_check
       6  zmain_vdd_check::?relay

 
 821 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
  15 bytes in segment XDATA_ROM_C
 
  18 bytes of CODE     memory
  15 bytes of CONST    memory
   0 bytes of DATA     memory (+ 9 bytes shared)
 821 bytes of HUGECODE memory

Errors: none
Warnings: none
