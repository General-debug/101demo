###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  17:52:32
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\SRC\DemoPrj\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWE3BC.tmp
#        (D:\SRC\DemoPrj\Components\stack\zdo\ZDProfile.c -D ZIGBEEPRO -D
#        HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\ZDProfile.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\ZDProfile.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          /*********************************************************************
    113           * TYPEDEFS
    114           */
    115          typedef struct
    116          {
    117            void *next;
    118            uint8 taskID;
    119            uint16 clusterID;
    120          } ZDO_MsgCB_t;
    121          
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          extern endPointDesc_t ZDApp_epDesc;
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    144          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    145          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * ZDO Message Processing table
    159           */
    160          
    161          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    162          
    163          typedef struct
    164          {
    165            uint16                clusterID;
    166            pfnZDPMsgProcessor    pFn;
    167          } zdpMsgProcItem_t;
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   1300         DW 19
   \   000006   ....         DW `??ZDO_ProcessDeviceAnnce::?relay`
   \   000008   0100         DW 1
   \   00000A   ....         DW `??zdpProcessAddrReq::?relay`
   \   00000C   0200         DW 2
   \   00000E   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000010   0300         DW 3
   \   000012   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000014   0400         DW 4
   \   000016   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000018   0500         DW 5
   \   00001A   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   00001C   0600         DW 6
   \   00001E   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000020   FFFF         DW 65535
   \   000022   0000         DW 0H
    170          {
    171          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    172            // These aren't processed by sleeping end devices.
    173            { NWK_addr_req,           zdpProcessAddrReq },
    174            { Device_annce,           ZDO_ProcessDeviceAnnce },
    175          #endif  
    176            { IEEE_addr_req,          zdpProcessAddrReq },
    177            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    178            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    179            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    180            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    181            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    182          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    183            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    184          #endif
    185          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    186            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    187          #endif
    188          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    189            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    192            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    198            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    202          #endif
    203          #if defined ( ZDO_USERDESC_RESPONSE )
    204            { User_Desc_req,          ZDO_ProcessUserDescReq },
    205          #endif
    206          #if defined ( ZDO_USERDESCSET_RESPONSE )
    207            { User_Desc_set,          ZDO_ProcessUserDescSet },
    208          #endif
    209          #if defined ( ZDO_SERVERDISC_RESPONSE )
    210            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    211          #endif
    212            {0xFFFF, NULL} // Last
    213          };
    214          
    215          /*********************************************************************
    216           * @fn          fillAndSend
    217           *
    218           * @brief       Combined to reduce space
    219           *
    220           * @param
    221           * @param
    222           *
    223           * @return      afStatus_t
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    226          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   E9           MOV       A,R1
   \   000013   FE           MOV       R6,A
    227            afAddrType_t afAddr;
    228            
    229            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV       R4,#0xc
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    230            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV       A,#0x9
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E4           CLR       A
   \   000027   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   C0E0         PUSH      A
   \   00002E   7408         MOV       A,#0x8
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   D0E0         POP       A
   \   000035   F0           MOVX      @DPTR,A
   \   000036   85..82       MOV       DPL,?V0
   \   000039   85..83       MOV       DPH,?V1
   \   00003C   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00003F   12....       LCALL     ??Subroutine140_0 & 0xFFFF
    231          
    232            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_291:
   \   000042   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000045   E0           MOVX      A,@DPTR
   \   000046   24FF         ADD       A,#-0x1
   \   000048   F5..         MOV       ?V0,A
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   34FF         ADDC      A,#-0x1
   \   00004E   F5..         MOV       ?V1,A
   \   000050   85..82       MOV       DPL,?V2
   \   000053   85..83       MOV       DPH,?V3
   \   000056   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000059   F0           MOVX      @DPTR,A
    233          
    234            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    235                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    236                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   00005A                ; Setup parameters for call to function AF_DataRequest
   \   00005A   75..1E       MOV       ?V4,#0x1e
   \   00005D   78..         MOV       R0,#?V4
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000062   78..         MOV       R0,#?V2
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   EE           MOV       A,R6
   \   00006D   2401         ADD       A,#0x1
   \   00006F   F5..         MOV       ?V0,A
   \   000071   E4           CLR       A
   \   000072   3400         ADDC      A,#0x0
   \   000074   F5..         MOV       ?V1,A
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   7420         MOV       A,#0x20
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000083   90....       MOV       DPTR,#ZDP_TxOptions
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F9           MOV       R1,A
   \   000088   7C..         MOV       R4,#ZDApp_epDesc & 0xff
   \   00008A   7D..         MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00008C   7409         MOV       A,#0x9
   \   00008E   12....       LCALL     ?XSTACK_DISP101_8
   \   000091   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000094   7409         MOV       A,#0x9
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   \   000099   740C         MOV       A,#0xc
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009E   7F05         MOV       R7,#0x5
   \   0000A0   02....       LJMP      ?BANKED_LEAVE_XDATA
    237          
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    239          
    240          /*********************************************************************
    241           * @fn          ZDP_SendData
    242           *
    243           * @brief       This builds and send a request message that has
    244           *              NWKAddrOfInterest as its only parameter.
    245           *
    246           * @param       dstAddr - destination address
    247           * @param       cmd - clusterID
    248           * @param       dataLen - number of bytes of data
    249           * @param       data - pointer to the data
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    255                                  byte len, uint8 *buf, byte SecurityEnable )
    256          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    257            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   12....       LCALL     ?Subroutine38 & 0xFFFF
    258            byte cnt = len;
   \                     ??CrossCallReturnLabel_168:
   \   00000A   AE..         MOV       R6,?V0
   \   00000C   740E         MOV       A,#0xe
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000014   801F         SJMP      ??ZDP_SendData_0
    259          
    260            while ( cnt-- )
    261            {
    262              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   85..82       MOV       DPL,?V2
   \   00001E   85..83       MOV       DPH,?V3
   \   000021   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    263            }
   \                     ??CrossCallReturnLabel_173:
   \   000024   A882         MOV       R0,DPL
   \   000026   A983         MOV       R1,DPH
   \   000028   85..82       MOV       DPL,?V2
   \   00002B   85..83       MOV       DPH,?V3
   \   00002E   A3           INC       DPTR
   \   00002F   8582..       MOV       ?V2,DPL
   \   000032   8583..       MOV       ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000035   EE           MOV       A,R6
   \   000036   FF           MOV       R7,A
   \   000037   74FF         MOV       A,#-0x1
   \   000039   2F           ADD       A,R7
   \   00003A   FE           MOV       R6,A
   \   00003B   04           INC       A
   \   00003C   70D8         JNZ       ??ZDP_SendData_1
    264          
    265            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
    266                         (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
   \   00003E   7410         MOV       A,#0x10
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   E0           MOVX      A,@DPTR
   \   000044   90....       MOV       DPTR,#ZDP_TxOptions
   \   000047   6004         JZ        ??ZDP_SendData_2
   \   000049   745E         MOV       A,#0x5e
   \   00004B   8002         SJMP      ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004D   741E         MOV       A,#0x1e
   \                     ??ZDP_SendData_3:
   \   00004F   F0           MOVX      @DPTR,A
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   740C         MOV       A,#0xc
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000058   A9..         MOV       R1,?V0
   \   00005A   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   E9           MOV       A,R1
   \   000061   F9           MOV       R1,A
   \   000062   90....       MOV       DPTR,#ZDP_TxOptions
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   02....       LJMP      ??Subroutine131_0 & 0xFFFF
    267          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine106_0
   \   000003                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000003   22           RET
    268          
    269          /*********************************************************************
    270           * @fn          ZDP_NWKAddrOfInterestReq
    271           *
    272           * @brief       This builds and send a request message that has
    273           *              NWKAddrOfInterest as its only parameter.
    274           *
    275           * @param       dstAddr - destination address
    276           * @param       nwkAddr - 16 bit address
    277           * @param       SecurityEnable - Security Options
    278           *
    279           * @return      afStatus_t
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    282                                               byte cmd, byte SecurityEnable )
    283          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    284            (void)SecurityEnable;  // Intentionally unreferenced parameter
    285            
    286            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine16 & 0xFFFF
    287            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_15:
   \   000008   F0           MOVX      @DPTR,A
    288          
    289            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   000009                ; Setup parameters for call to function fillAndSend
   \   000009   E9           MOV       A,R1
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   02....       LJMP      ?Subroutine1 & 0xFFFF
    290          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV       ?V1,#0x0
   \   000003   78..         MOV       R0,#?V0
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV       R1,#0x2
   \   00000A                REQUIRE ??Subroutine108_0
   \   00000A                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine109_0
   \   000008                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003                REQUIRE ??Subroutine110_0
   \   000003                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000006   EC           MOV       A,R4
   \   000007   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00000A   ED           MOV       A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    291          
    292          /*********************************************************************
    293           * Address Requests
    294           */
    295          
    296          /*********************************************************************
    297           * @fn          ZDP_NwkAddrReq
    298           *
    299           * @brief       This builds and send a NWK_addr_req message.  This
    300           *              function sends a broadcast message looking for a 16
    301           *              bit address with a 64 bit address as bait.
    302           *
    303           * @param       IEEEAddress - looking for this device
    304           * @param       SecurityEnable - Security Options
    305           *
    306           * @return      afStatus_t
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    309                                     byte StartIndex, byte SecurityEnable )
    310          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V1,R1
   \   000010   8C..         MOV       ?V0,R4
    311            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL     ?Subroutine38 & 0xFFFF
    312            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    313            zAddrType_t dstAddr;
    314          
    315            (void)SecurityEnable;  // Intentionally unreferenced parameter
    316            
    317            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_169:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EA           MOV       A,R2
   \   000016   FC           MOV       R4,A
   \   000017   EB           MOV       A,R3
   \   000018   FD           MOV       R5,A
   \   000019   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV       A,R1
   \   000021   7012         JNZ       ??ZDP_NwkAddrReq_0
    318            {
    319              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV       A,#0x8
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   740F         MOV       A,#0xf
   \   00002A   12....       LCALL     ?Subroutine23 & 0xFFFF
    320              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    321            }
   \                     ??CrossCallReturnLabel_26:
   \   00002D   74FD         MOV       A,#-0x3
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   74FF         MOV       A,#-0x1
   \   000033   8012         SJMP      ??ZDP_NwkAddrReq_1
    322            else
    323            {
    324              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000035   7408         MOV       A,#0x8
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   7402         MOV       A,#0x2
   \   00003C   F0           MOVX      @DPTR,A
    325              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   00003D   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000040   12....       LCALL     ?Subroutine51 & 0xFFFF
    326            }
   \                     ??CrossCallReturnLabel_86:
   \   000043   E8           MOV       A,R0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E9           MOV       A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   000047   F0           MOVX      @DPTR,A
    327          
    328            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000048                ; Setup parameters for call to function sAddrExtCpy
   \   000048   EE           MOV       A,R6
   \   000049   FC           MOV       R4,A
   \   00004A   EF           MOV       A,R7
   \   00004B   FD           MOV       R5,A
   \   00004C   AA..         MOV       R2,?V2
   \   00004E   AB..         MOV       R3,?V3
   \   000050   12....       LCALL     ?Subroutine75 & 0xFFFF
    329          
    330            *pBuf++ = ReqType;
    331            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_124:
   \   000053   A3           INC       DPTR
   \   000054   E5..         MOV       A,?V0
   \   000056   F0           MOVX      @DPTR,A
    332          
    333            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000057                ; Setup parameters for call to function fillAndSend
   \   000057   E4           CLR       A
   \   000058   F5..         MOV       ?V2,A
   \   00005A   F5..         MOV       ?V3,A
   \   00005C   78..         MOV       R0,#?V2
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   790A         MOV       R1,#0xa
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP102_8
   \   000068   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   7409         MOV       A,#0x9
   \   000070   02....       LJMP      ??Subroutine130_0 & 0xFFFF
    334          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   E5..         MOV       A,?V1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine131_0
   \   000003                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine136_0
   \   000004                ; // Fall through to label ??Subroutine136_0
    335          
    336          /*********************************************************************
    337           * @fn          ZDP_IEEEAddrReq
    338           *
    339           * @brief       This builds and send a IEEE_addr_req message.  This
    340           *              function sends a unicast message looking for a 64
    341           *              bit IEEE address with a 16 bit address as bait.
    342           *
    343           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    344           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    345           * @param       SecurityEnable - Security Options
    346           *
    347           * @return      afStatus_t
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    350                                      byte StartIndex, byte SecurityEnable )
    351          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
    352            uint8 *pBuf = ZDP_TmpBuf;
   \   00000C   12....       LCALL     ??Subroutine141_0 & 0xFFFF
    353            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    354            zAddrType_t dstAddr;
    355          
    356            (void)SecurityEnable;  // Intentionally unreferenced parameter
    357            
    358            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_312:
   \   00000F   7408         MOV       A,#0x8
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   7402         MOV       A,#0x2
   \   000016   12....       LCALL     ?Subroutine23 & 0xFFFF
    359            dstAddr.addr.shortAddr = shortAddr;
   \                     ??CrossCallReturnLabel_27:
   \   000019   12....       LCALL     ?Subroutine31 & 0xFFFF
    360          
    361            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_41:
   \   00001C   EA           MOV       A,R2
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   F0           MOVX      @DPTR,A
    362            *pBuf++ = HI_UINT16( shortAddr );
   \   000022   EB           MOV       A,R3
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    363          
    364            *pBuf++ = ReqType;
   \   000025   EF           MOV       A,R7
   \   000026   8882         MOV       DPL,R0
   \   000028   8983         MOV       DPH,R1
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   F0           MOVX      @DPTR,A
    365            *pBuf++ = StartIndex;
   \   00002D   EC           MOV       A,R4
   \   00002E   8882         MOV       DPL,R0
   \   000030   8983         MOV       DPH,R1
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   F0           MOVX      @DPTR,A
    366          
    367            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000036                ; Setup parameters for call to function fillAndSend
   \   000036   75..01       MOV       ?V0,#0x1
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   7904         MOV       R1,#0x4
   \   000043                REQUIRE ?Subroutine5
   \   000043                ; // Fall through to label ?Subroutine5
    368          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?XSTACK_DISP102_8
   \   000005   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000008   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000B                REQUIRE ??Subroutine107_0
   \   00000B                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   7409         MOV       A,#0x9
   \   000002   80..         SJMP      ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine142_0
   \   000003                ; // Fall through to label ??Subroutine142_0
    369          
    370          /*********************************************************************
    371           * @fn          ZDP_MatchDescReq
    372           *
    373           * @brief       This builds and send a Match_Desc_req message.  This
    374           *              function sends a broadcast or unicast message
    375           *              requesting the list of endpoint/interfaces that
    376           *              match profile ID and cluster IDs.
    377           *
    378           * @param       dstAddr - destination address
    379           * @param       ProfileID - Profile ID
    380           * @param       NumInClusters - number of input clusters
    381           * @param       InClusterList - input cluster ID list
    382           * @param       NumOutClusters - number of output clusters
    383           * @param       OutClusterList - output cluster ID list
    384           * @param       SecurityEnable - Security Options
    385           *
    386           * @return      afStatus_t
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    389                                          uint16 ProfileID,
    390                                          byte NumInClusters, cId_t *InClusterList,
    391                                          byte NumOutClusters, cId_t *OutClusterList,
    392                                          byte SecurityEnable )
    393          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   12....       LCALL     ?Subroutine65 & 0xFFFF
    394            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_302:
   \   00000E   7414         MOV       A,#0x14
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FC           MOV       R4,A
    395            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    396            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    397          
    398            (void)SecurityEnable;  // Intentionally unreferenced parameter
    399            
    400            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000015   EE           MOV       A,R6
   \   000016   2C           ADD       A,R4
   \   000017   C3           CLR       C
   \   000018   33           RLC       A
   \   000019   2406         ADD       A,#0x6
   \   00001B   FB           MOV       R3,A
    401          
    402            if ( len >= ZDP_BUF_SZ-1 )
   \   00001C   C3           CLR       C
   \   00001D   944F         SUBB      A,#0x4f
   \   00001F   4005         JC        ??ZDP_MatchDescReq_0
    403            {
    404              return afStatus_MEM_FAIL;
   \   000021   7910         MOV       R1,#0x10
   \   000023   02....       LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
    405            }
    406          
    407            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_0:
   \   000026   8882         MOV       DPL,R0
   \   000028   8983         MOV       DPH,R1
   \   00002A   E5..         MOV       A,?V0
   \   00002C   F0           MOVX      @DPTR,A
    408            *pBuf++ = HI_UINT16( nwkAddr );
   \   00002D   ED           MOV       A,R5
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   7410         MOV       A,#0x10
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ??Subroutine125_0 & 0xFFFF
    409          
    410            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_226:
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E5..         MOV       A,?V0
   \   000040   F0           MOVX      @DPTR,A
    411            *pBuf++ = HI_UINT16( ProfileID );
   \   000041   E5..         MOV       A,?V1
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
    412          
    413            *pBuf++ = NumInClusters; // Input cluster list
   \   00004B   EE           MOV       A,R6
   \   00004C   8882         MOV       DPL,R0
   \   00004E   8983         MOV       DPH,R1
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   F0           MOVX      @DPTR,A
   \   000055   E8           MOV       A,R0
   \   000056   2405         ADD       A,#0x5
   \   000058   F8           MOV       R0,A
   \   000059   5001         JNC       ??ZDP_MatchDescReq_2
   \   00005B   09           INC       R1
    414            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_2:
   \   00005C   EE           MOV       A,R6
   \   00005D   6016         JZ        ??ZDP_MatchDescReq_3
    415            {
    416              for (i=0; i<NumInClusters; ++i)  {
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7412         MOV       A,#0x12
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ??Subroutine125_0 & 0xFFFF
    417                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_227:
   \   000069   12....       LCALL     ?Subroutine9 & 0xFFFF
    418                *pBuf++ = HI_UINT16( InClusterList[i] );
    419              }
   \                     ??CrossCallReturnLabel_0:
   \   00006C   5001         JNC       ??ZDP_MatchDescReq_4
   \   00006E   09           INC       R1
   \                     ??ZDP_MatchDescReq_4:
   \   00006F   0A           INC       R2
   \   000070   EA           MOV       A,R2
   \   000071   C3           CLR       C
   \   000072   9E           SUBB      A,R6
   \   000073   40F4         JC        ??CrossCallReturnLabel_227
    420            }
    421          
    422            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_3:
   \   000075   EC           MOV       A,R4
   \   000076   8882         MOV       DPL,R0
   \   000078   8983         MOV       DPH,R1
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   A3           INC       DPTR
   \   00007C   A882         MOV       R0,DPL
   \   00007E   A983         MOV       R1,DPH
    423            if ( NumOutClusters )
   \   000080   6016         JZ        ??ZDP_MatchDescReq_5
    424            {
    425              for (i=0; i<NumOutClusters; ++i)  {
   \   000082   7A00         MOV       R2,#0x0
   \   000084   7415         MOV       A,#0x15
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ??Subroutine125_0 & 0xFFFF
    426                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_228:
   \   00008C   12....       LCALL     ?Subroutine9 & 0xFFFF
    427                *pBuf++ = HI_UINT16( OutClusterList[i] );
    428              }
   \                     ??CrossCallReturnLabel_1:
   \   00008F   5001         JNC       ??ZDP_MatchDescReq_6
   \   000091   09           INC       R1
   \                     ??ZDP_MatchDescReq_6:
   \   000092   0A           INC       R2
   \   000093   EA           MOV       A,R2
   \   000094   C3           CLR       C
   \   000095   9C           SUBB      A,R4
   \   000096   40F4         JC        ??CrossCallReturnLabel_228
    429            }
    430          
    431            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_5:
   \   000098                ; Setup parameters for call to function fillAndSend
   \   000098   75..06       MOV       ?V0,#0x6
   \   00009B   75..00       MOV       ?V1,#0x0
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   EB           MOV       A,R3
   \   0000A4   F9           MOV       R1,A
   \   0000A5   AC..         MOV       R4,?V6
   \   0000A7   AD..         MOV       R5,?V7
   \   0000A9   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   0000AC   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000AF   02....       LJMP      ??Subroutine128_0 & 0xFFFF
    432          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV       A,R2
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   F5..         MOV       ?V2,A
   \   000005   E4           CLR       A
   \   000006   33           RLC       A
   \   000007   F5..         MOV       ?V3,A
   \   000009   E5..         MOV       A,?V0
   \   00000B   25..         ADD       A,?V2
   \   00000D   F5..         MOV       ?V4,A
   \   00000F   E5..         MOV       A,?V1
   \   000011   35..         ADDC      A,?V3
   \   000013   F5..         MOV       ?V5,A
   \   000015   85..82       MOV       DPL,?V4
   \   000018   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   00001B   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00001E   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000021   A3           INC       DPTR
   \   000022   F0           MOVX      @DPTR,A
   \   000023   E8           MOV       A,R0
   \   000024   2402         ADD       A,#0x2
   \   000026   F8           MOV       R0,A
   \   000027   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine138_0
   \   000002                ; // Fall through to label ??Subroutine138_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002                REQUIRE ??Subroutine141_0
   \   000002                ; // Fall through to label ??Subroutine141_0
    433          
    434          /*********************************************************************
    435           * @fn          ZDP_SimpleDescReq
    436           *
    437           * @brief       This builds and send a NWK_Simple_Desc_req
    438           *              message.  This function sends unicast message to the
    439           *              destination device.
    440           *
    441           * @param       dstAddr - destination address
    442           * @param       nwkAddr - 16 bit address
    443           * @param       epIntf - endpoint/interface
    444           * @param       SecurityEnable - Security Options
    445           *
    446           * @return      afStatus_t
    447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    449                                              byte endPoint, byte SecurityEnable )
    450          
    451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    452            (void)SecurityEnable;  // Intentionally unreferenced parameter
    453            
    454            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine16 & 0xFFFF
    455            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_16:
   \   000008   12....       LCALL     ?Subroutine12 & 0xFFFF
    456            ZDP_TmpBuf[2] = endPoint;
    457          
    458            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_6:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV       ?V0,#0x4
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV       R1,#0x3
   \   000018   02....       LJMP      ??Subroutine108_0 & 0xFFFF
    459          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   A3           INC       DPTR
   \   000004   E9           MOV       A,R1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET
    460          
    461          /*********************************************************************
    462           * @fn          ZDP_UserDescSet
    463           *
    464           * @brief       This builds and send a User_Desc_set message to set
    465           *              the user descriptor.  This function sends unicast
    466           *              message to the destination device.
    467           *
    468           * @param       dstAddr - destination address
    469           * @param       nwkAddr - 16 bit address
    470           * @param       UserDescriptor - user descriptor
    471           * @param       SecurityEnable - Security Options
    472           *
    473           * @return      afStatus_t
    474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    475          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    476                                    UserDescriptorFormat_t *UserDescriptor,
    477                                    byte SecurityEnable )
    478          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
    479            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00000C   740E         MOV       A,#0xe
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine37 & 0xFFFF
    480            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    481                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_57:
   \   000014   FE           MOV       R6,A
   \   000015   C3           CLR       C
   \   000016   9410         SUBB      A,#0x10
   \   000018   5004         JNC       ??ZDP_UserDescSet_0
   \   00001A   EE           MOV       A,R6
   \   00001B   FF           MOV       R7,A
   \   00001C   8002         SJMP      ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001E   7F10         MOV       R7,#0x10
    482            byte addrLen = 2;
    483          
    484            (void)SecurityEnable;  // Intentionally unreferenced parameter
    485            
    486            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000020   EC           MOV       A,R4
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   F0           MOVX      @DPTR,A
    487            *pBuf++ = HI_UINT16( nwkAddr );
   \   000026   ED           MOV       A,R5
   \   000027   A3           INC       DPTR
   \   000028   F0           MOVX      @DPTR,A
    488          
    489            *pBuf++ = len;
   \   000029   EF           MOV       A,R7
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   12....       LCALL     ??Subroutine112_0 & 0xFFFF
    490            addrLen = 3;
    491          
    492            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_172:
   \   000031   AC82         MOV       R4,DPL
   \   000033   AD83         MOV       R5,DPH
   \   000035   8C..         MOV       ?V0,R4
   \   000037   8D..         MOV       ?V1,R5
   \   000039   75..00       MOV       ?V2,#0x0
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000041   EF           MOV       A,R7
   \   000042   FC           MOV       R4,A
   \   000043   7D00         MOV       R5,#0x0
   \   000045   EA           MOV       A,R2
   \   000046   2403         ADD       A,#0x3
   \   000048   FA           MOV       R2,A
   \   000049   5001         JNC       ??ZDP_UserDescSet_2
   \   00004B   0B           INC       R3
   \                     ??ZDP_UserDescSet_2:
   \   00004C   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
    493            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000052                ; Setup parameters for call to function osal_memset
   \   000052   EF           MOV       A,R7
   \   000053   F8           MOV       R0,A
   \   000054   7410         MOV       A,#0x10
   \   000056   C3           CLR       C
   \   000057   98           SUBB      A,R0
   \   000058   FC           MOV       R4,A
   \   000059   95E0         SUBB      A,0xE0 /* A   */
   \   00005B   FD           MOV       R5,A
   \   00005C   7920         MOV       R1,#0x20
   \   00005E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    494          
    495            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000061                ; Setup parameters for call to function fillAndSend
   \   000061   75..14       MOV       ?V0,#0x14
   \   000064   75..00       MOV       ?V1,#0x0
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   7913         MOV       R1,#0x13
   \   00006E                REQUIRE ?Subroutine3
   \   00006E                ; // Fall through to label ?Subroutine3
    496          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AC..         MOV       R4,?V4
   \   000002   AD..         MOV       R5,?V5
   \   000004   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000007   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000A                REQUIRE ??Subroutine111_0
   \   00000A                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine113_0
   \   000002                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine119_0
   \   000003                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    497          
    498          /*********************************************************************
    499           * @fn          ZDP_ServerDiscReq
    500           *
    501           * @brief       Build and send a Server_Discovery_req request message.
    502           *
    503           * @param       serverMask - 16-bit bit-mask of server services being sought.
    504           * @param       SecurityEnable - Security Options
    505           *
    506           * @return      afStatus_t
    507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    508          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    509          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine65 & 0xFFFF
    510            uint8 *pBuf = ZDP_TmpBuf;
    511            zAddrType_t dstAddr;
    512          
    513            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_303:
   \   00000D   7408         MOV       A,#0x8
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine17 & 0xFFFF
    514            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    515          
    516            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_17:
   \   000015   EA           MOV       A,R2
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   F0           MOVX      @DPTR,A
    517            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV       A,R3
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    518          
    519            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    520                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV       A,R6
   \   00001F   90....       MOV       DPTR,#ZDP_TxOptions
   \   000022   6004         JZ        ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV       A,#0x40
   \   000026   8001         SJMP      ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR       A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX      @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV       ?V0,#0x15
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV       R1,#0x2
   \   000037   E9           MOV       A,R1
   \   000038   12....       LCALL     ?XSTACK_DISP102_8
   \   00003B   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   F9           MOV       R1,A
   \   000043   90....       MOV       DPTR,#ZDP_TxOptions
   \   000046   E4           CLR       A
   \   000047   F0           MOVX      @DPTR,A
   \   000048   02....       LJMP      ??Subroutine107_0 & 0xFFFF
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   74FD         MOV       A,#-0x3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   74FF         MOV       A,#-0x1
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   22           RET
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_DeviceAnnce
    525           *
    526           * @brief       This builds and send a Device_Annce message.  This
    527           *              function sends a broadcast message.
    528           *
    529           * @param       nwkAddr - 16 bit address of the device
    530           * @param       IEEEAddr - 64 bit address of the device
    531           * @param       capabilities - device capabilities.  This field is only
    532           *                 sent for v1.1 networks.
    533           * @param       SecurityEnable - Security Options
    534           *
    535           * @return      afStatus_t
    536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    538                                        byte capabilities, byte SecurityEnable )
    539          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    540            zAddrType_t dstAddr;
    541            uint8 len;
    542          
    543            (void)SecurityEnable;  // Intentionally unreferenced parameter
    544            
    545            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV       A,#0x8
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
    546            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    547          
    548            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   000014   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000017   EA           MOV       A,R2
   \   000018   12....       LCALL     ?Subroutine19 & 0xFFFF
    549            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   00001B   EB           MOV       A,R3
   \   00001C   F0           MOVX      @DPTR,A
    550            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX      A,@DPTR
   \   000021   2402         ADD       A,#0x2
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   3400         ADDC      A,#0x0
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    551            len = 2 + Z_EXTADDR_LEN;
    552          
    553            ZDP_TmpBuf[10] = capabilities;
   \   00002C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F8           MOV       R0,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   C8           XCH       A,R0
   \   000034   240A         ADD       A,#0xa
   \   000036   F582         MOV       DPL,A
   \   000038   E4           CLR       A
   \   000039   38           ADDC      A,R0
   \   00003A   F583         MOV       DPH,A
   \   00003C   EE           MOV       A,R6
   \   00003D   F0           MOVX      @DPTR,A
    554            len++;
    555          
    556            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003E                ; Setup parameters for call to function fillAndSend
   \   00003E   75..13       MOV       ?V0,#0x13
   \   000041   75..00       MOV       ?V1,#0x0
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   790B         MOV       R1,#0xb
   \   00004B   02....       LJMP      ?Subroutine5 & 0xFFFF
    557          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine123_0
   \   000003                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   22           RET
    558          
    559          /*********************************************************************
    560           * Address Responses
    561           */
    562          
    563          /*********************************************************************
    564           * @fn      zdpProcessAddrReq
    565           *
    566           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    567           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    568           *
    569           * @param   inMsg - incoming message
    570           *
    571           * @return  none
    572           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    573          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    574          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine31 & 0xFFFF
    575            associated_devices_t *pAssoc;
    576            uint8 reqType;
    577            uint16 aoi = INVALID_NODE_ADDR;
    578            uint8 *ieee = NULL;
   \                     ??CrossCallReturnLabel_42:
   \   000012   75..00       MOV       ?V0,#0x0
   \   000015   75..00       MOV       ?V1,#0x0
    579          
    580            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   240C         ADD       A,#0xc
   \   000020   F5..         MOV       ?V6,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   3400         ADDC      A,#0x0
   \   000026   F5..         MOV       ?V7,A
   \   000028   85..82       MOV       DPL,?V6
   \   00002B   F583         MOV       DPH,A
   \   00002D   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000030   7004         JNZ       ??zdpProcessAddrReq_0
   \   000032   7C08         MOV       R4,#0x8
   \   000034   8002         SJMP      ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000036   7C02         MOV       R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000038   7401         MOV       A,#0x1
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   2413         ADD       A,#0x13
   \   000040   F8           MOV       R0,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   3400         ADDC      A,#0x0
   \   000045   F9           MOV       R1,A
   \   000046   7403         MOV       A,#0x3
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00004E   7403         MOV       A,#0x3
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000056   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000059   2C           ADD       A,R4
   \   00005A   F582         MOV       DPL,A
   \   00005C   E4           CLR       A
   \   00005D   39           ADDC      A,R1
   \   00005E   F583         MOV       DPH,A
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F5..         MOV       ?V2,A
    581          
    582            if ( inMsg->clusterID == NWK_addr_req )
   \   000063   EA           MOV       A,R2
   \   000064   4B           ORL       A,R3
   \   000065   704A         JNZ       ??zdpProcessAddrReq_2
    583          
    584            {
    585              ieee = inMsg->asdu;
   \   000067   88..         MOV       ?V0,R0
   \   000069   89..         MOV       ?V1,R1
    586          
    587              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00006B                ; Setup parameters for call to function sAddrExtCmp
   \   00006B   AC..         MOV       R4,?V0
   \   00006D   AD..         MOV       R5,?V1
   \   00006F   7A..         MOV       R2,#saveExtAddr & 0xff
   \   000071   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000073   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000076   E9           MOV       A,R1
   \   000077   6009         JZ        ??zdpProcessAddrReq_3
    588              {
    589                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000079   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00007C   12....       LCALL     ?Subroutine57 & 0xFFFF
    590              }
   \                     ??CrossCallReturnLabel_103:
   \   00007F   02....       LJMP      ??zdpProcessAddrReq_4 & 0xFFFF
    591              // Handle response for sleeping end devices
    592              else if ( (ZSTACK_ROUTER_BUILD)
    593                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    594                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   000082                ; Setup parameters for call to function AssocGetWithExt
   \   000082   AA..         MOV       R2,?V0
   \   000084   AB..         MOV       R3,?V1
   \   000086   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000089   8B..         MOV       ?V5,R3
   \   00008B   A9..         MOV       R1,?V5
   \   00008D   EA           MOV       A,R2
   \   00008E   49           ORL       A,R1
   \   00008F   7003         JNZ       $+5
   \   000091   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
   \   000094   8A82         MOV       DPL,R2
   \   000096   8B83         MOV       DPH,R3
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   6401         XRL       A,#0x1
   \   00009F   6003         JZ        $+5
   \   0000A1   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
    595              {
    596                aoi = pAssoc->shortAddr;
   \   0000A4   8A82         MOV       DPL,R2
   \   0000A6   8B83         MOV       DPH,R3
   \   0000A8   12....       LCALL     ?Subroutine57 & 0xFFFF
    597                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_104:
   \   0000AB   E5..         MOV       A,?V2
   \   0000AD   707A         JNZ       ??zdpProcessAddrReq_6
   \   0000AF   807B         SJMP      ??zdpProcessAddrReq_4
    598                  reqType = 0xFF; // Force Invalid
    599              }
    600            }
    601            else  // if ( inMsg->clusterID == IEEE_addr_req )
    602            {
    603              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   0000B1   8882         MOV       DPL,R0
   \   0000B3   8983         MOV       DPH,R1
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FA           MOV       R2,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F8           MOV       R0,A
   \   0000BA   E4           CLR       A
   \   0000BB   C8           XCH       A,R0
   \   0000BC   F9           MOV       R1,A
   \   0000BD   EA           MOV       A,R2
   \   0000BE   28           ADD       A,R0
   \   0000BF   FE           MOV       R6,A
   \   0000C0   E4           CLR       A
   \   0000C1   39           ADDC      A,R1
   \   0000C2   FF           MOV       R7,A
    604          
    605              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000C3   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   6E           XRL       A,R6
   \   0000C8   7003         JNZ       ??zdpProcessAddrReq_7
   \   0000CA   A3           INC       DPTR
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_7:
   \   0000CD   7008         JNZ       ??zdpProcessAddrReq_8
    606              {
    607                ieee = saveExtAddr;
   \   0000CF   75....       MOV       ?V0,#saveExtAddr & 0xff
   \   0000D2   75....       MOV       ?V1,#(saveExtAddr >> 8) & 0xff
   \   0000D5   8055         SJMP      ??zdpProcessAddrReq_4
    608              }
    609              else if ( (ZSTACK_ROUTER_BUILD)
    610                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    611                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_8:
   \   0000D7                ; Setup parameters for call to function AssocGetWithShort
   \   0000D7   E9           MOV       A,R1
   \   0000D8   FB           MOV       R3,A
   \   0000D9   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   0000DC   8B..         MOV       ?V5,R3
   \   0000DE   A9..         MOV       R1,?V5
   \   0000E0   EA           MOV       A,R2
   \   0000E1   49           ORL       A,R1
   \   0000E2   7003         JNZ       $+5
   \   0000E4   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
   \   0000E7   8A82         MOV       DPL,R2
   \   0000E9   8B83         MOV       DPH,R3
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   6401         XRL       A,#0x1
   \   0000F2   6003         JZ        $+5
   \   0000F4   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
    612              {
    613                AddrMgrEntry_t addrEntry;
    614                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000F7   7405         MOV       A,#0x5
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   E4           CLR       A
   \   0000FD   F0           MOVX      @DPTR,A
    615                addrEntry.index = pAssoc->addrIdx;
   \   0000FE   8A82         MOV       DPL,R2
   \   000100   8B83         MOV       DPH,R3
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000107   7410         MOV       A,#0x10
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   12....       LCALL     ??Subroutine140_0 & 0xFFFF
    616                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_293:
   \   00010F                ; Setup parameters for call to function AddrMgrEntryGet
   \   00010F   7405         MOV       A,#0x5
   \   000111   12....       LCALL     ?XSTACK_DISP101_8
   \   000114   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000117   E9           MOV       A,R1
   \   000118   600B         JZ        ??zdpProcessAddrReq_9
    617                {
    618                  ieee = addrEntry.extAddr;
   \   00011A   7408         MOV       A,#0x8
   \   00011C   12....       LCALL     ?XSTACK_DISP0_8
   \   00011F   8582..       MOV       ?V0,DPL
   \   000122   8583..       MOV       ?V1,DPH
    619                }
    620          
    621                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_9:
   \   000125   E5..         MOV       A,?V2
   \   000127   6003         JZ        ??zdpProcessAddrReq_4
    622                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_6:
   \   000129   75..FF       MOV       ?V2,#-0x1
    623              }
    624            }
    625          
    626            if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??zdpProcessAddrReq_4:
   \   00012C   74FE         MOV       A,#-0x2
   \   00012E   6E           XRL       A,R6
   \   00012F   7003         JNZ       ??zdpProcessAddrReq_10
   \   000131   74FF         MOV       A,#-0x1
   \   000133   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_10:
   \   000134   7003         JNZ       $+5
   \   000136   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
   \   000139   E5..         MOV       A,?V0
   \   00013B   45..         ORL       A,?V1
   \   00013D   7003         JNZ       $+5
   \   00013F   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
    627            {
    628              uint8 *pBuf = ZDP_TmpBuf;
   \   000142   12....       LCALL     ?Subroutine63 & 0xFFFF
    629              // Status + IEEE-Addr + Nwk-Addr.
    630              byte len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_197:
   \   000145   75..0B       MOV       ?V3,#0xb
    631          
    632              byte stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) ||
    633                        (reqType == ZDP_ADDR_REQTYPE_EXTENDED) ||
    634                    ((reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP) && (inMsg->clusterID == NWK_addr_req)) ) ?
    635                ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000148   E5..         MOV       A,?V2
   \   00014A   6017         JZ        ??zdpProcessAddrReq_11
   \   00014C   7401         MOV       A,#0x1
   \   00014E   65..         XRL       A,?V2
   \   000150   6011         JZ        ??zdpProcessAddrReq_11
   \   000152   7402         MOV       A,#0x2
   \   000154   65..         XRL       A,?V2
   \   000156   700F         JNZ       ??zdpProcessAddrReq_12
   \   000158   85..82       MOV       DPL,?V6
   \   00015B   85..83       MOV       DPH,?V7
   \   00015E   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000161   7004         JNZ       ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   000163   7400         MOV       A,#0x0
   \   000165   8002         SJMP      ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   000167   7480         MOV       A,#-0x80
    636          
    637              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_13:
   \   000169   12....       LCALL     ??Subroutine120_0 & 0xFFFF
    638          
    639              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_203:
   \   00016C                ; Setup parameters for call to function sAddrExtCpy
   \   00016C   AC..         MOV       R4,?V0
   \   00016E   AD..         MOV       R5,?V1
   \   000170   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000173   8A..         MOV       ?V4,R2
   \   000175   8B..         MOV       ?V5,R3
    640          
    641              *pBuf++ = LO_UINT16( aoi );
   \   000177   EE           MOV       A,R6
   \   000178   8A82         MOV       DPL,R2
   \   00017A   8B83         MOV       DPH,R3
   \   00017C   F0           MOVX      @DPTR,A
    642              *pBuf++ = HI_UINT16( aoi );
   \   00017D   EF           MOV       A,R7
   \   00017E   A3           INC       DPTR
   \   00017F   F0           MOVX      @DPTR,A
    643          
    644              if ( ZSTACK_ROUTER_BUILD )
    645              {
    646                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) &&
    647                     (aoi == ZDAppNwkAddr.addr.shortAddr) )
   \   000180   7401         MOV       A,#0x1
   \   000182   65..         XRL       A,?V2
   \   000184   6003         JZ        $+5
   \   000186   02....       LJMP      ??zdpProcessAddrReq_14 & 0xFFFF
   \   000189   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   6E           XRL       A,R6
   \   00018E   7003         JNZ       ??zdpProcessAddrReq_15
   \   000190   A3           INC       DPTR
   \   000191   E0           MOVX      A,@DPTR
   \   000192   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_15:
   \   000193   6003         JZ        $+5
   \   000195   02....       LJMP      ??zdpProcessAddrReq_14 & 0xFFFF
    648                {
    649                  byte cnt = 0;
   \   000198   85..82       MOV       DPL,?XSP + 0
   \   00019B   85..83       MOV       DPH,?XSP + 1
   \   00019E   E4           CLR       A
   \   00019F   F0           MOVX      @DPTR,A
    650                  uint16 *list = AssocMakeList( &cnt );
   \   0001A0                ; Setup parameters for call to function AssocMakeList
   \   0001A0   AA..         MOV       R2,?XSP + 0
   \   0001A2   AB..         MOV       R3,?XSP + 1
   \   0001A4   12....       LCALL     `??AssocMakeList::?relay`; Banked call to: AssocMakeList
   \   0001A7   8A..         MOV       ?V0,R2
   \   0001A9   8B..         MOV       ?V1,R3
   \   0001AB   A8..         MOV       R0,?V0
   \   0001AD   A9..         MOV       R1,?V1
    651          
    652                  if ( list != NULL )
   \   0001AF   E5..         MOV       A,?V4
   \   0001B1   2402         ADD       A,#0x2
   \   0001B3   FA           MOV       R2,A
   \   0001B4   E4           CLR       A
   \   0001B5   35..         ADDC      A,?V5
   \   0001B7   FB           MOV       R3,A
   \   0001B8   EA           MOV       A,R2
   \   0001B9   FE           MOV       R6,A
   \   0001BA   EB           MOV       A,R3
   \   0001BB   FF           MOV       R7,A
   \   0001BC   E8           MOV       A,R0
   \   0001BD   49           ORL       A,R1
   \   0001BE   7003         JNZ       $+5
   \   0001C0   02....       LJMP      ??zdpProcessAddrReq_16 & 0xFFFF
    653                  {
    654                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0001C3   85..82       MOV       DPL,?V6
   \   0001C6   85..83       MOV       DPH,?V7
   \   0001C9   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0001CC   7004         JNZ       ??zdpProcessAddrReq_17
   \   0001CE   7C09         MOV       R4,#0x9
   \   0001D0   8002         SJMP      ??zdpProcessAddrReq_18
   \                     ??zdpProcessAddrReq_17:
   \   0001D2   7C03         MOV       R4,#0x3
   \                     ??zdpProcessAddrReq_18:
   \   0001D4   7403         MOV       A,#0x3
   \   0001D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   FA           MOV       R2,A
   \   0001DB   A3           INC       DPTR
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   F583         MOV       DPH,A
   \   0001DF   8A82         MOV       DPL,R2
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   2C           ADD       A,R4
   \   0001E3   FA           MOV       R2,A
   \   0001E4   A3           INC       DPTR
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   3400         ADDC      A,#0x0
   \   0001E8   8A82         MOV       DPL,R2
   \   0001EA   F583         MOV       DPH,A
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   F5..         MOV       ?V0,A
    655                    uint16 *pList = list + idx;
   \   0001EF   25E0         ADD       A,0xE0 /* A   */
   \   0001F1   FA           MOV       R2,A
   \   0001F2   E4           CLR       A
   \   0001F3   33           RLC       A
   \   0001F4   FB           MOV       R3,A
   \   0001F5   E8           MOV       A,R0
   \   0001F6   2A           ADD       A,R2
   \   0001F7   FC           MOV       R4,A
   \   0001F8   E9           MOV       A,R1
   \   0001F9   3B           ADDC      A,R3
   \   0001FA   FD           MOV       R5,A
    656          
    657                    // NumAssocDev field is only present on success.
    658                    if ( cnt > idx )
   \   0001FB   85..82       MOV       DPL,?XSP + 0
   \   0001FE   85..83       MOV       DPH,?XSP + 1
   \   000201   E0           MOVX      A,@DPTR
   \   000202   FA           MOV       R2,A
   \   000203   E5..         MOV       A,?V0
   \   000205   C3           CLR       C
   \   000206   9A           SUBB      A,R2
   \   000207   500D         JNC       ??zdpProcessAddrReq_19
    659                    {
    660                      cnt -= idx;
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   C3           CLR       C
   \   00020B   95..         SUBB      A,?V0
   \   00020D   F0           MOVX      @DPTR,A
    661                      len += (cnt * sizeof( uint16 ));
   \   00020E   C3           CLR       C
   \   00020F   33           RLC       A
   \   000210   240B         ADD       A,#0xb
   \   000212   F5..         MOV       ?V3,A
   \   000214   8002         SJMP      ??zdpProcessAddrReq_20
    662                    }
    663                    else
    664                    {
    665                      cnt = 0;
   \                     ??zdpProcessAddrReq_19:
   \   000216   E4           CLR       A
   \   000217   F0           MOVX      @DPTR,A
    666                    }
    667                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_20:
   \   000218   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00021B   12....       LCALL     ?Subroutine20 & 0xFFFF
    668                    len++;
    669          
    670                    // StartIndex field is only present if NumAssocDev field is non-zero.
    671                    *pBuf++ = idx;
   \                     ??CrossCallReturnLabel_21:
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   E5..         MOV       A,?V0
   \   000222   F0           MOVX      @DPTR,A
   \   000223   E5..         MOV       A,?V4
   \   000225   2404         ADD       A,#0x4
   \   000227   FA           MOV       R2,A
   \   000228   E4           CLR       A
   \   000229   35..         ADDC      A,?V5
   \   00022B   FB           MOV       R3,A
    672                    len++;
   \   00022C   05..         INC       ?V3
   \   00022E   05..         INC       ?V3
   \   000230   8016         SJMP      ??zdpProcessAddrReq_21
    673          
    674                    while ( cnt != 0 )
    675                    {
    676                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_22:
   \   000232   12....       LCALL     ?Subroutine8 & 0xFFFF
    677                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_174:
   \   000235   5001         JNC       ??zdpProcessAddrReq_23
   \   000237   0B           INC       R3
    678                      pList++;
   \                     ??zdpProcessAddrReq_23:
   \   000238   EC           MOV       A,R4
   \   000239   2402         ADD       A,#0x2
   \   00023B   FC           MOV       R4,A
   \   00023C   5001         JNC       ??zdpProcessAddrReq_24
   \   00023E   0D           INC       R5
    679                      cnt--;
   \                     ??zdpProcessAddrReq_24:
   \   00023F   85..82       MOV       DPL,?XSP + 0
   \   000242   85..83       MOV       DPH,?XSP + 1
   \   000245   E0           MOVX      A,@DPTR
   \   000246   14           DEC       A
   \   000247   F0           MOVX      @DPTR,A
    680                    }
   \                     ??zdpProcessAddrReq_21:
   \   000248   85..82       MOV       DPL,?XSP + 0
   \   00024B   85..83       MOV       DPH,?XSP + 1
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   70E1         JNZ       ??zdpProcessAddrReq_22
    681          
    682                    osal_mem_free( (uint8 *)list );
   \   000251                ; Setup parameters for call to function osal_mem_free
   \   000251   E8           MOV       A,R0
   \   000252   FA           MOV       R2,A
   \   000253   E9           MOV       A,R1
   \   000254   FB           MOV       R3,A
   \   000255   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000258   8009         SJMP      ??zdpProcessAddrReq_14
    683                  }
    684                  else
    685                  {
    686                    // NumAssocDev field is only present on success.
    687                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_16:
   \   00025A   8A82         MOV       DPL,R2
   \   00025C   8B83         MOV       DPH,R3
   \   00025E   E4           CLR       A
   \   00025F   F0           MOVX      @DPTR,A
    688                    len++;
   \   000260   75..0C       MOV       ?V3,#0xc
    689                  }
    690                }
    691              }
    692          
    693              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_14:
   \   000263   90....       MOV       DPTR,#ZDP_TxOptions
   \   000266   7410         MOV       A,#0x10
   \   000268   12....       LCALL     ?Subroutine35 & 0xFFFF
    694              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \                     ??CrossCallReturnLabel_55:
   \   00026B   F5..         MOV       ?V0,A
   \   00026D   A3           INC       DPTR
   \   00026E   E0           MOVX      A,@DPTR
   \   00026F   4480         ORL       A,#0x80
   \   000271   F5..         MOV       ?V1,A
   \   000273   78..         MOV       R0,#?V0
   \   000275   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000278   A9..         MOV       R1,?V3
   \   00027A   7403         MOV       A,#0x3
   \   00027C   12....       LCALL     ?XSTACK_DISP0_8
   \   00027F   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000282   12....       LCALL     ?XSTACK_DISP0_8
   \   000285   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000288   12....       LCALL     ?DEALLOC_XSTACK8
    695              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00028B   90....       MOV       DPTR,#ZDP_TxOptions
   \   00028E   E4           CLR       A
   \   00028F   F0           MOVX      @DPTR,A
    696            }
    697          }
   \                     ??zdpProcessAddrReq_5:
   \   000290   7412         MOV       A,#0x12
   \   000292   02....       LJMP      ??Subroutine127_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004                REQUIRE ??Subroutine114_0
   \   000004                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000003   E8           MOV       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   EA           MOV       A,R2
   \   000009   2402         ADD       A,#0x2
   \   00000B   FA           MOV       R2,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FD           MOV       R5,A
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   240F         ADD       A,#0xf
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000C   7402         MOV       A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   85..82       MOV       DPL,?V6
   \   000004   85..83       MOV       DPH,?V7
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine121_0
   \   000004                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   AA82         MOV       R2,DPL
   \   000004   AB83         MOV       R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine128_0
   \   000003                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   49           ORL       A,R1
   \   000004   22           RET
    698          
    699          /*********************************************************************
    700           * @fn          ZDP_NodeDescMsg
    701           *
    702           * @brief       Builds and sends a Node Descriptor message, unicast to the
    703           *              specified device.
    704           *
    705           * @param       inMsg - incoming message
    706           * @param       nwkAddr - 16 bit network address for device
    707           * @param       pNodeDesc - pointer to the node descriptor
    708           *
    709           * @return      afStatus_t
    710           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine112_0
   \   000001                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    712                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    713          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    714            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000008   12....       LCALL     ?Subroutine57 & 0xFFFF
    715            byte len;
    716          
    717            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    718          
    719            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_105:
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    720          
    721            *pBuf++ = LO_UINT16( nwkAddr );
   \   000011   EC           MOV       A,R4
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    722            *pBuf++ = HI_UINT16( nwkAddr );
   \   000014   ED           MOV       A,R5
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   740A         MOV       A,#0xa
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ?Subroutine37 & 0xFFFF
    723          
    724            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    725                               (pNodeDesc->UserDescAvail << 4) |
    726                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_58:
   \   000024   541F         ANL       A,#0x1f
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   12....       LCALL     ?Subroutine29 & 0xFFFF
    727          
    728            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_170:
   \   00002D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000030   12....       LCALL     ?Subroutine29 & 0xFFFF
    729            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_171:
   \   000033   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000036   12....       LCALL     ?Subroutine28 & 0xFFFF
    730            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_179:
   \   000039   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00003C   12....       LCALL     ?Subroutine28 & 0xFFFF
    731            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_180:
   \   00003F   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000042   12....       LCALL     ?Subroutine27 & 0xFFFF
    732            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_37:
   \   000045   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000048   12....       LCALL     ?Subroutine27 & 0xFFFF
    733            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_38:
   \   00004B   A3           INC       DPTR
   \   00004C   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00004F   12....       LCALL     ?Subroutine21 & 0xFFFF
    734            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_24:
   \   000052   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000055   A3           INC       DPTR
   \   000056   F0           MOVX      @DPTR,A
    735          
    736            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000057   E8           MOV       A,R0
   \   000058   2408         ADD       A,#0x8
   \   00005A   FC           MOV       R4,A
   \   00005B   E4           CLR       A
   \   00005C   39           ADDC      A,R1
   \   00005D   FD           MOV       R5,A
   \   00005E   8C82         MOV       DPL,R4
   \   000060   F583         MOV       DPH,A
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V0,A
   \   000065   EE           MOV       A,R6
   \   000066   240B         ADD       A,#0xb
   \   000068   F582         MOV       DPL,A
   \   00006A   E4           CLR       A
   \   00006B   3F           ADDC      A,R7
   \   00006C   F583         MOV       DPH,A
   \   00006E   E5..         MOV       A,?V0
   \   000070   12....       LCALL     ?Subroutine25 & 0xFFFF
    737            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_32:
   \   000073   C0E0         PUSH      A
   \   000075   EE           MOV       A,R6
   \   000076   240C         ADD       A,#0xc
   \   000078   F582         MOV       DPL,A
   \   00007A   E4           CLR       A
   \   00007B   3F           ADDC      A,R7
   \   00007C   F583         MOV       DPH,A
   \   00007E   D0E0         POP       A
   \   000080   12....       LCALL     ?Subroutine21 & 0xFFFF
    738            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_25:
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   C0E0         PUSH      A
   \   000089   EE           MOV       A,R6
   \   00008A   240D         ADD       A,#0xd
   \   00008C   F582         MOV       DPL,A
   \   00008E   E4           CLR       A
   \   00008F   3F           ADDC      A,R7
   \   000090   F583         MOV       DPH,A
   \   000092   D0E0         POP       A
   \   000094   F0           MOVX      @DPTR,A
    739            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   000095   E8           MOV       A,R0
   \   000096   240B         ADD       A,#0xb
   \   000098   F582         MOV       DPL,A
   \   00009A   E4           CLR       A
   \   00009B   39           ADDC      A,R1
   \   00009C   F583         MOV       DPH,A
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   C0E0         PUSH      A
   \   0000A1   EE           MOV       A,R6
   \   0000A2   240E         ADD       A,#0xe
   \   0000A4   F582         MOV       DPL,A
   \   0000A6   E4           CLR       A
   \   0000A7   3F           ADDC      A,R7
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   D0E0         POP       A
   \   0000AC   F0           MOVX      @DPTR,A
    740            *pBuf = pNodeDesc->DescriptorCapability;
   \   0000AD   E8           MOV       A,R0
   \   0000AE   240C         ADD       A,#0xc
   \   0000B0   F582         MOV       DPL,A
   \   0000B2   E4           CLR       A
   \   0000B3   39           ADDC      A,R1
   \   0000B4   F583         MOV       DPH,A
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   C0E0         PUSH      A
   \   0000B9   EE           MOV       A,R6
   \   0000BA   240F         ADD       A,#0xf
   \   0000BC   F582         MOV       DPL,A
   \   0000BE   E4           CLR       A
   \   0000BF   3F           ADDC      A,R7
   \   0000C0   F583         MOV       DPH,A
   \   0000C2   D0E0         POP       A
   \   0000C4   F0           MOVX      @DPTR,A
    741          
    742            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000C5                ; Setup parameters for call to function fillAndSend
   \   0000C5   75..02       MOV       ?V0,#0x2
   \   0000C8   75..80       MOV       ?V1,#-0x80
   \   0000CB   78..         MOV       R0,#?V0
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   7910         MOV       R1,#0x10
   \   0000D2   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000D5   5001         JNC       ??ZDP_NodeDescMsg_0
   \   0000D7   0B           INC       R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000D8   02....       LJMP      ??Subroutine109_0 & 0xFFFF
    743          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine115_0
   \   000003                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine116_0
   \   000002                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   FD           MOV       R5,A
   \   000007   EA           MOV       A,R2
   \   000008   240F         ADD       A,#0xf
   \   00000A   FA           MOV       R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine134_0
   \   000001                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    744          
    745          /*********************************************************************
    746           * @fn          ZDP_PowerDescMsg
    747           *
    748           * @brief       Builds and sends a Power Descriptor message, unicast to the
    749           *              specified device.
    750           *
    751           * @param       inMsg - incoming message (request)
    752           * @param       nwkAddr - 16 bit network address for device
    753           * @param       pPowerDesc - pointer to the node descriptor
    754           *
    755           * @return      afStatus_t
    756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    757          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    758                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    759          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    760            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
    761            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    762          
    763            *pBuf++ = ZDP_SUCCESS;
   \   00000B   8882         MOV       DPL,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    764          
    765            *pBuf++ = LO_UINT16( nwkAddr );
   \   000011   EC           MOV       A,R4
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    766            *pBuf++ = HI_UINT16( nwkAddr );
   \   000014   ED           MOV       A,R5
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   740A         MOV       A,#0xa
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ?Subroutine37 & 0xFFFF
    767          
    768            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    769                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_59:
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   A3           INC       DPTR
   \   000029   12....       LCALL     ?Subroutine95 & 0xFFFF
    770            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    771                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_183:
   \   00002C   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00002F   540F         ANL       A,#0xf
   \   000031   F9           MOV       R1,A
   \   000032   740C         MOV       A,#0xc
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?US_SHR
   \   000039   E5..         MOV       A,?V0
   \   00003B   C4           SWAP      A
   \   00003C   49           ORL       A,R1
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   F0           MOVX      @DPTR,A
    772          
    773            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000046                ; Setup parameters for call to function fillAndSend
   \   000046   75..03       MOV       ?V0,#0x3
   \   000049   75..80       MOV       ?V1,#-0x80
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7905         MOV       R1,#0x5
   \   000053   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000056   5001         JNC       ??ZDP_PowerDescMsg_0
   \   000058   0B           INC       R3
   \                     ??ZDP_PowerDescMsg_0:
   \   000059   02....       LJMP      ??Subroutine109_0 & 0xFFFF
    774          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0
    775          
    776          /*********************************************************************
    777           * @fn          ZDP_SimpleDescMsg
    778           *
    779           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    780           *              specified device.
    781           *
    782           * @param       inMsg - incoming message (request)
    783           * @param       Status - message status (ZDP_SUCCESS or other)
    784           * @param       pSimpleDesc - pointer to the node descriptor
    785           *
    786           * @return      afStatus_t
    787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    788          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    789                                        SimpleDescriptionFormat_t *pSimpleDesc )
    790          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000012   E9           MOV       A,R1
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   F0           MOVX      @DPTR,A
    791            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL     ?Subroutine63 & 0xFFFF
    792            uint8 i, len;
    793          
    794            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_198:
   \   00001D   EC           MOV       A,R4
   \   00001E   2409         ADD       A,#0x9
   \   000020   F5..         MOV       ?V2,A
   \   000022   E4           CLR       A
   \   000023   3D           ADDC      A,R5
   \   000024   F5..         MOV       ?V3,A
   \   000026   EC           MOV       A,R4
   \   000027   2406         ADD       A,#0x6
   \   000029   F5..         MOV       ?V4,A
   \   00002B   E4           CLR       A
   \   00002C   3D           ADDC      A,R5
   \   00002D   F5..         MOV       ?V5,A
   \   00002F   85..82       MOV       DPL,?XSP + 0
   \   000032   85..83       MOV       DPH,?XSP + 1
   \   000035   E0           MOVX      A,@DPTR
   \   000036   7023         JNZ       ??ZDP_SimpleDescMsg_0
   \   000038   EC           MOV       A,R4
   \   000039   4D           ORL       A,R5
   \   00003A   601F         JZ        ??ZDP_SimpleDescMsg_0
    795            {
    796              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    797              len = 1 + 2 + 1 + 8;
    798              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00003C   85..82       MOV       DPL,?V2
   \   00003F   85..83       MOV       DPH,?V3
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F8           MOV       R0,A
   \   000044   85..82       MOV       DPL,?V4
   \   000047   85..83       MOV       DPH,?V5
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   28           ADD       A,R0
   \   00004C   C3           CLR       C
   \   00004D   33           RLC       A
   \   00004E   240C         ADD       A,#0xc
   \   000050   F9           MOV       R1,A
    799            }
    800            else
    801            {
    802              len = 1 + 2 + 1; // Status + desc length
    803            }
    804            if ( len >= ZDP_BUF_SZ-1 )
   \   000051   C3           CLR       C
   \   000052   944F         SUBB      A,#0x4f
   \   000054   4007         JC        ??ZDP_SimpleDescMsg_1
    805            {
    806              return afStatus_MEM_FAIL;
   \   000056   7910         MOV       R1,#0x10
   \   000058   02....       LJMP      ??ZDP_SimpleDescMsg_2 & 0xFFFF
    807            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00005B   7904         MOV       R1,#0x4
    808          
    809            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00005D   12....       LCALL     ?Subroutine36 & 0xFFFF
    810          
    811            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_256:
   \   000060   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000063   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000066   A3           INC       DPTR
   \   000067   F0           MOVX      @DPTR,A
    812            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000068   90....       MOV       DPTR,#ZDAppNwkAddr + 1
   \   00006B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00006E   F0           MOVX      @DPTR,A
    813          
    814            if ( len > 4 )
   \   00006F   EA           MOV       A,R2
   \   000070   2403         ADD       A,#0x3
   \   000072   F582         MOV       DPL,A
   \   000074   E4           CLR       A
   \   000075   3B           ADDC      A,R3
   \   000076   F583         MOV       DPH,A
   \   000078   E9           MOV       A,R1
   \   000079   C3           CLR       C
   \   00007A   9405         SUBB      A,#0x5
   \   00007C   5003         JNC       $+5
   \   00007E   02....       LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
    815            {
    816              *pBuf++ = len - 4;   // Simple descriptor length
   \   000081   74FC         MOV       A,#-0x4
   \   000083   29           ADD       A,R1
   \   000084   F0           MOVX      @DPTR,A
    817          
    818              *pBuf++ = pSimpleDesc->EndPoint;
   \   000085   8C82         MOV       DPL,R4
   \   000087   8D83         MOV       DPH,R5
   \   000089   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00008C   12....       LCALL     ?Subroutine96 & 0xFFFF
    819              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_192:
   \   00008F   AE82         MOV       R6,DPL
   \   000091   AF83         MOV       R7,DPH
   \   000093   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000096   12....       LCALL     ?Subroutine10 & 0xFFFF
    820              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_2:
   \   000099   F0           MOVX      @DPTR,A
    821              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   00009A   EC           MOV       A,R4
   \   00009B   2403         ADD       A,#0x3
   \   00009D   FE           MOV       R6,A
   \   00009E   E4           CLR       A
   \   00009F   3D           ADDC      A,R5
   \   0000A0   FF           MOV       R7,A
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   F583         MOV       DPH,A
   \   0000A5   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000A8   12....       LCALL     ?Subroutine10 & 0xFFFF
    822              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_3:
   \   0000AB   12....       LCALL     ?Subroutine96 & 0xFFFF
    823          
    824              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_193:
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   C4           SWAP      A
   \   0000B4   54F0         ANL       A,#0xf0
   \   0000B6   8A82         MOV       DPL,R2
   \   0000B8   8B83         MOV       DPH,R3
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   12....       LCALL     ?Subroutine14 & 0xFFFF
    825          
    826              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_11:
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   EA           MOV       A,R2
   \   0000CD   240B         ADD       A,#0xb
   \   0000CF   FA           MOV       R2,A
   \   0000D0   5001         JNC       ??ZDP_SimpleDescMsg_4
   \   0000D2   0B           INC       R3
    827              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000D3   85..82       MOV       DPL,?V4
   \   0000D6   85..83       MOV       DPH,?V5
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   603D         JZ        ??ZDP_SimpleDescMsg_5
    828              {
    829                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000DC   7800         MOV       R0,#0x0
   \   0000DE   EC           MOV       A,R4
   \   0000DF   2407         ADD       A,#0x7
   \   0000E1   F5..         MOV       ?V6,A
   \   0000E3   E4           CLR       A
   \   0000E4   3D           ADDC      A,R5
   \   0000E5   F5..         MOV       ?V7,A
   \   0000E7   8023         SJMP      ??ZDP_SimpleDescMsg_6
    830                {
    831                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000E9   E8           MOV       A,R0
   \   0000EA   25E0         ADD       A,0xE0 /* A   */
   \   0000EC   FE           MOV       R6,A
   \   0000ED   E4           CLR       A
   \   0000EE   33           RLC       A
   \   0000EF   FF           MOV       R7,A
   \   0000F0   85..82       MOV       DPL,?V6
   \   0000F3   85..83       MOV       DPH,?V7
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   12....       LCALL     ?Subroutine82 & 0xFFFF
    832                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
    833                }
   \                     ??CrossCallReturnLabel_137:
   \   0000FA   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000FD   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000100   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000103   F583         MOV       DPH,A
   \   000105   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000108   5001         JNC       ??ZDP_SimpleDescMsg_8
   \   00010A   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_8:
   \   00010B   08           INC       R0
   \                     ??ZDP_SimpleDescMsg_6:
   \   00010C   85..82       MOV       DPL,?V4
   \   00010F   85..83       MOV       DPH,?V5
   \   000112   E0           MOVX      A,@DPTR
   \   000113   FE           MOV       R6,A
   \   000114   E8           MOV       A,R0
   \   000115   C3           CLR       C
   \   000116   9E           SUBB      A,R6
   \   000117   40D0         JC        ??ZDP_SimpleDescMsg_7
    834              }
    835          
    836              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000119   85..82       MOV       DPL,?V2
   \   00011C   85..83       MOV       DPH,?V3
   \   00011F   12....       LCALL     ?Subroutine22 & 0xFFFF
    837              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_204:
   \   000122   85..82       MOV       DPL,?V2
   \   000125   85..83       MOV       DPH,?V3
   \   000128   E0           MOVX      A,@DPTR
   \   000129   6033         JZ        ??ZDP_SimpleDescMsg_9
    838              {
    839                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   00012B   7800         MOV       R0,#0x0
   \   00012D   EC           MOV       A,R4
   \   00012E   240A         ADD       A,#0xa
   \   000130   5001         JNC       ??ZDP_SimpleDescMsg_10
   \   000132   0D           INC       R5
   \                     ??ZDP_SimpleDescMsg_10:
   \   000133   FE           MOV       R6,A
   \   000134   ED           MOV       A,R5
   \   000135   FF           MOV       R7,A
   \                     ??ZDP_SimpleDescMsg_11:
   \   000136   85..82       MOV       DPL,?V2
   \   000139   85..83       MOV       DPH,?V3
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   FC           MOV       R4,A
   \   00013E   E8           MOV       A,R0
   \   00013F   C3           CLR       C
   \   000140   9C           SUBB      A,R4
   \   000141   501B         JNC       ??ZDP_SimpleDescMsg_9
    840                {
    841                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000143   E8           MOV       A,R0
   \   000144   25E0         ADD       A,0xE0 /* A   */
   \   000146   FC           MOV       R4,A
   \   000147   E4           CLR       A
   \   000148   33           RLC       A
   \   000149   FD           MOV       R5,A
   \   00014A   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00014D   12....       LCALL     ??Subroutine135_0 & 0xFFFF
    842                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_252:
   \   000150   12....       LCALL     ?Subroutine50 & 0xFFFF
    843                }
   \                     ??CrossCallReturnLabel_84:
   \   000153   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000156   5001         JNC       ??ZDP_SimpleDescMsg_12
   \   000158   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_12:
   \   000159   08           INC       R0
   \   00015A   80DA         SJMP      ??ZDP_SimpleDescMsg_11
    844              }
    845            }
    846          
    847            else
    848            {
    849              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   00015C   E4           CLR       A
   \   00015D   F0           MOVX      @DPTR,A
    850            }
    851          
    852            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   00015E                ; Setup parameters for call to function fillAndSend
   \   00015E   75..04       MOV       ?V0,#0x4
   \   000161   75..80       MOV       ?V1,#-0x80
   \   000164   78..         MOV       R0,#?V0
   \   000166   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000169   7403         MOV       A,#0x3
   \   00016B   12....       LCALL     ?XSTACK_DISP0_8
   \   00016E   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000171   12....       LCALL     ?XSTACK_DISP0_8
   \   000174   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000177   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00017A   02....       LJMP      ?Subroutine2 & 0xFFFF
    853          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine118_0
   \   000002                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   2E           ADD       A,R6
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3F           ADDC      A,R7
   \   000006   85..82       MOV       DPL,?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   2C           ADD       A,R4
   \   000006   F5..         MOV       ?V0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   3D           ADDC      A,R5
   \   00000B   85..82       MOV       DPL,?V0
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine120_0
   \   000001                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   F0           MOVX      @DPTR,A
   \   000006   8E82         MOV       DPL,R6
   \   000008   8F83         MOV       DPH,R7
   \   00000A   A3           INC       DPTR
   \   00000B   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine126_0
   \   000002                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7403         MOV       A,#0x3
   \   000002                REQUIRE ??Subroutine127_0
   \   000002                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine135_0
   \   000006                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
    854          
    855          /*********************************************************************
    856           * @fn          ZDP_EPRsp
    857           *
    858           * @brief       This builds and send an endpoint list. Used in
    859           *              Active_EP_rsp and Match_Desc_Rsp
    860           *              message.  This function sends unicast message to the
    861           *              requesting device.
    862           *
    863           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    864           * @param       dstAddr - destination address
    865           * @param       Status - message status (ZDP_SUCCESS or other)
    866           * @param       nwkAddr - Device's short address that this response describes
    867           * @param       Count - number of endpoint/interfaces in list
    868           * @param       pEPIntfList - Array of Endpoint/Interfaces
    869           * @param       SecurityEnable - Security Options
    870           *
    871           * @return      afStatus_t
    872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    873          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    874                                  byte Status, uint16 nwkAddr, byte Count,
    875                                  uint8 *pEPList,
    876                                  byte SecurityEnable )
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EA           MOV       A,R2
   \   000013   FE           MOV       R6,A
   \   000014   EB           MOV       A,R3
   \   000015   FF           MOV       R7,A
   \   000016   8C..         MOV       ?V6,R4
   \   000018   8D..         MOV       ?V7,R5
    878            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL     ?Subroutine63 & 0xFFFF
    879            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_199:
   \   00001D   75..04       MOV       ?V4,#0x4
    880            byte txOptions;
    881          
    882            (void)SecurityEnable;  // Intentionally unreferenced parameter
    883            
    884            if ( MsgType == Match_Desc_rsp )
   \   000020   7406         MOV       A,#0x6
   \   000022   6E           XRL       A,R6
   \   000023   7003         JNZ       ??ZDP_EPRsp_0
   \   000025   7480         MOV       A,#-0x80
   \   000027   6F           XRL       A,R7
   \                     ??ZDP_EPRsp_0:
   \   000028   7005         JNZ       ??ZDP_EPRsp_1
    885              txOptions = AF_MSG_ACK_REQUEST;
   \   00002A   75..10       MOV       ?V3,#0x10
   \   00002D   8003         SJMP      ??ZDP_EPRsp_2
    886            else
    887              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00002F   75..00       MOV       ?V3,#0x0
    888          
    889              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000032   7411         MOV       A,#0x11
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00003A   7412         MOV       A,#0x12
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine13 & 0xFFFF
    890            *pBuf++ = LO_UINT16( nwkAddr );
    891            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_8:
   \   000042   7414         MOV       A,#0x14
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
    892          
    893            *pBuf++ = Count;   // Endpoint/Interface count
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   F0           MOVX      @DPTR,A
    894          
    895            if ( Count )
   \   000051   6021         JZ        ??ZDP_EPRsp_3
    896            {
    897              len += Count;
   \   000053   7404         MOV       A,#0x4
   \   000055   29           ADD       A,R1
   \   000056   F5..         MOV       ?V4,A
    898              osal_memcpy( pBuf, pEPList, Count );
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   7415         MOV       A,#0x15
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine47 & 0xFFFF
    899            }
   \                     ??CrossCallReturnLabel_79:
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   E9           MOV       A,R1
   \   000064   FC           MOV       R4,A
   \   000065   7D00         MOV       R5,#0x0
   \   000067   EA           MOV       A,R2
   \   000068   2404         ADD       A,#0x4
   \   00006A   FA           MOV       R2,A
   \   00006B   5001         JNC       ??ZDP_EPRsp_4
   \   00006D   0B           INC       R3
   \                     ??ZDP_EPRsp_4:
   \   00006E   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
    900          
    901            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000074   E5..         MOV       A,?V3
   \   000076   90....       MOV       DPTR,#ZDP_TxOptions
   \   000079   F0           MOVX      @DPTR,A
   \   00007A                ; Setup parameters for call to function fillAndSend
   \   00007A   8E..         MOV       ?V0,R6
   \   00007C   8F..         MOV       ?V1,R7
   \   00007E   78..         MOV       R0,#?V0
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   A9..         MOV       R1,?V4
   \   000085   AC..         MOV       R4,?V6
   \   000087   AD..         MOV       R5,?V7
   \   000089   7402         MOV       A,#0x2
   \   00008B   12....       LCALL     ?XSTACK_DISP101_8
   \   00008E   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   \   000094   E9           MOV       A,R1
   \   000095   F9           MOV       R1,A
   \   000096   90....       MOV       DPTR,#ZDP_TxOptions
   \   000099   E4           CLR       A
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   04           INC       A
   \   00009C   02....       LJMP      ??Subroutine127_0 & 0xFFFF
    902          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003   E8           MOV       A,R0
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   75..00       MOV       ?V2,#0x0
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E9           MOV       A,R1
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    903          
    904          /*********************************************************************
    905           * @fn          ZDP_UserDescRsp
    906           *
    907           * @brief       Build and send the User Decriptor Response.
    908           *
    909           *
    910           * @param       dstAddr - destination address
    911           * @param       nwkAddrOfInterest -
    912           * @param       userDesc -
    913           * @param       SecurityEnable - Security Options
    914           *
    915           * @return      ZStatus_t
    916           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    917          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    918                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    919                          byte SecurityEnable )
    920          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V6,R2
   \   000014   8B..         MOV       ?V7,R3
    921            uint8 *pBuf = ZDP_TmpBuf;
   \   000016   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000019   7411         MOV       A,#0x11
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V4,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V5,A
    922            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    923          
    924            (void)SecurityEnable;  // Intentionally unreferenced parameter
    925            
    926            len += userDesc->len;
   \   000025   85..82       MOV       DPL,?V4
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   2404         ADD       A,#0x4
   \   00002D   FF           MOV       R7,A
    927          
    928            *pBuf++ = ZSUCCESS;
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
    929          
    930            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000034   EC           MOV       A,R4
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
    931            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000037   ED           MOV       A,R5
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   12....       LCALL     ?Subroutine14 & 0xFFFF
    932          
    933            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_12:
   \   00003F   12....       LCALL     ?Subroutine20 & 0xFFFF
    934            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_22:
   \   000042   AC82         MOV       R4,DPL
   \   000044   AD83         MOV       R5,DPH
   \   000046   8C..         MOV       ?V0,R4
   \   000048   8D..         MOV       ?V1,R5
   \   00004A   75..00       MOV       ?V2,#0x0
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   85..82       MOV       DPL,?V4
   \   000055   85..83       MOV       DPH,?V5
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FC           MOV       R4,A
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   EA           MOV       A,R2
   \   00005D   2404         ADD       A,#0x4
   \   00005F   FA           MOV       R2,A
   \   000060   5001         JNC       ??ZDP_UserDescRsp_0
   \   000062   0B           INC       R3
   \                     ??ZDP_UserDescRsp_0:
   \   000063   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
    935          
    936            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   000069                ; Setup parameters for call to function fillAndSend
   \   000069   75..11       MOV       ?V0,#0x11
   \   00006C   75..80       MOV       ?V1,#-0x80
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   EF           MOV       A,R7
   \   000075   F9           MOV       R1,A
   \   000076   AC..         MOV       R4,?V6
   \   000078   AD..         MOV       R5,?V7
   \   00007A   7402         MOV       A,#0x2
   \   00007C   12....       LCALL     ?XSTACK_DISP101_8
   \   00007F   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   7401         MOV       A,#0x1
   \   000087   02....       LJMP      ??Subroutine127_0 & 0xFFFF
    937          }
    938          
    939          /*********************************************************************
    940           * @fn          ZDP_ServerDiscRsp
    941           *
    942           * @brief       Build and send the Server_Discovery_rsp response.
    943           *
    944           * @param       transID - Transaction sequence number of request.
    945           * @param       dstAddr - Network Destination Address.
    946           * @param       status - Status of response to request.
    947           * @param       aoi - Network Address of Interest of request.
    948           * @param       serverMask - Bit map of service(s) being sought.
    949           * @param       SecurityEnable - Security Options
    950           *
    951           * @return      ZStatus_t
    952           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    953          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    954                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    955          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   \   000013   FE           MOV       R6,A
    956            const byte len = 1  + 2;  // status + aoi + mask.
    957            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000017   FC           MOV       R4,A
   \   000018   E9           MOV       A,R1
   \   000019   FD           MOV       R5,A
    958            ZStatus_t stat;
    959            
    960            // Intentionally unreferenced parameters
    961            (void)aoi;
    962            (void)SecurityEnable;
    963            
    964            *pBuf++ = status;
   \   00001A   EE           MOV       A,R6
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   740D         MOV       A,#0xd
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine60 & 0xFFFF
    965          
    966            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_110:
   \   000028   A3           INC       DPTR
   \   000029   F0           MOVX      @DPTR,A
    967            *pBuf++ = HI_UINT16( serverMask );
   \   00002A   E9           MOV       A,R1
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   F0           MOVX      @DPTR,A
    968          
    969            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000032   90....       MOV       DPTR,#ZDP_TxOptions
   \   000035   7410         MOV       A,#0x10
   \   000037   F0           MOVX      @DPTR,A
    970            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..15       MOV       ?V0,#0x15
   \   00003B   75..80       MOV       ?V1,#-0x80
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7903         MOV       R1,#0x3
   \   000045   EA           MOV       A,R2
   \   000046   FC           MOV       R4,A
   \   000047   EB           MOV       A,R3
   \   000048   FD           MOV       R5,A
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   E9           MOV       A,R1
   \   000055   F9           MOV       R1,A
    971            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000056   90....       MOV       DPTR,#ZDP_TxOptions
   \   000059   E4           CLR       A
   \   00005A   F0           MOVX      @DPTR,A
    972            
    973            return ( stat );
   \   00005B   04           INC       A
   \   00005C   02....       LJMP      ??Subroutine110_0 & 0xFFFF
    974          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET
    975          
    976          /*********************************************************************
    977           * @fn          ZDP_GenericRsp
    978           *
    979           * @brief       Sends a response message with only the parameter status
    980           *              byte and the addr of interest for data.
    981           *              This function sends unicast message to the
    982           *              requesting device.
    983           *
    984           * @param       dstAddr - destination address
    985           * @param       status  - generic status for response
    986           * @param       aoi     - address of interest
    987           * @param       dstAddr - destination address
    988           * @param       rspId   - response cluster ID
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      afStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
    994                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
    995          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
    996            uint8 len;
    997          
    998            (void)SecurityEnable;  // Intentionally unreferenced parameter
    999            
   1000            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   740A         MOV       A,#0xa
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   1001            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_306:
   \   00001F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FC           MOV       R4,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F583         MOV       DPH,A
   \   000028   8C82         MOV       DPL,R4
   \   00002A   A3           INC       DPTR
   \   00002B   E8           MOV       A,R0
   \   00002C   12....       LCALL     ?Subroutine12 & 0xFFFF
   1002            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1003          
   1004            // Length byte
   1005            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_7:
   \   00002F   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   1006            len = 4;
   1007          
   1008            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV       A,#0xc
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV       R1,#0x4
   \   000041   EA           MOV       A,R2
   \   000042   FC           MOV       R4,A
   \   000043   EB           MOV       A,R3
   \   000044   FD           MOV       R5,A
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   7401         MOV       A,#0x1
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055                REQUIRE ?Subroutine4
   \   000055                ; // Fall through to label ?Subroutine4
   1009          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1010          
   1011          /*********************************************************************
   1012           * Binding
   1013           */
   1014          /*********************************************************************
   1015           * @fn          ZDP_EndDeviceBindReq
   1016           *
   1017           * @brief       This builds and sends a End_Device_Bind_req message.
   1018           *              This function sends a unicast message.
   1019           *
   1020           * @param       dstAddr - destination address
   1021           * @param       LocalCoordinator - short address of local coordinator
   1022           * @param       epIntf - Endpoint/Interface of Simple Desc
   1023           * @param       ProfileID - Profile ID
   1024           *
   1025           *   The Input cluster list is the opposite of what you would think.
   1026           *   This is the output cluster list of this device
   1027           * @param       NumInClusters - number of input clusters
   1028           * @param       InClusterList - input cluster ID list
   1029           *
   1030           *   The Output cluster list is the opposite of what you would think.
   1031           *   This is the input cluster list of this device
   1032           * @param       NumOutClusters - number of output clusters
   1033           * @param       OutClusterList - output cluster ID list
   1034           *
   1035           * @param       SecurityEnable - Security Options
   1036           *
   1037           * @return      afStatus_t
   1038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1039          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1040                                           uint16 LocalCoordinator,
   1041                                           byte endPoint,
   1042                                           uint16 ProfileID,
   1043                                           byte NumInClusters, cId_t *InClusterList,
   1044                                           byte NumOutClusters, cId_t *OutClusterList,
   1045                                           byte SecurityEnable )
   1046          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000013   EC           MOV       A,R4
   \   000014   FE           MOV       R6,A
   \   000015   ED           MOV       A,R5
   \   000016   FF           MOV       R7,A
   \   000017   89..         MOV       ?V7,R1
   1047            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001C   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00001F   7414         MOV       A,#0x14
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V2,A
   \   000027   7417         MOV       A,#0x17
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V3,A
   1048            uint8 i, len;
   1049            uint8 *ieeeAddr;
   1050          
   1051            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1052            
   1053            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1054            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1055            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   00002F   E5..         MOV       A,?V2
   \   000031   25..         ADD       A,?V3
   \   000033   C3           CLR       C
   \   000034   33           RLC       A
   \   000035   240F         ADD       A,#0xf
   \   000037   F5..         MOV       ?V6,A
   1056          
   1057            if ( len >= ZDP_BUF_SZ-1 )
   \   000039   C3           CLR       C
   \   00003A   944F         SUBB      A,#0x4f
   \   00003C   4005         JC        ??ZDP_EndDeviceBindReq_0
   1058            {
   1059              return afStatus_MEM_FAIL;
   \   00003E   7910         MOV       R1,#0x10
   \   000040   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1060            }
   1061          
   1062            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000043                ; Setup parameters for call to function NLME_GetShortAddr
   \   000043   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000046   EA           MOV       A,R2
   \   000047   6E           XRL       A,R6
   \   000048   7002         JNZ       ??ZDP_EndDeviceBindReq_2
   \   00004A   EB           MOV       A,R3
   \   00004B   6F           XRL       A,R7
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00004C   6005         JZ        ??ZDP_EndDeviceBindReq_3
   1063            {
   1064              return afStatus_INVALID_PARAMETER;
   \   00004E   7902         MOV       R1,#0x2
   \   000050   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1065            }
   1066          
   1067            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000053   EE           MOV       A,R6
   \   000054   85..82       MOV       DPL,?V0
   \   000057   85..83       MOV       DPH,?V1
   \   00005A   F0           MOVX      @DPTR,A
   1068            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   00005B   EF           MOV       A,R7
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
   1069          
   1070            ieeeAddr = NLME_GetExtAddr();
   \   00005E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00005E   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000061   8A..         MOV       ?V4,R2
   \   000063   8B..         MOV       ?V5,R3
   \   000065   AC..         MOV       R4,?V4
   \   000067   AD..         MOV       R5,?V5
   1071            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000069                ; Setup parameters for call to function sAddrExtCpy
   \   000069   E5..         MOV       A,?V0
   \   00006B   2402         ADD       A,#0x2
   \   00006D   FA           MOV       R2,A
   \   00006E   E4           CLR       A
   \   00006F   35..         ADDC      A,?V1
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     ?Subroutine102 & 0xFFFF
   1072          
   1073            *pBuf++ = endPoint;
   \                     ??CrossCallReturnLabel_161:
   \   000075   E5..         MOV       A,?V7
   \   000077   F0           MOVX      @DPTR,A
   \   000078   7412         MOV       A,#0x12
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   12....       LCALL     ?Subroutine13 & 0xFFFF
   1074          
   1075            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1076            *pBuf++ = HI_UINT16( ProfileID );
   1077          
   1078            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_9:
   \   000080   8A82         MOV       DPL,R2
   \   000082   8B83         MOV       DPH,R3
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E5..         MOV       A,?V2
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   EA           MOV       A,R2
   \   00008B   2404         ADD       A,#0x4
   \   00008D   F5..         MOV       ?V0,A
   \   00008F   E4           CLR       A
   \   000090   3B           ADDC      A,R3
   \   000091   F5..         MOV       ?V1,A
   1079            for ( i = 0; i < NumInClusters; ++i )
   \   000093   7A00         MOV       R2,#0x0
   \   000095   7415         MOV       A,#0x15
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00009D   8027         SJMP      ??ZDP_EndDeviceBindReq_4
   1080            {
   1081              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   00009F   EA           MOV       A,R2
   \   0000A0   25E0         ADD       A,0xE0 /* A   */
   \   0000A2   FE           MOV       R6,A
   \   0000A3   E4           CLR       A
   \   0000A4   33           RLC       A
   \   0000A5   FF           MOV       R7,A
   \   0000A6   EC           MOV       A,R4
   \   0000A7   2E           ADD       A,R6
   \   0000A8   F5..         MOV       ?V4,A
   \   0000AA   ED           MOV       A,R5
   \   0000AB   3F           ADDC      A,R7
   \   0000AC   F5..         MOV       ?V5,A
   \   0000AE   85..82       MOV       DPL,?V4
   \   0000B1   12....       LCALL     ?Subroutine70 & 0xFFFF
   1082              *pBuf++ = HI_UINT16(InClusterList[i]);
   1083            }
   \                     ??CrossCallReturnLabel_224:
   \   0000B4   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000B7   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   E5..         MOV       A,?V0
   \   0000BD   2402         ADD       A,#0x2
   \   0000BF   F5..         MOV       ?V0,A
   \   0000C1   5002         JNC       ??ZDP_EndDeviceBindReq_6
   \   0000C3   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000C5   0A           INC       R2
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000C6   85..82       MOV       DPL,?V0
   \   0000C9   85..83       MOV       DPH,?V1
   \   0000CC   A3           INC       DPTR
   \   0000CD   A882         MOV       R0,DPL
   \   0000CF   A983         MOV       R1,DPH
   \   0000D1   EA           MOV       A,R2
   \   0000D2   C3           CLR       C
   \   0000D3   95..         SUBB      A,?V2
   \   0000D5   40C8         JC        ??ZDP_EndDeviceBindReq_5
   1084          
   1085            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000D7   85..82       MOV       DPL,?V0
   \   0000DA   85..83       MOV       DPH,?V1
   \   0000DD   E5..         MOV       A,?V3
   \   0000DF   F0           MOVX      @DPTR,A
   \   0000E0   88..         MOV       ?V0,R0
   \   0000E2   89..         MOV       ?V1,R1
   1086            for ( i = 0; i < NumOutClusters; ++i )
   \   0000E4   7A00         MOV       R2,#0x0
   \   0000E6   7418         MOV       A,#0x18
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   0000EE   8028         SJMP      ??ZDP_EndDeviceBindReq_7
   1087            {
   1088              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000F0   EA           MOV       A,R2
   \   0000F1   25E0         ADD       A,0xE0 /* A   */
   \   0000F3   FC           MOV       R4,A
   \   0000F4   E4           CLR       A
   \   0000F5   33           RLC       A
   \   0000F6   FD           MOV       R5,A
   \   0000F7   E8           MOV       A,R0
   \   0000F8   2C           ADD       A,R4
   \   0000F9   FC           MOV       R4,A
   \   0000FA   E9           MOV       A,R1
   \   0000FB   3D           ADDC      A,R5
   \   0000FC   FD           MOV       R5,A
   \   0000FD   8C82         MOV       DPL,R4
   \   0000FF   12....       LCALL     ?Subroutine70 & 0xFFFF
   1089              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1090            }
   \                     ??CrossCallReturnLabel_225:
   \   000102   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000105   85..82       MOV       DPL,?V0
   \   000108   85..83       MOV       DPH,?V1
   \   00010B   A3           INC       DPTR
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   E5..         MOV       A,?V0
   \   00010F   2402         ADD       A,#0x2
   \   000111   F5..         MOV       ?V0,A
   \   000113   5002         JNC       ??ZDP_EndDeviceBindReq_9
   \   000115   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_9:
   \   000117   0A           INC       R2
   \                     ??ZDP_EndDeviceBindReq_7:
   \   000118   EA           MOV       A,R2
   \   000119   C3           CLR       C
   \   00011A   95..         SUBB      A,?V3
   \   00011C   40D2         JC        ??ZDP_EndDeviceBindReq_8
   1091          
   1092            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   00011E                ; Setup parameters for call to function fillAndSend
   \   00011E   75..20       MOV       ?V0,#0x20
   \   000121   75..00       MOV       ?V1,#0x0
   \   000124   78..         MOV       R0,#?V0
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000129   A9..         MOV       R1,?V6
   \   00012B   7402         MOV       A,#0x2
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000133   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000136                REQUIRE ?Subroutine6
   \   000136                ; // Fall through to label ?Subroutine6
   1093          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV       A,#0x2
   \   000002   02....       LJMP      ??Subroutine127_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine124_0
   \   000002                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000C   7402         MOV       A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   22           RET
   1094          
   1095          /*********************************************************************
   1096           * @fn          ZDP_BindUnbindReq
   1097           *
   1098           * @brief       This builds and send a Bind_req or Unbind_req message
   1099           *              Depending on the ClusterID. This function
   1100           *              sends a unicast message to the local coordinator.
   1101           *
   1102           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1103           * @param       dstAddr - destination address of the message
   1104           * @param       SourceAddr - source 64 bit address of the binding
   1105           * @param       SrcEPIntf - Source endpoint/interface
   1106           * @param       ClusterID - Binding cluster ID
   1107           * @param       DestinationAddr - destination 64 bit addr of binding
   1108           * @param       DstEPIntf - destination endpoint/interface
   1109           * @param       SecurityEnable - Security Options
   1110           *
   1111           * @return      afStatus_t
   1112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1113          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1114                                        uint8 *SourceAddr, byte SrcEndPoint,
   1115                                        cId_t ClusterID,
   1116                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1117                                        byte SecurityEnable )
   1118          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   EA           MOV       A,R2
   \   000016   FE           MOV       R6,A
   \   000017   EB           MOV       A,R3
   \   000018   FF           MOV       R7,A
   \   000019   89..         MOV       ?V1,R1
   1119            uint8 *pBuf = ZDP_TmpBuf;
   \   00001B   12....       LCALL     ?Subroutine63 & 0xFFFF
   1120            byte len;
   1121          
   1122            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1123            
   1124            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1125            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_201:
   \   00001E   75..0C       MOV       ?V0,#0xc
   \   000021   7416         MOV       A,#0x16
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   1126            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_166:
   \   000029   E5..         MOV       A,?V2
   \   00002B   2408         ADD       A,#0x8
   \   00002D   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   7403         MOV       A,#0x3
   \   000034   68           XRL       A,R0
   \   000035   7005         JNZ       ??ZDP_BindUnbindReq_0
   1127              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000037   75..15       MOV       ?V0,#0x15
   \   00003A   8008         SJMP      ??ZDP_BindUnbindReq_1
   1128            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   00003C   7401         MOV       A,#0x1
   \   00003E   68           XRL       A,R0
   \   00003F   7003         JNZ       ??ZDP_BindUnbindReq_1
   1129              len += sizeof ( uint16 );
   \   000041   75..0E       MOV       ?V0,#0xe
   1130          
   1131            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000044                ; Setup parameters for call to function sAddrExtCpy
   \   000044   7412         MOV       A,#0x12
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00004C   12....       LCALL     ?Subroutine75 & 0xFFFF
   1132            *pBuf++ = SrcEndPoint;
   \                     ??CrossCallReturnLabel_125:
   \   00004F   7414         MOV       A,#0x14
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ?Subroutine13 & 0xFFFF
   1133          
   1134            *pBuf++ = LO_UINT16( ClusterID );
   1135          
   1136            *pBuf++ = HI_UINT16( ClusterID );
   1137            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_10:
   \   000057   85..82       MOV       DPL,?V6
   \   00005A   85..83       MOV       DPH,?V7
   \   00005D   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000060   5001         JNC       ??ZDP_BindUnbindReq_2
   \   000062   0B           INC       R3
   1138            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   000063   85..82       MOV       DPL,?V6
   \   000066   85..83       MOV       DPH,?V7
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F8           MOV       R0,A
   \   00006B   7403         MOV       A,#0x3
   \   00006D   68           XRL       A,R0
   \   00006E   7013         JNZ       ??ZDP_BindUnbindReq_3
   1139            {
   1140              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1141              *pBuf = DstEndPoint;
   \   000070   7418         MOV       A,#0x18
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   C0E0         PUSH      A
   \   000078                ; Setup parameters for call to function sAddrExtCpy
   \   000078   AC..         MOV       R4,?V2
   \   00007A   AD..         MOV       R5,?V3
   \   00007C   12....       LCALL     ?Subroutine102 & 0xFFFF
   1142            }
   \                     ??CrossCallReturnLabel_162:
   \   00007F   D0E0         POP       A
   \   000081   8016         SJMP      ??ZDP_BindUnbindReq_4
   1143            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   000083   7401         MOV       A,#0x1
   \   000085   68           XRL       A,R0
   \   000086   7012         JNZ       ??ZDP_BindUnbindReq_5
   1144            {
   1145              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000088   85..82       MOV       DPL,?V2
   \   00008B   85..83       MOV       DPH,?V3
   \   00008E   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   1146              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   1147            }
   \                     ??CrossCallReturnLabel_236:
   \   000091   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000094   8A82         MOV       DPL,R2
   \   000096   8B83         MOV       DPH,R3
   \   000098   A3           INC       DPTR
   \                     ??ZDP_BindUnbindReq_4:
   \   000099   F0           MOVX      @DPTR,A
   1148          
   1149            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_5:
   \   00009A   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009D   7410         MOV       A,#0x10
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0                ; Setup parameters for call to function fillAndSend
   \   0000A0   8E..         MOV       ?V2,R6
   \   0000A2   8F..         MOV       ?V3,R7
   \   0000A4   78..         MOV       R0,#?V2
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   A9..         MOV       R1,?V0
   \   0000AB   7402         MOV       A,#0x2
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   F9           MOV       R1,A
   \   0000B8   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000BB   E4           CLR       A
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   02....       LJMP      ?Subroutine6 & 0xFFFF
   1150          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   F5..         MOV       ?V6,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V3
   \   000005   F5..         MOV       ?V7,A
   \   000007   85..82       MOV       DPL,?V6
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   EA           MOV       A,R2
   \   000005   2404         ADD       A,#0x4
   \   000007   FA           MOV       R2,A
   \   000008   22           RET
   1151          
   1152          /*********************************************************************
   1153           * Network Management
   1154           */
   1155          
   1156          /*********************************************************************
   1157           * @fn          ZDP_MgmtNwkDiscReq
   1158           *
   1159           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1160           *              function sends a unicast message.
   1161           *
   1162           * @param       dstAddr - destination address of the message
   1163           * @param       ScanChannels - 32 bit address bit map
   1164           * @param       StartIndex - Starting index within the reporting network
   1165           *                           list
   1166           * @param       SecurityEnable - Security Options
   1167           *
   1168           * @return      afStatus_t
   1169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1170          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1171                                         uint32 ScanChannels,
   1172                                         byte ScanDuration,
   1173                                         byte StartIndex,
   1174                                         byte SecurityEnable )
   1175          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
   \   00000B   EC           MOV       A,R4
   \   00000C   FF           MOV       R7,A
   1176            uint8 *pBuf = ZDP_TmpBuf;
   1177            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1178          
   1179            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1180            
   1181            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000018   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   1182          
   1183            *pBuf++ = ScanDuration;
   \   00001F   EE           MOV       A,R6
   \   000020   F0           MOVX      @DPTR,A
   1184            *pBuf = StartIndex;
   \   000021   EF           MOV       A,R7
   \   000022   A3           INC       DPTR
   \   000023   F0           MOVX      @DPTR,A
   1185          
   1186            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000024                ; Setup parameters for call to function fillAndSend
   \   000024   75..30       MOV       ?V2,#0x30
   \   000027   75..00       MOV       ?V3,#0x0
   \   00002A   78..         MOV       R0,#?V2
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7906         MOV       R1,#0x6
   \   000031   AC..         MOV       R4,?V0
   \   000033   AD..         MOV       R5,?V1
   \   000035   80..         SJMP      ??Subroutine129_0
   1187          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003                REQUIRE ??Subroutine130_0
   \   000003                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine132_0
   \   000003                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000006   7404         MOV       A,#0x4
   \   000008   22           RET
   1188          
   1189          /*********************************************************************
   1190           * @fn          ZDP_MgmtDirectJoinReq
   1191           *
   1192           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1193           *              function sends a unicast message.
   1194           *
   1195           * @param       dstAddr - destination address of the message
   1196           * @param       deviceAddr - 64 bit IEEE Address
   1197           * @param       SecurityEnable - Security Options
   1198           *
   1199           * @return      afStatus_t
   1200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   75..00       MOV       ?V3,#0x0
   \   000003   78..         MOV       R0,#?V2
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV       R1,#0x9
   \   00000A   EE           MOV       A,R6
   \   00000B   FC           MOV       R4,A
   \   00000C   EF           MOV       A,R7
   \   00000D   FD           MOV       R5,A
   \   00000E                REQUIRE ??Subroutine129_0
   \   00000E                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1201          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1202                                         uint8 *deviceAddr,
   1203                                         byte capInfo,
   1204                                         byte SecurityEnable )
   1205          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine49 & 0xFFFF
   1206            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1207            
   1208            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   1209            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \                     ??CrossCallReturnLabel_81:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   C8           XCH       A,R0
   \   00000C   2408         ADD       A,#0x8
   \   00000E   F582         MOV       DPL,A
   \   000010   E4           CLR       A
   \   000011   38           ADDC      A,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E5..         MOV       A,?V0
   \   000016   F0           MOVX      @DPTR,A
   1210          
   1211            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000017                ; Setup parameters for call to function fillAndSend
   \   000017   75..35       MOV       ?V2,#0x35
   \   00001A   80..         SJMP      ?Subroutine0
   1212          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   89..         MOV       ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000009   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00000C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   22           RET
   1213          
   1214          /*********************************************************************
   1215           * @fn          ZDP_MgmtPermitJoinReq
   1216           *
   1217           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1218           *
   1219           * @param       dstAddr - destination address of the message
   1220           * @param       duration - Permit duration
   1221           * @param       TcSignificance - Trust Center Significance
   1222           *
   1223           * @return      afStatus_t
   1224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1225          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1226                                            byte TcSignificance, byte SecurityEnable )
   1227          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1228            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1229            
   1230            // Build buffer
   1231            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000008   E9           MOV       A,R1
   \   000009   12....       LCALL     ?Subroutine19 & 0xFFFF
   1232            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_20:
   \   00000C   EC           MOV       A,R4
   \   00000D   F0           MOVX      @DPTR,A
   1233          
   1234            // Send the message
   1235            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1236                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV       ?V0,#0x36
   \   000011   02....       LJMP      ?Subroutine1 & 0xFFFF
   1237          }
   1238          
   1239          /*********************************************************************
   1240           * @fn          ZDP_MgmtLeaveReq
   1241           *
   1242           * @brief       This builds and send a Mgmt_Leave_req message.
   1243           *
   1244           * @param       dstAddr - destination address of the message
   1245           *              IEEEAddr - IEEE adddress of device that is removed
   1246           *              RemoveChildren - set to 1 to remove the children of the
   1247           *                                device as well. 0 otherwise.
   1248           *              Rejoin - set to 1 if the removed device should rejoin
   1249                                   afterwards. 0 otherwise.
   1250           *
   1251           * @return      afStatus_t
   1252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1253          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1254                           uint8 Rejoin, uint8 SecurityEnable )
   1255          
   1256          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine49 & 0xFFFF
   1257            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1258            
   1259            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   1260            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \                     ??CrossCallReturnLabel_82:
   \   000008   2408         ADD       A,#0x8
   \   00000A   F8           MOV       R0,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   3400         ADDC      A,#0x0
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   1261          
   1262            if ( RemoveChildren == TRUE )
   \   000016   04           INC       A
   \   000017   65..         XRL       A,?V0
   \   000019   7003         JNZ       ??ZDP_MgmtLeaveReq_0
   1263            {
   1264              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00001B   7440         MOV       A,#0x40
   \   00001D   F0           MOVX      @DPTR,A
   1265            }
   1266            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6401         XRL       A,#0x1
   \   000026   7008         JNZ       ??ZDP_MgmtLeaveReq_1
   1267            {
   1268              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   D2E7         SETB      0xE0 /* A   */.7
   \   00002F   F0           MOVX      @DPTR,A
   1269            }
   1270          
   1271            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000030                ; Setup parameters for call to function fillAndSend
   \   000030   75..34       MOV       ?V2,#0x34
   \   000033   02....       LJMP      ?Subroutine0 & 0xFFFF
   1272          }
   1273          
   1274          /*********************************************************************
   1275           * @fn          ZDP_MgmtNwkUpdateReq
   1276           *
   1277           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1278           *              function sends a unicast or broadcast message.
   1279           *
   1280           * @param       dstAddr - destination address of the message
   1281           * @param       ChannelMask - 32 bit address bit map
   1282           * @param       ScanDuration - length of time to spend scanning each channel
   1283           * @param       ScanCount - number of energy scans to be conducted
   1284           * @param       NwkUpdateId - NWk Update Id value
   1285           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1286           *                               bit set in its Node Descriptor
   1287           *
   1288           * @return      afStatus_t
   1289           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1290          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1291                                           uint32 ChannelMask,
   1292                                           uint8 ScanDuration,
   1293                                           uint8 ScanCount,
   1294                                           uint8 NwkUpdateId,
   1295                                           uint16 NwkManagerAddr )
   1296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
   \   00000B   8C..         MOV       ?V1,R4
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   1297            uint8 *pBuf = ZDP_TmpBuf;
   1298            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   75..05       MOV       ?V0,#0x5
   1299          
   1300            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000012                ; Setup parameters for call to function osal_buffer_uint32
   \   000012   740E         MOV       A,#0xe
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001A   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   1301          
   1302            *pBuf++ = ScanDuration;
   \   000020   EE           MOV       A,R6
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   F0           MOVX      @DPTR,A
   1303          
   1304            if ( ScanDuration <= 0x05 )
   \   000026   EA           MOV       A,R2
   \   000027   2402         ADD       A,#0x2
   \   000029   FC           MOV       R4,A
   \   00002A   E4           CLR       A
   \   00002B   3B           ADDC      A,R3
   \   00002C   FD           MOV       R5,A
   \   00002D   A3           INC       DPTR
   \   00002E   EE           MOV       A,R6
   \   00002F   C3           CLR       C
   \   000030   9406         SUBB      A,#0x6
   \   000032   5008         JNC       ??ZDP_MgmtNwkUpdateReq_0
   1305            {
   1306              // Request is to scan over channelMask
   1307              len += sizeof( uint8 );
   \   000034   75..06       MOV       ?V0,#0x6
   1308          
   1309              *pBuf++ = ScanCount;
   \   000037   E5..         MOV       A,?V1
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   8025         SJMP      ??ZDP_MgmtNwkUpdateReq_1
   1310            }
   1311            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003C   74FE         MOV       A,#-0x2
   \   00003E   6E           XRL       A,R6
   \   00003F   6005         JZ        ??ZDP_MgmtNwkUpdateReq_2
   \   000041   74FF         MOV       A,#-0x1
   \   000043   6E           XRL       A,R6
   \   000044   701B         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1312            {
   1313              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1314              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000046   75..06       MOV       ?V0,#0x6
   1315          
   1316              *pBuf++ = NwkUpdateId;
   \   000049   EF           MOV       A,R7
   \   00004A   F0           MOVX      @DPTR,A
   1317          
   1318              if ( ScanDuration == 0xFF )
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   6E           XRL       A,R6
   \   00004E   7011         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1319              {
   1320                len += sizeof( uint16 );
   \   000050   75..08       MOV       ?V0,#0x8
   \   000053   7412         MOV       A,#0x12
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ?Subroutine60 & 0xFFFF
   1321          
   1322                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1323                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1324              }
   1325            }
   \                     ??CrossCallReturnLabel_111:
   \   00005B   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00005E   EA           MOV       A,R2
   \   00005F   2404         ADD       A,#0x4
   1326          
   1327            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000061                ; Setup parameters for call to function fillAndSend
   \   000061   75..38       MOV       ?V2,#0x38
   \   000064   75..00       MOV       ?V3,#0x0
   \   000067   78..         MOV       R0,#?V2
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   A9..         MOV       R1,?V0
   \   00006E   02....       LJMP      ?Subroutine3 & 0xFFFF
   1328          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1329          
   1330          
   1331          /*********************************************************************
   1332           * Network Management Responses
   1333           */
   1334          
   1335          /*********************************************************************
   1336           * @fn          ZDP_MgmtNwkDiscRsp
   1337           *
   1338           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1339           *              function sends a unicast message.
   1340           *
   1341           * @param       dstAddr - destination address of the message
   1342           * @param       Status - message status (ZDP_SUCCESS or other)
   1343           * @param       NetworkCount - Total number of networks found
   1344           * @param       StartIndex - Starting index within the reporting network
   1345           *                           list
   1346           * @param       NetworkListCount - number of network lists included
   1347           *                                 in this message
   1348           * @param       NetworkList - List of network descriptors
   1349           * @param       SecurityEnable - Security Options
   1350           *
   1351           * @return      afStatus_t
   1352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine125_0
   \   000002                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1353          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1354                                      byte Status,
   1355                                      byte NetworkCount,
   1356                                      byte StartIndex,
   1357                                      byte NetworkListCount,
   1358                                      networkDesc_t *NetworkList,
   1359                                      byte SecurityEnable )
   1360          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V5,A
   1361            uint8 *buf;
   1362            uint8 *pBuf;
   1363            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1364            byte idx;
   1365          
   1366            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1367            
   1368            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   00001F   75F00C       MOV       B,#0xc
   \   000022   12....       LCALL     ?Subroutine73 & 0xFFFF
   1369            
   1370            buf = osal_mem_alloc( len+1 );
   1371            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_243:
   \   000025   7005         JNZ       ??ZDP_MgmtNwkDiscRsp_0
   1372            {
   1373              return afStatus_MEM_FAIL;
   \   000027   7910         MOV       R1,#0x10
   \   000029   02....       LJMP      ??CrossCallReturnLabel_29 & 0xFFFF
   1374            }
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   AE82         MOV       R6,DPL
   \   000033   AF83         MOV       R7,DPH
   1375          
   1376            pBuf = buf+1;
   1377          
   1378            *pBuf++ = Status;
   \   000035   85..82       MOV       DPL,?XSP + 0
   \   000038   85..83       MOV       DPH,?XSP + 1
   \   00003B   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00003E   F0           MOVX      @DPTR,A
   1379            *pBuf++ = NetworkCount;
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V7
   \   000042   F0           MOVX      @DPTR,A
   1380            *pBuf++ = StartIndex;
   \   000043   7414         MOV       A,#0x14
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   1381            *pBuf++ = NetworkListCount;
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E5..         MOV       A,?V5
   \   000056   F0           MOVX      @DPTR,A
   \   000057   EE           MOV       A,R6
   \   000058   2404         ADD       A,#0x4
   \   00005A   FE           MOV       R6,A
   \   00005B   5001         JNC       ??ZDP_MgmtNwkDiscRsp_1
   \   00005D   0F           INC       R7
   1382          
   1383            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   00005E   75..00       MOV       ?V4,#0x0
   \   000061   7416         MOV       A,#0x16
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000069   8014         SJMP      ??ZDP_MgmtNwkDiscRsp_2
   1384            {
   1385              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1386              pBuf += Z_EXTADDR_LEN;
   1387          
   1388              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1389              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1390              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1391              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   1392              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   1393          
   1394              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1395              {
   1396                *pBuf++ = TRUE;                         // Permit Joining
   1397              }
   1398              else
   1399              {
   1400                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   00006B   E4           CLR       A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   E8           MOV       A,R0
   \   00006E   FE           MOV       R6,A
   \   00006F   E9           MOV       A,R1
   \   000070   FF           MOV       R7,A
   1401              }
   1402          
   1403              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000071   E5..         MOV       A,?V0
   \   000073   2416         ADD       A,#0x16
   \   000075   F582         MOV       DPL,A
   \   000077   E4           CLR       A
   \   000078   35..         ADDC      A,?V1
   \   00007A   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00007D   05..         INC       ?V4
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   00007F   E5..         MOV       A,?V4
   \   000081   C3           CLR       C
   \   000082   95..         SUBB      A,?V5
   \   000084   507A         JNC       ??ZDP_MgmtNwkDiscRsp_5
   \   000086                ; Setup parameters for call to function sAddrExtCpy
   \   000086   E5..         MOV       A,?V0
   \   000088   240D         ADD       A,#0xd
   \   00008A   FC           MOV       R4,A
   \   00008B   E4           CLR       A
   \   00008C   35..         ADDC      A,?V1
   \   00008E   FD           MOV       R5,A
   \   00008F   EE           MOV       A,R6
   \   000090   FA           MOV       R2,A
   \   000091   EF           MOV       A,R7
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000096   85..82       MOV       DPL,?V0
   \   000099   85..83       MOV       DPH,?V1
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   EE           MOV       A,R6
   \   0000AA   2409         ADD       A,#0x9
   \   0000AC   F8           MOV       R0,A
   \   0000AD   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   0000B8   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000BB   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000BE   240A         ADD       A,#0xa
   \   0000C0   08           INC       R0
   \   0000C1   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0000C4   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   0000C7   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000CA   A3           INC       DPTR
   \   0000CB   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000CE   240C         ADD       A,#0xc
   \   0000D0   F8           MOV       R0,A
   \   0000D1   E4           CLR       A
   \   0000D2   3F           ADDC      A,R7
   \   0000D3   F9           MOV       R1,A
   \   0000D4   EE           MOV       A,R6
   \   0000D5   240B         ADD       A,#0xb
   \   0000D7   FA           MOV       R2,A
   \   0000D8   E4           CLR       A
   \   0000D9   3F           ADDC      A,R7
   \   0000DA   FB           MOV       R3,A
   \   0000DB   85..82       MOV       DPL,?V0
   \   0000DE   85..83       MOV       DPH,?V1
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   64FE         XRL       A,#0xfe
   \   0000ED   7003         JNZ       ??ZDP_MgmtNwkDiscRsp_6
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F4           CPL       A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000F2   8A82         MOV       DPL,R2
   \   0000F4   8B83         MOV       DPH,R3
   \   0000F6   7003         JNZ       $+5
   \   0000F8   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   0000FB   7401         MOV       A,#0x1
   \   0000FD   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1404            }
   1405          
   1406            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000100   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000103                ; Setup parameters for call to function fillAndSend
   \   000103   75..30       MOV       ?V0,#0x30
   \   000106   75..80       MOV       ?V1,#-0x80
   \   000109   78..         MOV       R0,#?V0
   \   00010B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010E   A9..         MOV       R1,?V6
   \   000110   7404         MOV       A,#0x4
   \   000112   12....       LCALL     ?XSTACK_DISP0_8
   \   000115   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000118   7403         MOV       A,#0x3
   \   00011A   12....       LCALL     ?XSTACK_DISP101_8
   \   00011D   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
   \   000123   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000126                REQUIRE ?Subroutine7
   \   000126                ; // Fall through to label ?Subroutine7
   1407          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7404         MOV       A,#0x4
   \   000002   02....       LJMP      ??Subroutine127_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E4           CLR       A
   \   000001   3F           ADDC      A,R7
   \   000002   F9           MOV       R1,A
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   A4           MUL       AB
   \   000001   2404         ADD       A,#0x4
   \   000003   F5..         MOV       ?V6,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                REQUIRE ??Subroutine133_0
   \   000005                ; // Fall through to label ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   C4           SWAP      A
   \   000002   54F0         ANL       A,#0xf0
   \   000004   FA           MOV       R2,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   4A           ORL       A,R2
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   EE           MOV       A,R6
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV       R2,?V2
   \   000004   AB..         MOV       R3,?V3
   \   000006   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine137_0
   \   000003                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   A3           INC       DPTR
   \   000007   A882         MOV       R0,DPL
   \   000009   A983         MOV       R1,DPH
   \   00000B                REQUIRE ??Subroutine139_0
   \   00000B                ; // Fall through to label ??Subroutine139_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine140_0
   \   000003                ; // Fall through to label ??Subroutine140_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EC           MOV       A,R4
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   8D..         MOV       ?V7,R5
   \   00000F   7415         MOV       A,#0x15
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000003   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000006   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   2401         ADD       A,#0x1
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3400         ADDC      A,#0x0
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000A   22           RET
   1408          
   1409          /*********************************************************************
   1410           * @fn          ZDP_MgmtLqiRsp
   1411           *
   1412           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1413           *              function sends a unicast message.
   1414           *
   1415           * @param       dstAddr - destination address of the message
   1416           * @param       Status - message status (ZDP_SUCCESS or other)
   1417           * @param       NeighborLqiEntries - Total number of entries found
   1418           * @param       StartIndex - Starting index within the reporting list
   1419           * @param       NeighborLqiCount - number of lists included
   1420           *                                 in this message
   1421           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1422           *                is the list to be sent, not the entire list
   1423           * @param       SecurityEnable - true if secure
   1424           *
   1425           * @return      ZStatus_t
   1426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1427          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1428                                    byte Status,
   1429                                    byte NeighborLqiEntries,
   1430                                    byte StartIndex,
   1431                                    byte NeighborLqiCount,
   1432                                    ZDP_MgmtLqiItem_t* NeighborList,
   1433                                    byte SecurityEnable )
   1434          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   ED           MOV       A,R5
   \   000020   F0           MOVX      @DPTR,A
   1435            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000021   7416         MOV       A,#0x16
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ?Subroutine57 & 0xFFFF
   1436            uint8 *buf, *pBuf;
   1437            byte len, x;
   1438          
   1439            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1440            
   1441            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_106:
   \   000029   EC           MOV       A,R4
   \   00002A   6026         JZ        ??ZDP_MgmtLqiRsp_0
   1442            {
   1443              ZDP_TmpBuf[0] = Status;
   \   00002C   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00002F   EC           MOV       A,R4
   \   000030   F0           MOVX      @DPTR,A
   1444              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000031                ; Setup parameters for call to function fillAndSend
   \   000031   75..31       MOV       ?V0,#0x31
   \   000034   75..80       MOV       ?V1,#-0x80
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7901         MOV       R1,#0x1
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine53 & 0xFFFF
   1445            }
   \                     ??CrossCallReturnLabel_90:
   \   000046   12....       LCALL     ?XSTACK_DISP101_8
   \   000049   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004F   02....       LJMP      ??CrossCallReturnLabel_30 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000052   7415         MOV       A,#0x15
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V5,A
   1446          
   1447            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1448            //  neighbor LQI data.
   1449            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00005A   75F016       MOV       B,#0x16
   \   00005D   12....       LCALL     ?Subroutine73 & 0xFFFF
   1450          
   1451            buf = osal_mem_alloc( len+1 );
   1452            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_244:
   \   000060   7005         JNZ       ??ZDP_MgmtLqiRsp_1
   1453            {
   1454              return afStatus_MEM_FAIL;
   \   000062   7910         MOV       R1,#0x10
   \   000064   02....       LJMP      ??CrossCallReturnLabel_30 & 0xFFFF
   1455            }
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000067   8A82         MOV       DPL,R2
   \   000069   8B83         MOV       DPH,R3
   \   00006B   A3           INC       DPTR
   \   00006C   8582..       MOV       ?V0,DPL
   \   00006F   8583..       MOV       ?V1,DPH
   1456          
   1457            pBuf = buf+1;
   1458          
   1459            *pBuf++ = Status;
   \   000072   E4           CLR       A
   \   000073   F0           MOVX      @DPTR,A
   1460            *pBuf++ = NeighborLqiEntries;
   \   000074   04           INC       A
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00007B   F0           MOVX      @DPTR,A
   1461            *pBuf++ = StartIndex;
   \   00007C   7414         MOV       A,#0x14
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000084   A3           INC       DPTR
   \   000085   12....       LCALL     ?Subroutine26 & 0xFFFF
   1462            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_36:
   \   000088   E5..         MOV       A,?V5
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   E5..         MOV       A,?V0
   \   00008D   2404         ADD       A,#0x4
   \   00008F   F5..         MOV       ?V0,A
   \   000091   5002         JNC       ??ZDP_MgmtLqiRsp_2
   \   000093   05..         INC       ?V1
   1463          
   1464            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000095   75..00       MOV       ?V4,#0x0
   \   000098   02....       LJMP      ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1465            {
   1466              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   00009B                ; Setup parameters for call to function sAddrExtCpy
   \   00009B   EE           MOV       A,R6
   \   00009C   2402         ADD       A,#0x2
   \   00009E   FC           MOV       R4,A
   \   00009F   E4           CLR       A
   \   0000A0   3F           ADDC      A,R7
   \   0000A1   FD           MOV       R5,A
   \   0000A2   AA..         MOV       R2,?V0
   \   0000A4   AB..         MOV       R3,?V1
   \   0000A6   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1467              pBuf += Z_EXTADDR_LEN;
   1468          
   1469              // EXTADDR
   1470              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000A9                ; Setup parameters for call to function sAddrExtCpy
   \   0000A9   EE           MOV       A,R6
   \   0000AA   240A         ADD       A,#0xa
   \   0000AC   FC           MOV       R4,A
   \   0000AD   E4           CLR       A
   \   0000AE   3F           ADDC      A,R7
   \   0000AF   FD           MOV       R5,A
   \   0000B0   E5..         MOV       A,?V0
   \   0000B2   2408         ADD       A,#0x8
   \   0000B4   FA           MOV       R2,A
   \   0000B5   E4           CLR       A
   \   0000B6   35..         ADDC      A,?V1
   \   0000B8   FB           MOV       R3,A
   \   0000B9   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000BC   8A..         MOV       ?V0,R2
   \   0000BE   8B..         MOV       ?V1,R3
   \   0000C0   A8..         MOV       R0,?V0
   \   0000C2   A9..         MOV       R1,?V1
   1471          
   1472              // NWKADDR
   1473              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000C4   EE           MOV       A,R6
   \   0000C5   2412         ADD       A,#0x12
   \   0000C7   FC           MOV       R4,A
   \   0000C8   E4           CLR       A
   \   0000C9   3F           ADDC      A,R7
   \   0000CA   FD           MOV       R5,A
   \   0000CB   8C82         MOV       DPL,R4
   \   0000CD   F583         MOV       DPH,A
   \   0000CF   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   1474              *pBuf++ = HI_UINT16( list->nwkAddr );
   1475          
   1476              // DEVICETYPE
   1477              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_176:
   \   0000D2   E4           CLR       A
   \   0000D3   39           ADDC      A,R1
   \   0000D4   FB           MOV       R3,A
   \   0000D5   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000D8   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   1478          
   1479              // RXONIDLE
   1480              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_254:
   \   0000DB   EE           MOV       A,R6
   \   0000DC   2415         ADD       A,#0x15
   \   0000DE   F582         MOV       DPL,A
   \   0000E0   E4           CLR       A
   \   0000E1   3F           ADDC      A,R7
   \   0000E2   F583         MOV       DPH,A
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   33           RLC       A
   \   0000E6   33           RLC       A
   \   0000E7   54FC         ANL       A,#0xfc
   \   0000E9   FC           MOV       R4,A
   \   0000EA   8A82         MOV       DPL,R2
   \   0000EC   8B83         MOV       DPH,R3
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   4C           ORL       A,R4
   \   0000F0   F0           MOVX      @DPTR,A
   1481          
   1482              // RELATIONSHIP
   1483              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000F1   EE           MOV       A,R6
   \   0000F2   2416         ADD       A,#0x16
   \   0000F4   F582         MOV       DPL,A
   \   0000F6   E4           CLR       A
   \   0000F7   3F           ADDC      A,R7
   \   0000F8   F583         MOV       DPH,A
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   C4           SWAP      A
   \   0000FC   54F0         ANL       A,#0xf0
   \   0000FE   FC           MOV       R4,A
   \   0000FF   8A82         MOV       DPL,R2
   \   000101   8B83         MOV       DPH,R3
   \   000103   E0           MOVX      A,@DPTR
   \   000104   4C           ORL       A,R4
   \   000105   F0           MOVX      @DPTR,A
   1484          
   1485              // PERMITJOINING
   1486              *pBuf++ = (uint8)(list->permit);
   \   000106   EE           MOV       A,R6
   \   000107   2417         ADD       A,#0x17
   \   000109   F582         MOV       DPL,A
   \   00010B   E4           CLR       A
   \   00010C   3F           ADDC      A,R7
   \   00010D   F583         MOV       DPH,A
   \   00010F   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   F0           MOVX      @DPTR,A
   1487          
   1488              // DEPTH
   1489              *pBuf++ = list->depth;
   \   000116   EE           MOV       A,R6
   \   000117   2418         ADD       A,#0x18
   \   000119   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00011C   F0           MOVX      @DPTR,A
   1490          
   1491              // LQI
   1492              *pBuf++ = list->lqi;
   \   00011D   EE           MOV       A,R6
   \   00011E   2419         ADD       A,#0x19
   \   000120   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000123   A3           INC       DPTR
   \   000124   F0           MOVX      @DPTR,A
   \   000125   E8           MOV       A,R0
   \   000126   2406         ADD       A,#0x6
   \   000128   F5..         MOV       ?V0,A
   \   00012A   E4           CLR       A
   \   00012B   39           ADDC      A,R1
   \   00012C   F5..         MOV       ?V1,A
   1493          
   1494              list++; // next list entry
   \   00012E   EE           MOV       A,R6
   \   00012F   241A         ADD       A,#0x1a
   \   000131   FE           MOV       R6,A
   \   000132   5001         JNC       ??ZDP_MgmtLqiRsp_5
   \   000134   0F           INC       R7
   1495            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000135   05..         INC       ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000137   E5..         MOV       A,?V4
   \   000139   C3           CLR       C
   \   00013A   95..         SUBB      A,?V5
   \   00013C   5003         JNC       $+5
   \   00013E   02....       LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1496          
   1497            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000141   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000144                ; Setup parameters for call to function fillAndSend
   \   000144   75..31       MOV       ?V0,#0x31
   \   000147   75..80       MOV       ?V1,#-0x80
   \   00014A   78..         MOV       R0,#?V0
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014F   A9..         MOV       R1,?V6
   \   000151   7404         MOV       A,#0x4
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000159   12....       LCALL     ?XSTACK_DISP101_8
   \   00015C   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00015F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000162   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000165   02....       LJMP      ?Subroutine7 & 0xFFFF
   1498          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   7402         MOV       A,#0x2
   \   000007   22           RET
   1499          
   1500          /*********************************************************************
   1501           * @fn          ZDP_MgmtRtgRsp
   1502           *
   1503           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1504           *              function sends a unicast message.
   1505           *
   1506           * @param       dstAddr - destination address of the message
   1507           * @param       Status - message status (ZDP_SUCCESS or other)
   1508           * @param       RoutingTableEntries - Total number of entries
   1509           * @param       StartIndex - Starting index within the reporting list
   1510           * @param       RoutingTableListCount - number of entries included
   1511           *                                      in this message
   1512           * @param       RoutingTableList - List of Routing Table entries
   1513           * @param       SecurityEnable - true to enable security for this message
   1514           *
   1515           * @return      ZStatus_t
   1516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1517          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1518                                      byte Status,
   1519                                      byte RoutingTableEntries,
   1520                                      byte StartIndex,
   1521                                      byte RoutingListCount,
   1522                                      rtgItem_t *RoutingTableList,
   1523                                      byte SecurityEnable )
   1524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   7403         MOV       A,#0x3
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000019   7401         MOV       A,#0x1
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   EC           MOV       A,R4
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   ED           MOV       A,R5
   \   000021   85..82       MOV       DPL,?XSP + 0
   \   000024   85..83       MOV       DPH,?XSP + 1
   \   000027   F0           MOVX      @DPTR,A
   \   000028   7416         MOV       A,#0x16
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V0,A
   1525            uint8 *buf;
   1526            uint8 *pBuf;
   1527            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1528            byte len = 1 + 1 + 1 + 1;
   1529            byte x;
   1530          
   1531            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1532            
   1533            // Add an array for Routing List data
   1534            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000030   75F005       MOV       B,#0x5
   \   000033   A4           MUL       AB
   \   000034   2404         ADD       A,#0x4
   \   000036   F5..         MOV       ?V1,A
   1535          
   1536            buf = osal_mem_alloc( (short)(len+1) );
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00003B   8A..         MOV       ?V2,R2
   \   00003D   8B..         MOV       ?V3,R3
   \   00003F   AE..         MOV       R6,?V2
   \   000041   AF..         MOV       R7,?V3
   1537            if ( buf == NULL )
   \   000043   EA           MOV       A,R2
   \   000044   4F           ORL       A,R7
   \   000045   7005         JNZ       ??ZDP_MgmtRtgRsp_0
   1538            {
   1539              return afStatus_MEM_FAIL;
   \   000047   7910         MOV       R1,#0x10
   \   000049   02....       LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1540            }
   1541          
   1542            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00004C   8A82         MOV       DPL,R2
   \   00004E   8B83         MOV       DPH,R3
   \   000050   A3           INC       DPTR
   \   000051   A882         MOV       R0,DPL
   \   000053   A983         MOV       R1,DPH
   \   000055   E9           MOV       A,R1
   \   000056   FD           MOV       R5,A
   1543          
   1544            *pBuf++ = Status;
   \   000057   7401         MOV       A,#0x1
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00005F   12....       LCALL     ?Subroutine23 & 0xFFFF
   1545            *pBuf++ = RoutingTableEntries;
   \                     ??CrossCallReturnLabel_28:
   \   000062   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000065   A3           INC       DPTR
   \   000066   F0           MOVX      @DPTR,A
   1546            *pBuf++ = StartIndex;
   \   000067   7415         MOV       A,#0x15
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   00006F   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   1547            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_181:
   \   000072   E5..         MOV       A,?V0
   \   000074   F0           MOVX      @DPTR,A
   \   000075   E8           MOV       A,R0
   \   000076   2404         ADD       A,#0x4
   \   000078   FC           MOV       R4,A
   \   000079   5001         JNC       ??ZDP_MgmtRtgRsp_2
   \   00007B   0D           INC       R5
   1548          
   1549            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   00007C   7A00         MOV       R2,#0x0
   \   00007E   7417         MOV       A,#0x17
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000086   804B         SJMP      ??ZDP_MgmtRtgRsp_3
   1550            {
   1551              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000088   85..82       MOV       DPL,?V2
   \   00008B   85..83       MOV       DPH,?V3
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   8C82         MOV       DPL,R4
   \   000091   8D83         MOV       DPH,R5
   \   000093   12....       LCALL     ?Subroutine33 & 0xFFFF
   1552              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_52:
   \   000096   8C82         MOV       DPL,R4
   \   000098   8D83         MOV       DPH,R5
   \   00009A   A3           INC       DPTR
   \   00009B   12....       LCALL     ?Subroutine100 & 0xFFFF
   1553              *pBuf++ = RoutingTableList->status;
   \                     ??CrossCallReturnLabel_159:
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   8C82         MOV       DPL,R4
   \   0000A5   8D83         MOV       DPH,R5
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   F0           MOVX      @DPTR,A
   1554              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   0000AA   E5..         MOV       A,?V2
   \   0000AC   2402         ADD       A,#0x2
   \   0000AE   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000B1   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000B4   F0           MOVX      @DPTR,A
   1555              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0000B5   85..82       MOV       DPL,?V6
   \   0000B8   85..83       MOV       DPH,?V7
   \   0000BB   A3           INC       DPTR
   \   0000BC   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000BF   A3           INC       DPTR
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   EC           MOV       A,R4
   \   0000C2   2405         ADD       A,#0x5
   \   0000C4   FC           MOV       R4,A
   \   0000C5   5001         JNC       ??ZDP_MgmtRtgRsp_5
   \   0000C7   0D           INC       R5
   1556              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000C8   E5..         MOV       A,?V2
   \   0000CA   2406         ADD       A,#0x6
   \   0000CC   F5..         MOV       ?V2,A
   \   0000CE   5002         JNC       ??ZDP_MgmtRtgRsp_6
   \   0000D0   05..         INC       ?V3
   1557            }
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000D2   0A           INC       R2
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000D3   EA           MOV       A,R2
   \   0000D4   C3           CLR       C
   \   0000D5   95..         SUBB      A,?V0
   \   0000D7   40AF         JC        ??ZDP_MgmtRtgRsp_4
   1558          
   1559            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000D9   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0000DC                ; Setup parameters for call to function fillAndSend
   \   0000DC   75..32       MOV       ?V2,#0x32
   \   0000DF   75..80       MOV       ?V3,#-0x80
   \   0000E2   78..         MOV       R0,#?V2
   \   0000E4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E7   A9..         MOV       R1,?V1
   \   0000E9   7405         MOV       A,#0x5
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000F1   7404         MOV       A,#0x4
   \   0000F3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F6   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FC   E9           MOV       A,R1
   \   0000FD   F5..         MOV       ?V0,A
   \   0000FF                ; Setup parameters for call to function osal_mem_free
   \   0000FF   EE           MOV       A,R6
   \   000100   FA           MOV       R2,A
   \   000101   EF           MOV       A,R7
   \   000102   FB           MOV       R3,A
   \   000103   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000106   A9..         MOV       R1,?V0
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000108   7405         MOV       A,#0x5
   \   00010A   02....       LJMP      ??Subroutine127_0 & 0xFFFF
   1560          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   22           RET
   1561          
   1562          /*********************************************************************
   1563           * @fn          ZDP_MgmtBindRsp
   1564           *
   1565           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1566           *              function sends a unicast message.
   1567           *
   1568           * @param       dstAddr - destination address of the message
   1569           * @param       Status - message status (ZDP_SUCCESS or other)
   1570           * @param       BindingTableEntries - Total number of entries
   1571           * @param       StartIndex - Starting index within the reporting list
   1572           * @param       BindingTableListCount - number of entries included
   1573           *                                 in this message
   1574           * @param       BindingTableList - List of Binding Table entries
   1575           * @param       SecurityEnable - Security Options
   1576           *
   1577           * @return      ZStatus_t
   1578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1579          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1580                                      byte Status,
   1581                                      byte BindingTableEntries,
   1582                                      byte StartIndex,
   1583                                      byte BindingTableListCount,
   1584                                      apsBindingItem_t *BindingTableList,
   1585                                      byte SecurityEnable )
   1586          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V6,A
   1587            uint8 *buf;
   1588            uint8 *pBuf;
   1589            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1590            uint8 len;    // Actual length varies due to different addrMode
   1591            uint8 x;
   1592            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1593            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1594          
   1595            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1596            
   1597            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1598            maxLen = 1 + 1 + 1 + 1;
   1599            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1600            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   75F015       MOV       B,#0x15
   \   000022   A4           MUL       AB
   \   000023   2404         ADD       A,#0x4
   \   000025   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   1601          
   1602            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_245:
   \   000028   7005         JNZ       ??ZDP_MgmtBindRsp_0
   1603            {
   1604              return afStatus_MEM_FAIL;
   \   00002A   7910         MOV       R1,#0x10
   \   00002C   02....       LJMP      ??CrossCallReturnLabel_31 & 0xFFFF
   1605            }
   \                     ??ZDP_MgmtBindRsp_0:
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   A3           INC       DPTR
   \   000034   AA82         MOV       R2,DPL
   \   000036   AB83         MOV       R3,DPH
   1606          
   1607            pBuf = buf+1;
   1608          
   1609            *pBuf++ = Status;
   \   000038   12....       LCALL     ?Subroutine36 & 0xFFFF
   1610            *pBuf++ = BindingTableEntries;
   \                     ??CrossCallReturnLabel_257:
   \   00003B   A3           INC       DPTR
   \   00003C   E5..         MOV       A,?V7
   \   00003E   F0           MOVX      @DPTR,A
   1611            *pBuf++ = StartIndex;
   \   00003F   7414         MOV       A,#0x14
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000047   12....       LCALL     ?Subroutine34 & 0xFFFF
   1612            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_53:
   \   00004A   E5..         MOV       A,?V6
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   EA           MOV       A,R2
   \   00004E   2404         ADD       A,#0x4
   \   000050   FA           MOV       R2,A
   \   000051   5001         JNC       ??ZDP_MgmtBindRsp_1
   \   000053   0B           INC       R3
   1613          
   1614            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1615            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1616            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1617            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1618          
   1619            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   000054   75..04       MOV       ?V0,#0x4
   1620            for ( x = 0; x < BindingTableListCount; x++ )
   \   000057   75..00       MOV       ?V1,#0x0
   \   00005A   7416         MOV       A,#0x16
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000062   8015         SJMP      ??ZDP_MgmtBindRsp_2
   1621            {
   1622              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1623              *pBuf++ = BindingTableList->srcEP;
   1624          
   1625              // Cluster ID
   1626              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1627              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1628          
   1629              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1630              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1631              {
   1632                len += extZdpBindEntrySize;
   1633                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1634                *pBuf++ = BindingTableList->dstEP;
   1635              }
   1636              else
   1637              {
   1638                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   000064   740E         MOV       A,#0xe
   \   000066   25..         ADD       A,?V0
   \   000068   F5..         MOV       ?V0,A
   1639                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   00006A   12....       LCALL     ?Subroutine8 & 0xFFFF
   1640                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1641              }
   \                     ??CrossCallReturnLabel_175:
   \   00006D   5001         JNC       ??ZDP_MgmtBindRsp_4
   \   00006F   0B           INC       R3
   1642              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   000070   EE           MOV       A,R6
   \   000071   2415         ADD       A,#0x15
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??ZDP_MgmtBindRsp_5
   \   000076   0F           INC       R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   000077   05..         INC       ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   000079   E5..         MOV       A,?V1
   \   00007B   C3           CLR       C
   \   00007C   95..         SUBB      A,?V6
   \   00007E   505F         JNC       ??ZDP_MgmtBindRsp_6
   \   000080                ; Setup parameters for call to function sAddrExtCpy
   \   000080   EE           MOV       A,R6
   \   000081   FC           MOV       R4,A
   \   000082   EF           MOV       A,R7
   \   000083   FD           MOV       R5,A
   \   000084   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000087   8E82         MOV       DPL,R6
   \   000089   8F83         MOV       DPH,R7
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000096   EE           MOV       A,R6
   \   000097   2409         ADD       A,#0x9
   \   000099   FC           MOV       R4,A
   \   00009A   E4           CLR       A
   \   00009B   3F           ADDC      A,R7
   \   00009C   FD           MOV       R5,A
   \   00009D   8C82         MOV       DPL,R4
   \   00009F   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000A2   A3           INC       DPTR
   \   0000A3   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000A6   8A82         MOV       DPL,R2
   \   0000A8   8B83         MOV       DPH,R3
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   F0           MOVX      @DPTR,A
   \   0000AD   EE           MOV       A,R6
   \   0000AE   2413         ADD       A,#0x13
   \   0000B0   F8           MOV       R0,A
   \   0000B1   E4           CLR       A
   \   0000B2   3F           ADDC      A,R7
   \   0000B3   F9           MOV       R1,A
   \   0000B4   8882         MOV       DPL,R0
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000BB   5001         JNC       ??ZDP_MgmtBindRsp_7
   \   0000BD   0B           INC       R3
   \                     ??ZDP_MgmtBindRsp_7:
   \   0000BE   EE           MOV       A,R6
   \   0000BF   240B         ADD       A,#0xb
   \   0000C1   FC           MOV       R4,A
   \   0000C2   E4           CLR       A
   \   0000C3   3F           ADDC      A,R7
   \   0000C4   FD           MOV       R5,A
   \   0000C5   8882         MOV       DPL,R0
   \   0000C7   8983         MOV       DPH,R1
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   6403         XRL       A,#0x3
   \   0000CC   7096         JNZ       ??ZDP_MgmtBindRsp_3
   \   0000CE   7415         MOV       A,#0x15
   \   0000D0   25..         ADD       A,?V0
   \   0000D2   F5..         MOV       ?V0,A
   \   0000D4                ; Setup parameters for call to function sAddrExtCpy
   \   0000D4   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000D7   12....       LCALL     ?Subroutine83 & 0xFFFF
   1643            }
   \                     ??CrossCallReturnLabel_140:
   \   0000DA   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   0000DD   8091         SJMP      ??ZDP_MgmtBindRsp_4
   1644          
   1645            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000DF   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   0000E2                ; Setup parameters for call to function fillAndSend
   \   0000E2   75..33       MOV       ?V4,#0x33
   \   0000E5   75..80       MOV       ?V5,#-0x80
   \   0000E8   78..         MOV       R0,#?V4
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   A9..         MOV       R1,?V0
   \   0000EF   7404         MOV       A,#0x4
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000F7   7403         MOV       A,#0x3
   \   0000F9   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FC   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000102   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000105   02....       LJMP      ?Subroutine7 & 0xFFFF
   1646          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1647          
   1648          /*********************************************************************
   1649           * @fn          ZDP_MgmtNwkUpdateNotify
   1650           *
   1651           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1652           *              function sends a unicast message.
   1653           *
   1654           * @param       dstAddr - destination address of the message
   1655           * @param       status - message status (ZDP_SUCCESS or other)
   1656           * @param       scannedChannels - List of channels scanned by the request
   1657           * @param       totalTransmissions - Total transmissions
   1658           * @param       transmissionFailures - Sum of transmission failures
   1659           * @param       listCount - Number of records contained in the energyValues list
   1660           * @param       energyValues - List of descriptors, one for each of ListCount,
   1661           *                             of the enegry detect descriptors
   1662           * @param       txOptions - Transmit options
   1663           * @param       securityEnable - Security options
   1664           *
   1665           * @return      afStatus_t
   1666           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1667          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1668                                              uint8 status, uint32 scannedChannels,
   1669                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1670                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1671                                              uint8 securityEnable )
   1672          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00001A   8C..         MOV       ?V3,R4
   \   00001C   ED           MOV       A,R5
   \   00001D   FE           MOV       R6,A
   1673            uint8 *buf;
   1674            uint8 *pBuf;
   1675            uint8 len;
   1676          
   1677            (void)securityEnable;  // Intentionally unreferenced parameter
   1678            
   1679            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1680            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001E   740A         MOV       A,#0xa
   \   000020   2D           ADD       A,R5
   \   000021   FF           MOV       R7,A
   1681          
   1682            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000025   8A..         MOV       ?V4,R2
   \   000027   8B..         MOV       ?V5,R3
   1683            if ( buf == NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   4B           ORL       A,R3
   \   00002B   7005         JNZ       ??ZDP_MgmtNwkUpdateNotify_0
   1684            {
   1685              return afStatus_MEM_FAIL;
   \   00002D   7910         MOV       R1,#0x10
   \   00002F   02....       LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1686            }
   1687          
   1688            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   8582..       MOV       ?V6,DPL
   \   00003A   8583..       MOV       ?V7,DPH
   1689          
   1690            *pBuf++ = status;
   \   00003D   E5..         MOV       A,?V3
   \   00003F   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   1691          
   1692            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_202:
   \   000042                ; Setup parameters for call to function osal_buffer_uint32
   \   000042   7413         MOV       A,#0x13
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004A   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00004D   7404         MOV       A,#0x4
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   7417         MOV       A,#0x17
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine61 & 0xFFFF
   1693          
   1694            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_112:
   \   00005A   F0           MOVX      @DPTR,A
   1695            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005B   E9           MOV       A,R1
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   7419         MOV       A,#0x19
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine61 & 0xFFFF
   1696          
   1697            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_113:
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   12....       LCALL     ?Subroutine30 & 0xFFFF
   1698            *pBuf++ = HI_UINT16( transmissionFailures );
   1699          
   1700            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_40:
   \   00006B   EE           MOV       A,R6
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   F0           MOVX      @DPTR,A
   1701          
   1702            if ( listCount > 0 )
   \   000075   601C         JZ        ??ZDP_MgmtNwkUpdateNotify_2
   1703              osal_memcpy( pBuf, energyValues, listCount );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   741B         MOV       A,#0x1b
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000082   EE           MOV       A,R6
   \   000083   FC           MOV       R4,A
   \   000084   7D00         MOV       R5,#0x0
   \   000086   EA           MOV       A,R2
   \   000087   2405         ADD       A,#0x5
   \   000089   FA           MOV       R2,A
   \   00008A   5001         JNC       ??ZDP_MgmtNwkUpdateNotify_3
   \   00008C   0B           INC       R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   00008D   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   1704          
   1705            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000093   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000096   E5..         MOV       A,?V6
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   E5..         MOV       A,?V7
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   741D         MOV       A,#0x1d
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7                ; Setup parameters for call to function fillAndSend
   \   0000A7   75..38       MOV       ?V0,#0x38
   \   0000AA   75..80       MOV       ?V1,#-0x80
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   EF           MOV       A,R7
   \   0000B3   F9           MOV       R1,A
   \   0000B4   7403         MOV       A,#0x3
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000BC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BF   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   0000C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C5   E9           MOV       A,R1
   \   0000C6   FF           MOV       R7,A
   \   0000C7                ; Setup parameters for call to function osal_mem_free
   \   0000C7   AA..         MOV       R2,?V4
   \   0000C9   AB..         MOV       R3,?V5
   \   0000CB   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000CE   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000D1   E4           CLR       A
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   EF           MOV       A,R7
   \   0000D4   F9           MOV       R1,A
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000D5   02....       LJMP      ?Subroutine2 & 0xFFFF
   1706          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   22           RET
   1707          
   1708          /*********************************************************************
   1709           * Functions to register for ZDO Over-the-air messages
   1710           */
   1711          
   1712          /*********************************************************************
   1713           * @fn          ZDO_RegisterForZDOMsg
   1714           *
   1715           * @brief       Call this function to register of an incoming over
   1716           *              the air ZDO message - probably a response message
   1717           *              but requests can also be received.
   1718           *              Messages are delivered to the task with ZDO_CB_MSG
   1719           *              as the message ID.
   1720           *
   1721           * @param       taskID - Where you would like the message delivered
   1722           * @param       clusterID - What message?
   1723           *
   1724           * @return      ZSuccess - successful, ZMemError if not
   1725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1726          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1727          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   1728            ZDO_MsgCB_t *pList;
   1729            ZDO_MsgCB_t *pLast;
   1730            ZDO_MsgCB_t *pNew;
   1731          
   1732            // Look for duplicate
   1733            pList = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   8023         SJMP      ??ZDO_RegisterForZDOMsg_0
   1734            while ( pList )
   1735            {
   1736              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   65..         XRL       A,?V2
   \   000019   7010         JNZ       ??ZDO_RegisterForZDOMsg_2
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6E           XRL       A,R6
   \   000024   7003         JNZ       ??ZDO_RegisterForZDOMsg_3
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6F           XRL       A,R7
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000029   604E         JZ        ??CrossCallReturnLabel_294
   1737                return ( ZSuccess );
   1738              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   00002B   88..         MOV       ?V0,R0
   \   00002D   89..         MOV       ?V1,R1
   1739              pList = (ZDO_MsgCB_t *)pList->next;
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   1740            }
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000033   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000036   70D8         JNZ       ??ZDO_RegisterForZDOMsg_1
   1741          
   1742            // Add to the list
   1743            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   7A05         MOV       R2,#0x5
   \   00003A   7B00         MOV       R3,#0x0
   \   00003C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003F   8A..         MOV       ?V4,R2
   \   000041   8B..         MOV       ?V5,R3
   \   000043   A8..         MOV       R0,?V4
   \   000045   A9..         MOV       R1,?V5
   1744            if ( pNew )
   \   000047   EA           MOV       A,R2
   \   000048   49           ORL       A,R1
   \   000049   6032         JZ        ??ZDO_RegisterForZDOMsg_4
   1745            {
   1746              pNew->taskID = taskID;
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E5..         MOV       A,?V2
   \   000053   12....       LCALL     ?Subroutine34 & 0xFFFF
   1747              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_54:
   \   000056   EE           MOV       A,R6
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   EF           MOV       A,R7
   \   00005A   F0           MOVX      @DPTR,A
   1748              pNew->next = NULL;
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   E4           CLR       A
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   F0           MOVX      @DPTR,A
   1749              if ( zdoMsgCBs )
   \   000063   90....       MOV       DPTR,#zdoMsgCBs
   \   000066   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000069   6008         JZ        ??ZDO_RegisterForZDOMsg_5
   1750              {
   1751                pLast->next = pNew;
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   8003         SJMP      ??ZDO_RegisterForZDOMsg_6
   1752              }
   1753              else
   1754                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000073   90....       MOV       DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   000076   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   1755              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_294:
   \   000079   7900         MOV       R1,#0x0
   \   00007B   8002         SJMP      ??ZDO_RegisterForZDOMsg_7
   1756            }
   1757            else
   1758              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007D   7910         MOV       R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   00007F   02....       LJMP      ??Subroutine111_0 & 0xFFFF
   1759          }
   1760          
   1761          /*********************************************************************
   1762           * @fn          ZDO_RemoveRegisteredCB
   1763           *
   1764           * @brief       Call this function if you don't want to receive the
   1765           *              incoming message.
   1766           *
   1767           * @param       taskID - Where the messages are being delivered.
   1768           * @param       clusterID - What message?
   1769           *
   1770           * @return      ZSuccess - successful, ZFailure if not found
   1771           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1772          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1773          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1774            ZDO_MsgCB_t *pList;
   1775            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV       R4,#0x0
   \   000009   7D00         MOV       R5,#0x0
   1776          
   1777            pList = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP      ??ZDO_RemoveRegisteredCB_0
   1778            while ( pList )
   1779            {
   1780              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1781              {
   1782                if ( pLast )
   1783                {
   1784                  // remove this one from the linked list
   1785                  pLast->next = pList->next;
   1786                }
   1787                else if ( pList->next )
   1788                {
   1789                  // remove the first one from the linked list
   1790                  zdoMsgCBs = pList->next;
   1791                }
   1792                else
   1793                {
   1794                  // remove the only item from the list
   1795                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1796                }
   1797                osal_mem_free( pList );
   1798                return ( ZSuccess );
   1799              }
   1800              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   E9           MOV       A,R1
   \   000013   FD           MOV       R5,A
   1801              pList = pList->next;
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00001B   6047         JZ        ??ZDO_RemoveRegisteredCB_2
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6E           XRL       A,R6
   \   000025   70E9         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000027   8882         MOV       DPL,R0
   \   000029   8983         MOV       DPH,R1
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6A           XRL       A,R2
   \   000030   7003         JNZ       ??ZDO_RemoveRegisteredCB_3
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6B           XRL       A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000035   70D9         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000037   8882         MOV       DPL,R0
   \   000039   8983         MOV       DPH,R1
   \   00003B   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00003E   EC           MOV       A,R4
   \   00003F   4D           ORL       A,R5
   \   000040   6006         JZ        ??ZDO_RemoveRegisteredCB_4
   \   000042   8C82         MOV       DPL,R4
   \   000044   8D83         MOV       DPH,R5
   \   000046   8007         SJMP      ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000048   EA           MOV       A,R2
   \   000049   4B           ORL       A,R3
   \   00004A   90....       MOV       DPTR,#zdoMsgCBs
   \   00004D   6006         JZ        ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   00004F   EA           MOV       A,R2
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   EB           MOV       A,R3
   \   000053   8003         SJMP      ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000055   E4           CLR       A
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000058   F0           MOVX      @DPTR,A
   \   000059                ; Setup parameters for call to function osal_mem_free
   \   000059   E8           MOV       A,R0
   \   00005A   FA           MOV       R2,A
   \   00005B   E9           MOV       A,R1
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000060   7900         MOV       R1,#0x0
   \   000062   8002         SJMP      ??ZDO_RemoveRegisteredCB_8
   1802            }
   1803          
   1804            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000064   7901         MOV       R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000066   02....       LJMP      ?Subroutine4 & 0xFFFF
   1805          }
   1806          
   1807          /*********************************************************************
   1808           * @fn          ZDO_SendMsgCBs
   1809           *
   1810           * @brief       This function sends messages to registered tasks.
   1811           *              Local to ZDO and shouldn't be called outside of ZDO.
   1812           *
   1813           * @param       inMsg - incoming message
   1814           *
   1815           * @return      TRUE if sent to at least 1 task, FALSE if not
   1816           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   7D00         MOV       R5,#0x0
   \   000002                REQUIRE ??Subroutine122_0
   \   000002                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1817          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1818          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   1819            uint8 ret = FALSE;
   \   000009   75..00       MOV       ?V0,#0x0
   1820            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV       DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
   1821            while ( pList )
   1822            {
   1823              if ( pList->clusterID == inMsg->clusterID )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   85..82       MOV       DPL,?V4
   \   000015   85..83       MOV       DPH,?V5
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00001E   E5..         MOV       A,?V6
   \   000020   240C         ADD       A,#0xc
   \   000022   F582         MOV       DPL,A
   \   000024   E4           CLR       A
   \   000025   35..         ADDC      A,?V7
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   68           XRL       A,R0
   \   00002B   7003         JNZ       ??ZDO_SendMsgCBs_2
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   69           XRL       A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   000030   707D         JNZ       ??ZDO_SendMsgCBs_3
   1824              {
   1825                zdoIncomingMsg_t *msgPtr;
   1826          
   1827                // Send the address to the task
   1828                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   000032                ; Setup parameters for call to function osal_msg_allocate
   \   000032   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000035   2415         ADD       A,#0x15
   \   000037   FA           MOV       R2,A
   \   000038   E4           CLR       A
   \   000039   3400         ADDC      A,#0x0
   \   00003B   FB           MOV       R3,A
   \   00003C   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00003F   8A..         MOV       ?V2,R2
   \   000041   8B..         MOV       ?V3,R3
   \   000043   AE..         MOV       R6,?V2
   \   000045   AF..         MOV       R7,?V3
   1829                if ( msgPtr )
   \   000047   EA           MOV       A,R2
   \   000048   4F           ORL       A,R7
   \   000049   6064         JZ        ??ZDO_SendMsgCBs_3
   1830                {
   1831                  // copy struct
   1832                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   85....       MOV       ?V0,?V6
   \   00004E   85....       MOV       ?V1,?V7
   \   000051   75..00       MOV       ?V2,#0x0
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000059   7C15         MOV       R4,#0x15
   \   00005B   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
   1833          
   1834                  if ( inMsg->asduLen )
   \   000061   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000064   602E         JZ        ??ZDO_SendMsgCBs_4
   1835                  {
   1836                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000066   EE           MOV       A,R6
   \   000067   2415         ADD       A,#0x15
   \   000069   FA           MOV       R2,A
   \   00006A   E4           CLR       A
   \   00006B   3F           ADDC      A,R7
   \   00006C   FB           MOV       R3,A
   \   00006D   EE           MOV       A,R6
   \   00006E   2413         ADD       A,#0x13
   \   000070   F582         MOV       DPL,A
   \   000072   E4           CLR       A
   \   000073   3F           ADDC      A,R7
   \   000074   F583         MOV       DPH,A
   \   000076   12....       LCALL     ?Subroutine31 & 0xFFFF
   1837                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \                     ??CrossCallReturnLabel_48:
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   E5..         MOV       A,?V6
   \   00007B   2413         ADD       A,#0x13
   \   00007D   F582         MOV       DPL,A
   \   00007F   E4           CLR       A
   \   000080   35..         ADDC      A,?V7
   \   000082   12....       LCALL     ?Subroutine48 & 0xFFFF
   1838                  }
   \                     ??CrossCallReturnLabel_233:
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008A   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00008D   FC           MOV       R4,A
   \   00008E   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   1839          
   1840                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_4:
   \   000094   8E82         MOV       DPL,R6
   \   000096   8F83         MOV       DPH,R7
   \   000098   74D3         MOV       A,#-0x2d
   \   00009A   F0           MOVX      @DPTR,A
   1841                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   00009B                ; Setup parameters for call to function osal_msg_send
   \   00009B   EE           MOV       A,R6
   \   00009C   FA           MOV       R2,A
   \   00009D   EF           MOV       A,R7
   \   00009E   FB           MOV       R3,A
   \   00009F   85..82       MOV       DPL,?V4
   \   0000A2   85..83       MOV       DPH,?V5
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F9           MOV       R1,A
   \   0000A9   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1842                  ret = TRUE;
   \   0000AC   75..01       MOV       ?V0,#0x1
   1843                }
   1844              }
   1845              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_3:
   \   0000AF   85..82       MOV       DPL,?V4
   \   0000B2   85..83       MOV       DPH,?V5
   \                     ??ZDO_SendMsgCBs_0:
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F5..         MOV       ?V4,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F5..         MOV       ?V5,A
   1846            }
   \   0000BC   E5..         MOV       A,?V4
   \   0000BE   45..         ORL       A,?V5
   \   0000C0   6003         JZ        $+5
   \   0000C2   02....       LJMP      ??ZDO_SendMsgCBs_1 & 0xFFFF
   1847            return ( ret );
   \   0000C5   A9..         MOV       R1,?V0
   \   0000C7   02....       LJMP      ??Subroutine128_0 & 0xFFFF
   1848          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E5..         MOV       A,?V6
   \   000002   2410         ADD       A,#0x10
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V7
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET
   1849          
   1850          /*********************************************************************
   1851           * Incoming message processor
   1852           */
   1853          
   1854          /*********************************************************************
   1855           * @fn          ZDP_IncomingData
   1856           *
   1857           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1858           *              from the APS sub-layer to the ZDO.
   1859           *
   1860           * @param       pData - Incoming Message
   1861           *
   1862           * @return      none
   1863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1864          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1865          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1866            uint8 x = 0;
   \   00000A   7E00         MOV       R6,#0x0
   1867            uint8 handled;
   1868            zdoIncomingMsg_t inMsg;
   1869          
   1870            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV       A,#0xa
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?Subroutine32 & 0xFFFF
   1871            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_49:
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   1872            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_295:
   \   000023   EA           MOV       A,R2
   \   000024   2415         ADD       A,#0x15
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3B           ADDC      A,R3
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C0E0         PUSH      A
   \   00002F   740B         MOV       A,#0xb
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine32 & 0xFFFF
   1873            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_50:
   \   000039   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   00003C   740C         MOV       A,#0xc
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   1874            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_296:
   \   000044   EA           MOV       A,R2
   \   000045   2419         ADD       A,#0x19
   \   000047   F582         MOV       DPL,A
   \   000049   E4           CLR       A
   \   00004A   3B           ADDC      A,R3
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   C0E0         PUSH      A
   \   000050   740E         MOV       A,#0xe
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
   1875          
   1876            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV       A,R2
   \   000059   241F         ADD       A,#0x1f
   \   00005B   F582         MOV       DPL,A
   \   00005D   E4           CLR       A
   \   00005E   3B           ADDC      A,R3
   \   00005F   F583         MOV       DPH,A
   \   000061   E0           MOVX      A,@DPTR
   \   000062   14           DEC       A
   \   000063   C0E0         PUSH      A
   \   000065   7410         MOV       A,#0x10
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
   1877            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV       A,R2
   \   00006E   2421         ADD       A,#0x21
   \   000070   F8           MOV       R0,A
   \   000071   E4           CLR       A
   \   000072   3B           ADDC      A,R3
   \   000073   F9           MOV       R1,A
   \   000074   8882         MOV       DPL,R0
   \   000076   F583         MOV       DPH,A
   \   000078   E0           MOVX      A,@DPTR
   \   000079   2401         ADD       A,#0x1
   \   00007B   FC           MOV       R4,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   3400         ADDC      A,#0x0
   \   000080   FD           MOV       R5,A
   \   000081   7413         MOV       A,#0x13
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   EC           MOV       A,R4
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   ED           MOV       A,R5
   \   00008A   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   1878            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_185:
   \   00008D   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C0E0         PUSH      A
   \   000093   740F         MOV       A,#0xf
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   D0E0         POP       A
   \   00009A   F0           MOVX      @DPTR,A
   1879            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV       A,R2
   \   00009C   2412         ADD       A,#0x12
   \   00009E   F582         MOV       DPL,A
   \   0000A0   E4           CLR       A
   \   0000A1   3B           ADDC      A,R3
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   0000A7   7411         MOV       A,#0x11
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   1880          
   1881            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_297:
   \   0000AF                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000AF   AA..         MOV       R2,?XSP + 0
   \   0000B1   AB..         MOV       R3,?XSP + 1
   \   0000B3   12....       LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000B6   E9           MOV       A,R1
   \   0000B7   FC           MOV       R4,A
   \   0000B8   8001         SJMP      ??ZDP_IncomingData_0
   1882          
   1883          #if defined( MT_ZDO_CB_FUNC )
   1884            MT_ZdoDirectCB( pData, &inMsg );
   1885          #endif
   1886          
   1887            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1888            {
   1889              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1890              {
   1891                zdpMsgProcs[x].pFn( &inMsg );
   1892                return;
   1893              }
   1894              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000BA   0E           INC       R6
   \                     ??ZDP_IncomingData_0:
   \   0000BB   EE           MOV       A,R6
   \   0000BC   F5..         MOV       ?V0,A
   \   0000BE   75..00       MOV       ?V1,#0x0
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?S_SHL
   \   0000C8   74..         MOV       A,#zdpMsgProcs & 0xff
   \   0000CA   25..         ADD       A,?V0
   \   0000CC   F8           MOV       R0,A
   \   0000CD   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   0000CF   35..         ADDC      A,?V1
   \   0000D1   F9           MOV       R1,A
   \   0000D2   8882         MOV       DPL,R0
   \   0000D4   F583         MOV       DPH,A
   \   0000D6   E4           CLR       A
   \   0000D7   93           MOVC      A,@A+DPTR
   \   0000D8   C0E0         PUSH      A
   \   0000DA   7401         MOV       A,#0x1
   \   0000DC   93           MOVC      A,@A+DPTR
   \   0000DD   F583         MOV       DPH,A
   \   0000DF   D082         POP       DPL
   \   0000E1   AA82         MOV       R2,DPL
   \   0000E3   AB83         MOV       R3,DPH
   \   0000E5   74FF         MOV       A,#-0x1
   \   0000E7   6A           XRL       A,R2
   \   0000E8   7003         JNZ       ??ZDP_IncomingData_2
   \   0000EA   74FF         MOV       A,#-0x1
   \   0000EC   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_2:
   \   0000ED   6028         JZ        ??ZDP_IncomingData_3
   \   0000EF   740C         MOV       A,#0xc
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   6A           XRL       A,R2
   \   0000F6   7003         JNZ       ??ZDP_IncomingData_4
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_4:
   \   0000FB   70BD         JNZ       ??ZDP_IncomingData_1
   \   0000FD                ; Setup parameters for indirect call
   \   0000FD   AA..         MOV       R2,?XSP + 0
   \   0000FF   AB..         MOV       R3,?XSP + 1
   \   000101   8882         MOV       DPL,R0
   \   000103   8983         MOV       DPH,R1
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   E4           CLR       A
   \   000108   93           MOVC      A,@A+DPTR
   \   000109   C0E0         PUSH      A
   \   00010B   7401         MOV       A,#0x1
   \   00010D   93           MOVC      A,@A+DPTR
   \   00010E   F583         MOV       DPH,A
   \   000110   D082         POP       DPL
   \   000112   12....       LCALL     ?CALL_IND
   \   000115   800A         SJMP      ??ZDP_IncomingData_5
   1895            }
   1896          
   1897            // Handle unhandled messages
   1898            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000117   EC           MOV       A,R4
   \   000118   7007         JNZ       ??ZDP_IncomingData_5
   1899              ZDApp_InMsgCB( &inMsg );
   \   00011A                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00011A   AA..         MOV       R2,?XSP + 0
   \   00011C   AB..         MOV       R3,?XSP + 1
   \   00011E   12....       LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   1900          }
   \                     ??ZDP_IncomingData_5:
   \   000121   7415         MOV       A,#0x15
   \   000123   02....       LJMP      ??Subroutine110_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1901          
   1902          /*********************************************************************
   1903          *********************************************************************/
   1904          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     50   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     27   ZDP_EPRsp
        0     19   -> fillAndSend
        0     20   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     31   ZDP_IncomingData
        0     31   -> ZDApp_InMsgCB
        0     31   -> ZDO_SendMsgCBs
      1     26   ZDP_MatchDescReq
        0     18   -> fillAndSend
      1     27   ZDP_MgmtBindRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     27   ZDP_MgmtLqiRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     27   ZDP_MgmtNwkDiscRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     12   ZDP_MgmtPermitJoinReq
        0     12   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     21   ZDP_SimpleDescMsg
        0     21   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     23   ZDP_UserDescRsp
        0     19   -> fillAndSend
        0     20   -> osal_memcpy
      1     19   ZDP_UserDescSet
        0     16   -> fillAndSend
        0     17   -> osal_memcpy
        0     14   -> osal_memset
      1     70   fillAndSend
        0     34   -> AF_DataRequest
        0     25   -> osal_memset
      1     36   zdpProcessAddrReq
        0     34   -> AddrMgrEntryGet
        0     34   -> AssocGetWithExt
        0     34   -> AssocGetWithShort
        0     34   -> AssocMakeList
        0     36   -> fillAndSend
        0     34   -> osal_mem_free
        0     34   -> sAddrExtCmp
        0     34   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       8  ??Subroutine106_0
       4  ??Subroutine107_0
       8  ??Subroutine108_0
       3  ??Subroutine109_0
       8  ??Subroutine110_0
       5  ??Subroutine111_0
       2  ??Subroutine112_0
       5  ??Subroutine113_0
      12  ??Subroutine114_0
       7  ??Subroutine115_0
       6  ??Subroutine116_0
       4  ??Subroutine117_0
       7  ??Subroutine118_0
       4  ??Subroutine119_0
       4  ??Subroutine120_0
       7  ??Subroutine121_0
       6  ??Subroutine122_0
       4  ??Subroutine123_0
       8  ??Subroutine124_0
       8  ??Subroutine125_0
       4  ??Subroutine126_0
       3  ??Subroutine127_0
       5  ??Subroutine128_0
       3  ??Subroutine129_0
       3  ??Subroutine130_0
       5  ??Subroutine131_0
       6  ??Subroutine132_0
      10  ??Subroutine133_0
       6  ??Subroutine134_0
       5  ??Subroutine135_0
       6  ??Subroutine136_0
       4  ??Subroutine137_0
       6  ??Subroutine138_0
       3  ??Subroutine139_0
       6  ??Subroutine140_0
       3  ??Subroutine141_0
       4  ??Subroutine142_0
      14  ?Subroutine0
      10  ?Subroutine1
      18  ?Subroutine10
       9  ?Subroutine100
      11  ?Subroutine101
       8  ?Subroutine102
      14  ?Subroutine103
       6  ?Subroutine104
       9  ?Subroutine105
      18  ?Subroutine11
       7  ?Subroutine12
       9  ?Subroutine13
      13  ?Subroutine14
       8  ?Subroutine15
      12  ?Subroutine16
      17  ?Subroutine17
      11  ?Subroutine18
       4  ?Subroutine19
       2  ?Subroutine2
       4  ?Subroutine20
       6  ?Subroutine21
       1  ?Subroutine22
       8  ?Subroutine23
      12  ?Subroutine24
       5  ?Subroutine25
       4  ?Subroutine26
      11  ?Subroutine27
       3  ?Subroutine28
       1  ?Subroutine29
      10  ?Subroutine3
       6  ?Subroutine30
       6  ?Subroutine31
       5  ?Subroutine32
       5  ?Subroutine33
       4  ?Subroutine34
       9  ?Subroutine35
       6  ?Subroutine36
       9  ?Subroutine37
       3  ?Subroutine38
       3  ?Subroutine39
       5  ?Subroutine4
      15  ?Subroutine40
      15  ?Subroutine41
       7  ?Subroutine42
      15  ?Subroutine43
       9  ?Subroutine44
       6  ?Subroutine45
      14  ?Subroutine46
      13  ?Subroutine47
       2  ?Subroutine48
      17  ?Subroutine49
      11  ?Subroutine5
      17  ?Subroutine50
      10  ?Subroutine51
       5  ?Subroutine52
       8  ?Subroutine53
       6  ?Subroutine54
       6  ?Subroutine55
      12  ?Subroutine56
       6  ?Subroutine57
       4  ?Subroutine58
       2  ?Subroutine59
       5  ?Subroutine6
       8  ?Subroutine60
       4  ?Subroutine61
       9  ?Subroutine62
       3  ?Subroutine63
       3  ?Subroutine64
       2  ?Subroutine65
       1  ?Subroutine66
      12  ?Subroutine67
       3  ?Subroutine68
       9  ?Subroutine69
       5  ?Subroutine7
       2  ?Subroutine70
       9  ?Subroutine71
       4  ?Subroutine72
       5  ?Subroutine73
       4  ?Subroutine74
       7  ?Subroutine75
      13  ?Subroutine76
       2  ?Subroutine77
      12  ?Subroutine78
       4  ?Subroutine79
       4  ?Subroutine8
      10  ?Subroutine80
      13  ?Subroutine81
      10  ?Subroutine82
      10  ?Subroutine83
       9  ?Subroutine84
       9  ?Subroutine85
      13  ?Subroutine86
       9  ?Subroutine87
       5  ?Subroutine88
       2  ?Subroutine89
      40  ?Subroutine9
       3  ?Subroutine90
       6  ?Subroutine91
       4  ?Subroutine92
      11  ?Subroutine93
      11  ?Subroutine94
       2  ?Subroutine95
       2  ?Subroutine96
       9  ?Subroutine97
       9  ?Subroutine98
       9  ?Subroutine99
     130  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     105  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     202  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     192  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
      78  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     159  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     310  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
      85  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
      67  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     294  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     178  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     264  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      28  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
      54  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     360  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
      55  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     294  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     216  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     113  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
      20  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     269  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      15  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     219  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     115  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
      92  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     106  ZDP_SendData
       6  ZDP_SendData::?relay
      75  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
      95  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     381  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      27  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     138  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     110  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
     163  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      36  zdpMsgProcs
     661  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 6 724 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
    37 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
   243 bytes of CODE     memory
 6 724 bytes of HUGECODE memory
    86 bytes of XDATA    memory

Errors: none
Warnings: none
