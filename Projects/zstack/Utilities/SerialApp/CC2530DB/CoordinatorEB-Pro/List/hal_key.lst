###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  17:52:23
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_key.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWC668.tmp
#        (D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_key.c -D ZIGBEEPRO
#        -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\hal_key.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\hal_key.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2009-12-16 17:44:49 -0800 (Wed, 16 Dec 2009) $
      4            Revision:       $Revision: 21351 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xac
   \   unsigned char volatile __sfr P2IEN
   \                     P2IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          
     92          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     93          
     94          /**************************************************************************************************
     95           *                                              MACROS
     96           **************************************************************************************************/
     97          
     98          /**************************************************************************************************
     99           *                                            CONSTANTS
    100           **************************************************************************************************/
    101          #define HAL_KEY_RISING_EDGE   0
    102          #define HAL_KEY_FALLING_EDGE  1
    103          
    104          #define HAL_KEY_DEBOUNCE_VALUE  25
    105          #define HAL_KEY_POLLING_VALUE   100
    106          
    107          /* CPU port interrupt */
    108          #define HAL_KEY_CPU_PORT_0_IF P0IF
    109          #define HAL_KEY_CPU_PORT_1_IF P1IF
    110          #define HAL_KEY_CPU_PORT_2_IF P2IF
    111          
    112          /* SW_6 is at P0.1 */
    113          #define HAL_KEY_SW_6_PORT   P0
    114          #define HAL_KEY_SW_6_BIT    BV(1)
    115          #define HAL_KEY_SW_6_SEL    P0SEL
    116          #define HAL_KEY_SW_6_DIR    P0DIR
    117          
    118          /* edge interrupt */
    119          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    120          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    121          
    122          
    123          /* SW_6 interrupts */
    124          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    125          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    126          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    127          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    128          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    129          
    130          //modified by llfeng
    131          /* SW_6 is at P0.1 */
    132          #define HAL_KEY_A_PORT   P0
    133          #define HAL_KEY_A_BIT    BV(0)
    134          #define HAL_KEY_A_SEL    P0SEL
    135          #define HAL_KEY_A_DIR    P0DIR
    136          
    137          /* edge interrupt */
    138          #define HAL_KEY_A_EDGEBIT  BV(0)
    139          #define HAL_KEY_A_EDGE     HAL_KEY_FALLING_EDGE
    140          
    141          
    142          /* SW_6 interrupts */
    143          #define HAL_KEY_A_IEN      IEN1  /* CPU interrupt mask register */
    144          #define HAL_KEY_A_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    145          #define HAL_KEY_A_ICTL     P0IEN /* Port Interrupt Control register */
    146          #define HAL_KEY_A_ICTLBIT  BV(0) /* P0IEN - P0.1 enable/disable bit */
    147          #define HAL_KEY_A_PXIFG    P0IFG /* Interrupt flag at source */
    148             
    149          /* SW_6 is at P0.1 */
    150          #define HAL_KEY_A_PORT   P0
    151          #define HAL_KEY_A_BIT    BV(0)
    152          #define HAL_KEY_A_SEL    P0SEL
    153          #define HAL_KEY_A_DIR    P0DIR
    154          
    155          /* edge interrupt */
    156          #define HAL_KEY_A_EDGEBIT  BV(0)
    157          #define HAL_KEY_A_EDGE     HAL_KEY_FALLING_EDGE
    158          
    159          
    160          /* SW_6 interrupts */
    161          #define HAL_KEY_A_IEN      IEN1  /* CPU interrupt mask register */
    162          #define HAL_KEY_A_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    163          #define HAL_KEY_A_ICTL     P0IEN /* Port Interrupt Control register */
    164          #define HAL_KEY_A_ICTLBIT  BV(0) /* P0IEN - P0.1 enable/disable bit */
    165          #define HAL_KEY_A_PXIFG    P0IFG /* Interrupt flag at source */   
    166          //modify end
    167          
    168          /* Joy stick move at P2.0 */
    169          #define HAL_KEY_JOY_MOVE_PORT   P2
    170          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    171          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    172          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    173          
    174          /* edge interrupt */
    175          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    176          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
    177          
    178          /* Joy move interrupts */
    179          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    180          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    181          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    182          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    183          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    184          
    185          
    186          #define HAL_KEY_S1_IEN      IEN2  /* CPU interrupt mask register */
    187          #define HAL_KEY_S1_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    188          #define HAL_KEY_S1_ICTL     P2IEN /* Port Interrupt Control register */
    189          #define HAL_KEY_S1_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    190          
    191          #define HAL_KEY_S2_IEN      IEN2  /* CPU interrupt mask register */
    192          #define HAL_KEY_S2_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    193          #define HAL_KEY_S2_ICTL     P2IEN /* Port Interrupt Control register */
    194          #define HAL_KEY_S2_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    195          
    196          #define HAL_KEY_S3_IEN      IEN2  /* CPU interrupt mask register */
    197          #define HAL_KEY_S3_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    198          #define HAL_KEY_S3_ICTL     P2IEN /* Port Interrupt Control register */
    199          #define HAL_KEY_S3_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    200          
    201          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    202          
    203          
    204          /**************************************************************************************************
    205           *                                            TYPEDEFS
    206           **************************************************************************************************/
    207          
    208          
    209          /**************************************************************************************************
    210           *                                        GLOBAL VARIABLES
    211           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    216          
    217          /**************************************************************************************************
    218           *                                        FUNCTIONS - Local
    219           **************************************************************************************************/
    220          void halProcessKeyInterrupt(void);
    221          uint8 halGetJoyKeyInput(void);
    222          
    223          
    224          
    225          /**************************************************************************************************
    226           *                                        FUNCTIONS - API
    227           **************************************************************************************************/
    228          
    229          
    230          /**************************************************************************************************
    231           * @fn      HalKeyInit
    232           *
    233           * @brief   Initilize Key Service
    234           *
    235           * @param   none
    236           *
    237           * @return  None
    238           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    239          void HalKeyInit( void )
   \                     HalKeyInit:
    240          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    241            /* Initialize previous key to 0 */
    242            halKeySavedKeys = 0;
   \   000004   90....       MOV       DPTR,#halKeySavedKeys
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    243          
    244            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   000009   53F3FD       ANL       0xf3,#0xfd
    245            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   00000C   53FDFD       ANL       0xfd,#0xfd
    246          
    247            HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
   \   00000F   53F5FE       ANL       0xf5,#0xfe
    248            HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
   \   000012   53FFFE       ANL       0xff,#0xfe
    249          
    250          
    251            /* Initialize callback function */
    252            pHalKeyProcessFunction  = NULL;
   \   000015   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    253          
    254            /* Start with key is not configured */
    255            HalKeyConfigured = FALSE;
   \   00001B   90....       MOV       DPTR,#HalKeyConfigured
   \   00001E   F0           MOVX      @DPTR,A
    256          }
   \   00001F   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000022                REQUIRE P0SEL
   \   000022                REQUIRE P0DIR
   \   000022                REQUIRE P2SEL
   \   000022                REQUIRE P2DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    257          
    258          
    259          /**************************************************************************************************
    260           * @fn      HalKeyConfig
    261           *
    262           * @brief   Configure the Key serivce
    263           *
    264           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    265           *          cback - pointer to the CallBack function
    266           *
    267           * @return  None
    268           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    270          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    271            /* Enable/Disable Interrupt or */
    272            Hal_KeyIntEnable = interruptEnable;
   \   000006   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000009   F0           MOVX      @DPTR,A
    273          
    274            /* Register the callback fucntion */
    275            pHalKeyProcessFunction = cback;
   \   00000A   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   00000D   EA           MOV       A,R2
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   EB           MOV       A,R3
   \   000011   F0           MOVX      @DPTR,A
    276          
    277            /* Determine if interrupt is enable or not */
    278            if (Hal_KeyIntEnable)
   \   000012   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6041         JZ        ??HalKeyConfig_0
    279            {
    280              /* Rising/Falling edge configuratinn */
    281          
    282              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   000018   538CFE       ANL       0x8c,#0xfe
    283              /* For falling edge, the bit must be set. */
    284            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    285              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   00001B   438C01       ORL       0x8c,#0x1
    286            #endif
    287          
    288          
    289              /* Interrupt configuration:
    290               * - Enable interrupt generation at the port
    291               * - Enable CPU interrupt
    292               * - Clear any pending interrupt
    293               */
    294              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   00001E   43AB02       ORL       0xab,#0x2
    295              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   000021   D2BD         SETB      0xb8.5
    296              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   000023   7589FD       MOV       0x89,#-0x3
    297          
    298          
    299              /* Rising/Falling edge configuratinn */
    300          
    301              PICTL &= ~(HAL_KEY_A_EDGEBIT);    /* Clear the edge bit */
   \   000026   538CFE       ANL       0x8c,#0xfe
    302              /* For falling edge, the bit must be set. */
    303            #if (HAL_KEY_A_EDGE == HAL_KEY_FALLING_EDGE)
    304              PICTL |= HAL_KEY_A_EDGEBIT;
   \   000029   438C01       ORL       0x8c,#0x1
    305            #endif
    306          
    307          
    308              /* Interrupt configuration:
    309               * - Enable interrupt generation at the port
    310               * - Enable CPU interrupt
    311               * - Clear any pending interrupt
    312               */
    313              HAL_KEY_A_ICTL |= HAL_KEY_A_ICTLBIT;
   \   00002C   43AB01       ORL       0xab,#0x1
    314              HAL_KEY_A_IEN |= HAL_KEY_A_IENBIT;
   \   00002F   D2BD         SETB      0xb8.5
    315              HAL_KEY_A_PXIFG = ~(HAL_KEY_A_BIT);    
   \   000031   7589FE       MOV       0x89,#-0x2
    316              
    317          
    318              /* Rising/Falling edge configuratinn */
    319          
    320              HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
   \   000034   53ACF7       ANL       0xac,#0xf7
    321              /* For falling edge, the bit must be set. */
    322            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    323              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
   \   000037   43AC08       ORL       0xac,#0x8
    324            #endif
    325          
    326          
    327              /* Interrupt configuration:
    328               * - Enable interrupt generation at the port
    329               * - Enable CPU interrupt
    330               * - Clear any pending interrupt
    331               */
    332              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
   \   00003A   43AC01       ORL       0xac,#0x1
    333              HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
   \   00003D   439A02       ORL       0x9a,#0x2
    334              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
   \   000040   758BFE       MOV       0x8b,#-0x2
    335          
    336          
    337              /* Do this only after the hal_key is configured - to work with sleep stuff */
    338              if (HalKeyConfigured == TRUE)
   \   000043   90....       MOV       DPTR,#HalKeyConfigured
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6401         XRL       A,#0x1
   \   000049   701E         JNZ       ??HalKeyConfig_1
    339              {
    340                osal_stop_timerEx( Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   00004B                ; Setup parameters for call to function osal_stop_timerEx
   \   00004B   7A01         MOV       R2,#0x1
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   90....       MOV       DPTR,#Hal_TaskID
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000057   8010         SJMP      ??HalKeyConfig_1
    341              }
    342            }
    343            else    /* Interrupts NOT enabled */
    344            {
    345          #if 0
    346              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
    347              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
    348          
    349              HAL_KEY_A_ICTL &= ~(HAL_KEY_A_ICTLBIT); /* don't generate interrupt */
    350              HAL_KEY_A_IEN &= ~(HAL_KEY_A_IENBIT);   /* Clear interrupt enable bit */  
    351          #endif
    352          
    353              
    354              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_POLLING_VALUE);    /* Kick off polling */
   \                     ??HalKeyConfig_0:
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   7C64         MOV       R4,#0x64
   \   00005B   7D00         MOV       R5,#0x0
   \   00005D   7A01         MOV       R2,#0x1
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   90....       MOV       DPTR,#Hal_TaskID
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    355            }
    356          
    357            /* Key now is configured */
    358            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000069   90....       MOV       DPTR,#HalKeyConfigured
   \   00006C   7401         MOV       A,#0x1
   \   00006E   F0           MOVX      @DPTR,A
    359          }
   \   00006F   FF           MOV       R7,A
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000073                REQUIRE PICTL
   \   000073                REQUIRE P0IEN
   \   000073                REQUIRE _A_IEN1
   \   000073                REQUIRE P0IFG
   \   000073                REQUIRE P2IEN
   \   000073                REQUIRE IEN2
   \   000073                REQUIRE P2IFG
    360          
    361          
    362          /**************************************************************************************************
    363           * @fn      HalKeyRead
    364           *
    365           * @brief   Read the current value of a key
    366           *
    367           * @param   None
    368           *
    369           * @return  keys - current keys status
    370           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    372          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    373            uint8 keys = 0;
   \   000000   7900         MOV       R1,#0x0
    374          
    375            if (HAL_PUSH_BUTTON1())
   \   000002   A280         MOV       C,0x80.0
   \   000004   5002         JNC       ??HalKeyRead_0
    376            {
    377              keys |= HAL_KEY_SW_6;
   \   000006   7920         MOV       R1,#0x20
    378            }
    379          
    380          /*  if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  // Key is active low 
    381            {
    382              keys |= halGetJoyKeyInput();
    383            }
    384          */
    385            return keys;
   \                     ??HalKeyRead_0:
   \   000008   02....       LJMP      ?BRET
   \   00000B                REQUIRE _A_P0
    386          }
    387          
    388          
    389          /**************************************************************************************************
    390           * @fn      HalKeyPoll
    391           *
    392           * @brief   Called by hal_driver to poll the keys
    393           *
    394           * @param   None
    395           *
    396           * @return  None
    397           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    398          void HalKeyPoll (void)
   \                     HalKeyPoll:
    399          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    400            uint8 keys = 0;
   \   000004   7900         MOV       R1,#0x0
    401          
    402          /* if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  // Key is active HIGH 
    403            {
    404              keys = halGetJoyKeyInput();
    405            }
    406          */
    407          /*  
    408            if (!HAL_PUSH_BUTTON2())//S0
    409            {
    410              keys |= HAL_KEY_SW_1; 
    411            }
    412            if (!HAL_PUSH_BUTTON1())//S1 
    413            {
    414              keys |= HAL_KEY_SW_6; 
    415            }
    416          */
    417            if (!HAL_PUSH_BUTTON1())//S3
   \   000006   A280         MOV       C,0x80.0
   \   000008   4002         JC        ??HalKeyPoll_0
    418            {
    419              keys |= HAL_KEY_SW_1; 
   \   00000A   7901         MOV       R1,#0x1
    420            }    
    421          
    422            if (!HAL_PUSH_BUTTON2())//S3
   \                     ??HalKeyPoll_0:
   \   00000C   A282         MOV       C,0x80.2
   \   00000E   4004         JC        ??HalKeyPoll_1
    423            {
    424              keys |= HAL_KEY_SW_2; 
   \   000010   E9           MOV       A,R1
   \   000011   D2E1         SETB      0xE0 /* A   */.1
   \   000013   F9           MOV       R1,A
    425            }    
    426            
    427            if (!HAL_PUSH_BUTTON3())//S3
   \                     ??HalKeyPoll_1:
   \   000014   A284         MOV       C,0x80.4
   \   000016   4004         JC        ??HalKeyPoll_2
    428            {
    429              keys |= HAL_KEY_SW_3; 
   \   000018   E9           MOV       A,R1
   \   000019   D2E4         SETB      0xE0 /* A   */.4
   \   00001B   F9           MOV       R1,A
    430            }    
    431          
    432            if (!HAL_PUSH_BUTTON4())//S3
   \                     ??HalKeyPoll_2:
   \   00001C   A286         MOV       C,0x80.6
   \   00001E   4004         JC        ??HalKeyPoll_3
    433            {
    434              keys |= HAL_KEY_SW_4; 
   \   000020   E9           MOV       A,R1
   \   000021   D2E3         SETB      0xE0 /* A   */.3
   \   000023   F9           MOV       R1,A
    435            }    
    436          
    437            if (!HAL_PUSH_BUTTON5())//S3
   \                     ??HalKeyPoll_3:
   \   000024   A290         MOV       C,0x90.0
   \   000026   4004         JC        ??HalKeyPoll_4
    438            {
    439              keys |= HAL_KEY_SW_5; 
   \   000028   E9           MOV       A,R1
   \   000029   D2E2         SETB      0xE0 /* A   */.2
   \   00002B   F9           MOV       R1,A
    440            }      
    441            
    442            if (!HAL_PUSH_BUTTON6())//S3
   \                     ??HalKeyPoll_4:
   \   00002C   A296         MOV       C,0x90.6
   \   00002E   4004         JC        ??HalKeyPoll_5
    443            {
    444              keys |= HAL_KEY_SW_6; 
   \   000030   E9           MOV       A,R1
   \   000031   D2E5         SETB      0xE0 /* A   */.5
   \   000033   F9           MOV       R1,A
    445            }  
    446            
    447            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_5:
   \   000034   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000037   E0           MOVX      A,@DPTR
   \   000038   7009         JNZ       ??HalKeyPoll_6
    448            {
    449              if (keys == halKeySavedKeys)
   \   00003A   90....       MOV       DPTR,#halKeySavedKeys
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   69           XRL       A,R1
   \   00003F   6021         JZ        ??HalKeyPoll_7
    450              {
    451                /* Exit - since no keys have changed */
    452                return;
    453              }
    454              /* Store the current keys for comparation next time */
    455              halKeySavedKeys = keys;
   \   000041   E9           MOV       A,R1
   \   000042   F0           MOVX      @DPTR,A
    456            }
    457            else
    458            {
    459              /* Key interrupt handled here */
    460            }
    461          
    462            /* Invoke Callback if new keys were depressed */
    463            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_6:
   \   000043   E9           MOV       A,R1
   \   000044   601C         JZ        ??HalKeyPoll_7
   \   000046   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FA           MOV       R2,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   FB           MOV       R3,A
   \   00004E   EA           MOV       A,R2
   \   00004F   4B           ORL       A,R3
   \   000050   6010         JZ        ??HalKeyPoll_7
    464            {
    465              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   000052                ; Setup parameters for indirect call
   \   000052   7A00         MOV       R2,#0x0
   \   000054   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F8           MOV       R0,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F583         MOV       DPH,A
   \   00005D   8882         MOV       DPL,R0
   \   00005F   12....       LCALL     ?CALL_IND
    466            }
    467          }
   \                     ??HalKeyPoll_7:
   \   000062   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000065                REQUIRE _A_P0
   \   000065                REQUIRE _A_P1
    468          
    469          /**************************************************************************************************
    470           * @fn      halGetJoyKeyInput
    471           *
    472           * @brief   Map the ADC value to its corresponding key.
    473           *
    474           * @param   None
    475           *
    476           * @return  keys - current joy key status
    477           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    478          uint8 halGetJoyKeyInput(void)
   \                     halGetJoyKeyInput:
    479          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    480            /* The joystick control is encoded as an analog voltage.
    481             * Read the JOY_LEVEL analog value and map it to joy movement.
    482             */
    483            uint8 adc;
    484            uint8 ksave0 = 0;
   \   000005   7E00         MOV       R6,#0x0
    485            uint8 ksave1;
    486          
    487            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    488            do
    489            {
    490              ksave1 = ksave0;    /* save previouse key reading */
   \                     ??halGetJoyKeyInput_0:
   \   000007   EE           MOV       A,R6
   \   000008   FF           MOV       R7,A
    491          
    492              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
   \   000009                ; Setup parameters for call to function HalAdcRead
   \   000009   7A01         MOV       R2,#0x1
   \   00000B   7906         MOV       R1,#0x6
   \   00000D   12....       LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000010   EA           MOV       A,R2
   \   000011   F8           MOV       R0,A
    493          
    494              if ((adc >= 2) && (adc <= 38))
   \   000012   74FE         MOV       A,#-0x2
   \   000014   2A           ADD       A,R2
   \   000015   C3           CLR       C
   \   000016   9425         SUBB      A,#0x25
   \   000018   5005         JNC       ??halGetJoyKeyInput_1
    495              {
    496                 ksave0 |= HAL_KEY_UP;
   \   00001A   EE           MOV       A,R6
   \   00001B   D2E0         SETB      0xE0 /* A   */.0
   \   00001D   8032         SJMP      ??halGetJoyKeyInput_2
    497              }
    498              else if ((adc >= 74) && (adc <= 88))
   \                     ??halGetJoyKeyInput_1:
   \   00001F   74B6         MOV       A,#-0x4a
   \   000021   2A           ADD       A,R2
   \   000022   C3           CLR       C
   \   000023   940F         SUBB      A,#0xf
   \   000025   5005         JNC       ??halGetJoyKeyInput_3
    499              {
    500                ksave0 |= HAL_KEY_RIGHT;
   \   000027   EE           MOV       A,R6
   \   000028   D2E1         SETB      0xE0 /* A   */.1
   \   00002A   8025         SJMP      ??halGetJoyKeyInput_2
    501              }
    502              else if ((adc >= 60) && (adc <= 73))
   \                     ??halGetJoyKeyInput_3:
   \   00002C   74C4         MOV       A,#-0x3c
   \   00002E   2A           ADD       A,R2
   \   00002F   C3           CLR       C
   \   000030   940E         SUBB      A,#0xe
   \   000032   5005         JNC       ??halGetJoyKeyInput_4
    503              {
    504                ksave0 |= HAL_KEY_LEFT;
   \   000034   EE           MOV       A,R6
   \   000035   D2E3         SETB      0xE0 /* A   */.3
   \   000037   8018         SJMP      ??halGetJoyKeyInput_2
    505              }
    506              else if ((adc >= 39) && (adc <= 59))
   \                     ??halGetJoyKeyInput_4:
   \   000039   74D9         MOV       A,#-0x27
   \   00003B   2A           ADD       A,R2
   \   00003C   C3           CLR       C
   \   00003D   9415         SUBB      A,#0x15
   \   00003F   5005         JNC       ??halGetJoyKeyInput_5
    507              {
    508                ksave0 |= HAL_KEY_DOWN;
   \   000041   EE           MOV       A,R6
   \   000042   D2E4         SETB      0xE0 /* A   */.4
   \   000044   800B         SJMP      ??halGetJoyKeyInput_2
    509              }
    510              else if ((adc >= 89) && (adc <= 100))
   \                     ??halGetJoyKeyInput_5:
   \   000046   74A7         MOV       A,#-0x59
   \   000048   2A           ADD       A,R2
   \   000049   C3           CLR       C
   \   00004A   940C         SUBB      A,#0xc
   \   00004C   5004         JNC       ??halGetJoyKeyInput_6
    511              {
    512                ksave0 |= HAL_KEY_CENTER;
   \   00004E   EE           MOV       A,R6
   \   00004F   D2E2         SETB      0xE0 /* A   */.2
   \                     ??halGetJoyKeyInput_2:
   \   000051   FE           MOV       R6,A
    513              }
    514            } while (ksave0 != ksave1);
   \                     ??halGetJoyKeyInput_6:
   \   000052   EF           MOV       A,R7
   \   000053   6E           XRL       A,R6
   \   000054   70B1         JNZ       ??halGetJoyKeyInput_0
    515          
    516            return ksave0;
   \   000056   EE           MOV       A,R6
   \   000057   F9           MOV       R1,A
   \   000058   7F01         MOV       R7,#0x1
   \   00005A   02....       LJMP      ?BANKED_LEAVE_XDATA
    517          }
    518          
    519          
    520          
    521          
    522          
    523          /**************************************************************************************************
    524           * @fn      halProcessKeyInterrupt
    525           *
    526           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    527           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    528           *
    529           * @param
    530           *
    531           * @return
    532           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    534          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    535            bool valid=FALSE;
   \   000004   7800         MOV       R0,#0x0
    536          
    537            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000006   E589         MOV       A,0x89
   \   000008   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000A   5005         JNC       ??halProcessKeyInterrupt_0
    538            {
    539              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000C   7589FD       MOV       0x89,#-0x3
    540              valid = TRUE;
   \   00000F   7801         MOV       R0,#0x1
    541            }
    542          
    543            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_0:
   \   000011   E58B         MOV       A,0x8b
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   5005         JNC       ??halProcessKeyInterrupt_1
    544            {
    545              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
   \   000017   758BFE       MOV       0x8b,#-0x2
    546              valid = TRUE;
   \   00001A   8005         SJMP      ??halProcessKeyInterrupt_2
    547            }
    548          
    549            if (valid)
   \                     ??halProcessKeyInterrupt_1:
   \   00001C   E8           MOV       A,R0
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   5010         JNC       ??halProcessKeyInterrupt_3
    550            {
    551              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \                     ??halProcessKeyInterrupt_2:
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   7C19         MOV       R4,#0x19
   \   000023   7D00         MOV       R5,#0x0
   \   000025   7A01         MOV       R2,#0x1
   \   000027   7B00         MOV       R3,#0x0
   \   000029   90....       MOV       DPTR,#Hal_TaskID
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F9           MOV       R1,A
   \   00002E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    552            }
    553          }
   \                     ??halProcessKeyInterrupt_3:
   \   000031                REQUIRE ?Subroutine0
   \   000031                REQUIRE P0IFG
   \   000031                REQUIRE P2IFG
   \   000031                ; // Fall through to label ?Subroutine0
    554          
    555          /**************************************************************************************************
    556           * @fn      HalKeyEnterSleep
    557           *
    558           * @brief  - Get called to enter sleep mode
    559           *
    560           * @param
    561           *
    562           * @return
    563           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    565          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    566          }
   \   000000   02....       LJMP      ?BRET
    567          
    568          /**************************************************************************************************
    569           * @fn      HalKeyExitSleep
    570           *
    571           * @brief   - Get called when sleep is over
    572           *
    573           * @param
    574           *
    575           * @return  - return saved keys
    576           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    577          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    578          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    579            /* Wake up and read keys */
    580            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   80..         SJMP      ?Subroutine0
    581          }
    582          
    583          /***************************************************************************************************
    584           *                                    INTERRUPT SERVICE ROUTINE
    585           ***************************************************************************************************/
    586          
    587          /**************************************************************************************************
    588           * @fn      halKeyPort0Isr
    589           *
    590           * @brief   Port0 ISR
    591           *
    592           * @param
    593           *
    594           * @return
    595           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    596          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    597          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    598            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   000007   E589         MOV       A,0x89
   \   000009   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000B   5003         JNC       ??halKeyPort0Isr_0
    599            {
    600              halProcessKeyInterrupt();
   \   00000D                ; Setup parameters for call to function halProcessKeyInterrupt
   \   00000D   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    601            }
    602          
    603            /*
    604              Clear the CPU interrupt flag for Port_0
    605              PxIFG has to be cleared before PxIF
    606            */
    607            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   000010   758900       MOV       0x89,#0x0
    608            HAL_KEY_CPU_PORT_0_IF = 0;
   \   000013   C2C5         CLR       0xc0.5
    609          }
   \   000015                REQUIRE ?Subroutine1
   \   000015                REQUIRE P0IFG
   \   000015                REQUIRE _A_IRCON
   \   000015                ; // Fall through to label ?Subroutine1

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?INTERRUPT_LEAVE_XSP
    610          
    611          
    612          /**************************************************************************************************
    613           * @fn      halKeyPort2Isr
    614           *
    615           * @brief   Port2 ISR
    616           *
    617           * @param
    618           *
    619           * @return
    620           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    621          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    622          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    623            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
   \   000007   E58B         MOV       A,0x8b
   \   000009   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000B   5003         JNC       ??halKeyPort2Isr_0
    624            {
    625              halProcessKeyInterrupt();
   \   00000D                ; Setup parameters for call to function halProcessKeyInterrupt
   \   00000D   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    626            }
    627          
    628            /*
    629              Clear the CPU interrupt flag for Port_2
    630              PxIFG has to be cleared before PxIF
    631              Notes: P2_1 and P2_2 are debug lines.
    632            */
    633            HAL_KEY_JOY_MOVE_PXIFG = 0;
   \                     ??halKeyPort2Isr_0:
   \   000010   758B00       MOV       0x8b,#0x0
    634            HAL_KEY_CPU_PORT_2_IF = 0;
   \   000013   C2E8         CLR       0xe8.0
    635          }
   \   000015   80..         SJMP      ?Subroutine1
   \   000017                REQUIRE P2IFG
   \   000017                REQUIRE _A_IRCON2

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr::??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr::??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halGetJoyKeyInput::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halGetJoyKeyInput

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halProcessKeyInterrupt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyEnterSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyExitSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep
    636          
    637          #else
    638          
    639          
    640          void HalKeyInit(void){}
    641          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    642          uint8 HalKeyRead(void){ return 0;}
    643          void HalKeyPoll(void){}
    644          
    645          #endif /* HAL_KEY */
    646          
    647          
    648          
    649          
    650          
    651          /**************************************************************************************************
    652          **************************************************************************************************/
    653          
    654          
    655          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   HalKeyConfig
        0      9   -> osal_start_timerEx
        0      9   -> osal_stop_timerEx
      0      0   HalKeyEnterSleep
      2      0   HalKeyExitSleep
        2      0   -> HalKeyRead
      2      0   HalKeyInit
      2      0   HalKeyPoll
      0      0   HalKeyRead
      0      9   halGetJoyKeyInput
        0      9   -> HalAdcRead
      0     14   halKeyPort0Isr
        0     14   -> halProcessKeyInterrupt
      0     14   halKeyPort2Isr
        0     14   -> halProcessKeyInterrupt
      2     14   halProcessKeyInterrupt
        2      0   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
       5  ?Subroutine1
     115  HalKeyConfig
       6  HalKeyConfig::?relay
       1  HalKeyConfigured
       3  HalKeyEnterSleep
       6  HalKeyEnterSleep::?relay
       9  HalKeyExitSleep
       6  HalKeyExitSleep::?relay
      34  HalKeyInit
       6  HalKeyInit::?relay
     101  HalKeyPoll
       6  HalKeyPoll::?relay
      11  HalKeyRead
       6  HalKeyRead::?relay
       1  Hal_KeyIntEnable
       1  IEN2
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  P2DIR
       1  P2IEN
       1  P2IFG
       1  P2SEL
       1  PICTL
       1  _A_IEN1
       1  _A_IRCON
       1  _A_IRCON2
       1  _A_P0
       1  _A_P1
      93  halGetJoyKeyInput
       6  halGetJoyKeyInput::?relay
      21  halKeyPort0Isr
       3  halKeyPort0Isr::??INTVEC 107
      23  halKeyPort2Isr
       3  halKeyPort2Isr::??INTVEC 51
       1  halKeySavedKeys
      49  halProcessKeyInterrupt
       6  halProcessKeyInterrupt::?relay
       2  pHalKeyProcessFunction

 
 422 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  49 bytes in segment NEAR_CODE
  15 bytes in segment SFR_AN
   5 bytes in segment XDATA_Z
 
  97 bytes of CODE     memory (+  6 bytes shared)
   0 bytes of DATA     memory (+ 15 bytes shared)
 422 bytes of HUGECODE memory
   5 bytes of XDATA    memory

Errors: none
Warnings: none
