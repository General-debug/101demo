###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  15:12:05
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\SRC\DemoPrj\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWF0AF.tmp
#        (D:\SRC\DemoPrj\Components\stack\af\AF.c -D ZIGBEEPRO -D HAL_UART=TRUE
#        -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\AF.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\AF.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2009-03-19 13:41:00 -0700 (Thu, 19 Mar 2009) $
      4            Revision:       $Revision: 19470 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          
     52          #if defined ( MT_AF_CB_FUNC )
     53            #include "MT_AF.h"
     54          #endif
     55          
     56          #if defined ( INTER_PAN )
     57            #include "stub_aps.h"
     58          #endif
     59          
     60          /*********************************************************************
     61           * MACROS
     62           */
     63          
     64          /*********************************************************************
     65           * @fn      afSend
     66           *
     67           * @brief   Helper macro for V1 API to invoke V2 API.
     68           *
     69           * input parameters
     70           *
     71           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     72           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     73           * @param   cID - A valid cluster ID as specified by the Profile.
     74           * @param   len - Number of bytes of data pointed to by next param.
     75           * @param  *buf - A pointer to the data bytes to send.
     76           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     77           * @param  *transID - A pointer to a byte which can be modified and which will
     78           *                    be used as the transaction sequence number of the msg.
     79           *
     80           * output parameters
     81           *
     82           * @param  *transID - Incremented by one if the return value is success.
     83           *
     84           * @return  afStatus_t - See previous definition of afStatus_... types.
     85           */
     86          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     87                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     88                                    (cID), (len), (buf), (transID), (options), (radius) )
     89          
     90          /*********************************************************************
     91           * CONSTANTS
     92           */
     93          
     94          /*********************************************************************
     95           * TYPEDEFS
     96           */
     97          
     98          /*********************************************************************
     99           * GLOBAL VARIABLES
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103          
    104          /*********************************************************************
    105           * EXTERNAL VARIABLES
    106           */
    107          
    108          /*********************************************************************
    109           * EXTERNAL FUNCTIONS
    110           */
    111          
    112          /*********************************************************************
    113           * LOCAL VARIABLES
    114           */
    115          
    116          /*********************************************************************
    117           * LOCAL FUNCTIONS
    118           */
    119          
    120          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    121                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    122                          byte SecurityUse, uint32 timestamp );
    123          
    124          static epList_t *afFindEndPointDescList( byte EndPoint );
    125          
    126          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    127          
    128          /*********************************************************************
    129           * NETWORK LAYER CALLBACKS
    130           */
    131          
    132          /*********************************************************************
    133           * PUBLIC FUNCTIONS
    134           */
    135          
    136          /*********************************************************************
    137           * @fn      afInit
    138           *
    139           * @brief   Initialization function for the AF.
    140           *
    141           * @param   none
    142           *
    143           * @return  none
    144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void afInit( void )
   \                     afInit:
    146          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    147            // Start with no endpoint defined
    148            epList = NULL;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    149          }
   \   00000B   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    150          
    151          /*********************************************************************
    152           * @fn      afRegisterExtended
    153           *
    154           * @brief   Register an Application's EndPoint description.
    155           *
    156           * @param   epDesc - pointer to the Application's endpoint descriptor.
    157           * @param   descFn - pointer to descriptor callback function
    158           *
    159           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    160           *
    161           * @return  Pointer to epList_t on success, NULL otherwise.
    162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    164          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    165            epList_t *ep;
    166            epList_t *epSearch;
    167          
    168            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV       R2,#0x7
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    169            if ( ep )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   604D         JZ        ??afRegisterExtended_0
    170            {
    171              // Fill in the new list entry
    172              ep->epDesc = epDesc;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   E5..         MOV       A,?V0
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   E5..         MOV       A,?V1
   \   000022   F0           MOVX      @DPTR,A
    173          
    174              // Default to allow Match Descriptor.
    175              ep->flags = eEP_AllowMatch;
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   7401         MOV       A,#0x1
   \   00002B   12....       LCALL     ?Subroutine8 & 0xFFFF
    176              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_4:
   \   00002E   EE           MOV       A,R6
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   EF           MOV       A,R7
   \   000032   12....       LCALL     ?Subroutine8 & 0xFFFF
    177              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_5:
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   F0           MOVX      @DPTR,A
    178          
    179              // Does a list exist?
    180              if ( epList == NULL )
   \   00003B   90....       MOV       DPTR,#epList
   \   00003E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000041   7005         JNZ       ??afRegisterExtended_1
    181                epList = ep;  // Make this the first entry
   \   000043   90....       MOV       DPTR,#epList
   \   000046   8018         SJMP      ??afRegisterExtended_2
    182              else
    183              {
    184                // Look for the end of the list
    185                epSearch = epList;
   \                     ??afRegisterExtended_1:
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F9           MOV       R1,A
    186                while( epSearch->nextDesc != NULL )
    187                  epSearch = epSearch->nextDesc;
   \                     ??afRegisterExtended_3:
   \   00004A   E8           MOV       A,R0
   \   00004B   2405         ADD       A,#0x5
   \   00004D   5001         JNC       ??afRegisterExtended_4
   \   00004F   09           INC       R1
   \                     ??afRegisterExtended_4:
   \   000050   FC           MOV       R4,A
   \   000051   E9           MOV       A,R1
   \   000052   FD           MOV       R5,A
   \   000053   8C82         MOV       DPL,R4
   \   000055   F583         MOV       DPH,A
   \   000057   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00005A   70EE         JNZ       ??afRegisterExtended_3
    188          
    189                // Add new entry to end of list
    190                epSearch->nextDesc = ep;
   \   00005C   8C82         MOV       DPL,R4
   \   00005E   8D83         MOV       DPH,R5
   \                     ??afRegisterExtended_2:
   \   000060   EA           MOV       A,R2
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   EB           MOV       A,R3
   \   000064   F0           MOVX      @DPTR,A
    191              }
    192            }
    193          
    194            return ep;
   \                     ??afRegisterExtended_0:
   \   000065                REQUIRE ?Subroutine1
   \   000065                ; // Fall through to label ?Subroutine1
    195          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
    196          
    197          /*********************************************************************
    198           * @fn      afRegister
    199           *
    200           * @brief   Register an Application's EndPoint description.
    201           *
    202           * @param   epDesc - pointer to the Application's endpoint descriptor.
    203           *
    204           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    205           *
    206           * @return  afStatus_SUCCESS - Registered
    207           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    208           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    211          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    212            epList_t *ep;
    213            
    214            // Look for duplicate endpoint
    215            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   6004         JZ        ??afRegister_0
    216              return ( afStatus_INVALID_PARAMETER );
   \   000016   7902         MOV       R1,#0x2
   \   000018   8015         SJMP      ??afRegister_1
    217            
    218            ep = afRegisterExtended( epDesc, NULL );
    219          
    220            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001A                ; Setup parameters for call to function afRegisterExtended
   \   00001A   7C00         MOV       R4,#0x0
   \   00001C   7D00         MOV       R5,#0x0
   \   00001E   EE           MOV       A,R6
   \   00001F   FA           MOV       R2,A
   \   000020   EF           MOV       A,R7
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000025   EA           MOV       A,R2
   \   000026   4B           ORL       A,R3
   \   000027   7004         JNZ       ??afRegister_2
   \   000029   7910         MOV       R1,#0x10
   \   00002B   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   00002D   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   00002F   02....       LJMP      ?Subroutine2 & 0xFFFF
    221          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    222          
    223          
    224          /*********************************************************************
    225           * @fn          afDataConfirm
    226           *
    227           * @brief       This function will generate the Data Confirm back to
    228           *              the application.
    229           *
    230           * @param       endPoint - confirm end point
    231           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    232           * @param       status - status of APSDE_DATA_REQUEST
    233           *
    234           * @return      none
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
   \   000009   8B..         MOV       ?V0,R3
    238            endPointDesc_t *epDesc;
    239            afDataConfirm_t *msgPtr;
    240          
    241            // Find the endpoint description
    242            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
    243            if ( epDesc == NULL )
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   6030         JZ        ??CrossCallReturnLabel_16
    244              return;
    245          
    246            // Determine the incoming command type
    247            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000016                ; Setup parameters for call to function osal_msg_allocate
   \   000016   7A04         MOV       R2,#0x4
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    248            if ( msgPtr )
   \   00001D   EA           MOV       A,R2
   \   00001E   4B           ORL       A,R3
   \   00001F   6025         JZ        ??CrossCallReturnLabel_16
    249            {
    250              // Build the Data Confirm message
    251              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   74FD         MOV       A,#-0x3
   \   000027   F0           MOVX      @DPTR,A
    252              msgPtr->hdr.status = status;
   \   000028   A3           INC       DPTR
   \   000029   E5..         MOV       A,?V0
   \   00002B   F0           MOVX      @DPTR,A
    253              msgPtr->endpoint = endPoint;
   \   00002C   EE           MOV       A,R6
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
    254              msgPtr->transID = transID;
   \   000034   EF           MOV       A,R7
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   F0           MOVX      @DPTR,A
    255          
    256          #if defined ( MT_AF_CB_FUNC )
    257              /* If MT has subscribed for this callback, don't send as a message. */
    258              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    259              {
    260                /* Send callback if it's subscribed */
    261                MT_AfDataConfirm ((void *)msgPtr);
    262                /* Release the memory. */
    263                osal_msg_deallocate( (void *)msgPtr );
    264              }
    265              else
    266          #endif
    267              {
    268                /* send message through task message */
    269                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   00003D                ; Setup parameters for call to function osal_msg_send
   \   00003D   85..82       MOV       DPL,?V4
   \   000040   85..83       MOV       DPH,?V5
   \   000043   12....       LCALL     ?Subroutine12 & 0xFFFF
    270              }
    271            }
    272          }
   \                     ??CrossCallReturnLabel_16:
   \   000046   7F06         MOV       R7,#0x6
   \   000048   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET
    273          
    274          /*********************************************************************
    275           * @fn          afIncomingData
    276           *
    277           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    278           *
    279           * @param       aff  - pointer to APS frame format
    280           * @param       SrcAddress  - Source address
    281           * @param       sig - incoming message's link quality
    282           * @param       SecurityUse - Security enable/disable
    283           *
    284           * @return      none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    287                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   740A         MOV       A,#0xa
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   7405         MOV       A,#0x5
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E9           MOV       A,R1
   \   000024   F0           MOVX      @DPTR,A
    289            endPointDesc_t *epDesc = NULL;
    290            uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   000025   7403         MOV       A,#0x3
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   74FF         MOV       A,#-0x1
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   F0           MOVX      @DPTR,A
    291            epList_t *pList;
    292          #if !defined ( APS_NO_GROUPS )    
    293            uint8 grpEp;
    294          #endif  
    295          
    296            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00002F   7401         MOV       A,#0x1
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E0           MOVX      A,@DPTR
   \   000035   2402         ADD       A,#0x2
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   3400         ADDC      A,#0x0
   \   00003C   F9           MOV       R1,A
   \   00003D   7408         MOV       A,#0x8
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000045   7401         MOV       A,#0x1
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   2404         ADD       A,#0x4
   \   00004D   F8           MOV       R0,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   3400         ADDC      A,#0x0
   \   000052   F9           MOV       R1,A
   \   000053   7406         MOV       A,#0x6
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00005B   7401         MOV       A,#0x1
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000063   7021         JNZ       ??afIncomingData_0
    297            {
    298          #if !defined ( APS_NO_GROUPS )    
    299              // Find the first endpoint for this group
    300              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000065                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000065   79FE         MOV       R1,#-0x2
   \   000067   7406         MOV       A,#0x6
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ?Subroutine9 & 0xFFFF
    301              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_6:
   \   00006F   7003         JNZ       $+5
   \   000071   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    302                return;   // No endpoint found
    303          
    304              epDesc = afFindEndPointDesc( grpEp );
   \   000074                ; Setup parameters for call to function afFindEndPointDesc
   \   000074   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000077   8A..         MOV       ?V0,R2
   \   000079   8B..         MOV       ?V1,R3
   \   00007B   AE..         MOV       R6,?V0
   \   00007D   AF..         MOV       R7,?V1
    305              if ( epDesc == NULL )
   \   00007F   EA           MOV       A,R2
   \   000080   4F           ORL       A,R7
   \   000081   7042         JNZ       ??afIncomingData_2
    306                return;   // Endpoint descriptor not found
   \   000083   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    307          
    308              pList = afFindEndPointDescList( epDesc->endPoint );
    309          #else
    310              return; // Not supported
    311          #endif    
    312            }
    313            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000086   7408         MOV       A,#0x8
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00008E   F9           MOV       R1,A
   \   00008F   74FF         MOV       A,#-0x1
   \   000091   69           XRL       A,R1
   \   000092   7022         JNZ       ??afIncomingData_3
    314            {
    315              // Set the list
    316              if ( (pList = epList) )
   \   000094   90....       MOV       DPTR,#epList
   \   000097   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00009A   7003         JNZ       $+5
   \   00009C   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    317              {
    318                epDesc = pList->epDesc;
   \   00009F   85..82       MOV       DPL,?V6
   \   0000A2   85..83       MOV       DPH,?V7
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   FE           MOV       R6,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   FF           MOV       R7,A
   \                     ??afIncomingData_4:
   \   0000AA   7420         MOV       A,#0x20
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?L_MOV_X
   \   0000B4   8023         SJMP      ??afIncomingData_5
    319              }
    320            }
    321            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000B6                ; Setup parameters for call to function afFindEndPointDesc
   \   0000B6   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000B9   8B..         MOV       ?V1,R3
   \   0000BB   A9..         MOV       R1,?V1
   \   0000BD   EA           MOV       A,R2
   \   0000BE   FE           MOV       R6,A
   \   0000BF   EB           MOV       A,R3
   \   0000C0   FF           MOV       R7,A
   \   0000C1   EA           MOV       A,R2
   \   0000C2   49           ORL       A,R1
   \   0000C3   60E5         JZ        ??afIncomingData_4
    322            {
    323              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   0000C5                ; Setup parameters for call to function afFindEndPointDescList
   \   0000C5   8E82         MOV       DPL,R6
   \   0000C7   8F83         MOV       DPH,R7
   \   0000C9   12....       LCALL     ?Subroutine20 & 0xFFFF
    324            }
   \                     ??CrossCallReturnLabel_35:
   \   0000CC   80DC         SJMP      ??afIncomingData_4
    325          
    326            while ( epDesc )
    327            {
    328              if ( pList->pfnDescCB )
    329              {
    330                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    331                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    332                if ( pID )
    333                {
    334                  epProfileID = *pID;
    335                  osal_mem_free( pID );
    336                }
    337              }
    338              else if ( epDesc->simpleDesc )
    339              {
    340                epProfileID = epDesc->simpleDesc->AppProfId;
    341              }
    342          
    343              if ( (aff->ProfileID == epProfileID) ||
    344                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    345              {
    346                {
    347                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    348                }
    349              }
    350          
    351              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    352              {
    353          #if !defined ( APS_NO_GROUPS )      
    354                // Find the next endpoint for this group
    355                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    356                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    357                  return;   // No endpoint found
    358          
    359                epDesc = afFindEndPointDesc( grpEp );
    360                if ( epDesc == NULL )
    361                  return;   // Endpoint descriptor not found
    362          
    363                pList = afFindEndPointDescList( epDesc->endPoint );
    364          #else
    365                return;
    366          #endif      
    367              }
    368              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    369              {
    370                pList = pList->nextDesc;
    371                if ( pList )
    372                  epDesc = pList->epDesc;
   \                     ??afIncomingData_6:
   \   0000CE   85..82       MOV       DPL,?V6
   \   0000D1   85..83       MOV       DPH,?V7
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FE           MOV       R6,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   FF           MOV       R7,A
   \                     ??afIncomingData_5:
   \   0000D9   EE           MOV       A,R6
   \   0000DA   4F           ORL       A,R7
   \   0000DB   7003         JNZ       $+5
   \   0000DD   02....       LJMP      ??afIncomingData_1 & 0xFFFF
   \   0000E0   8007         SJMP      ??CrossCallReturnLabel_36
   \                     ??afIncomingData_7:
   \   0000E2                ; Setup parameters for call to function afFindEndPointDescList
   \   0000E2   8A82         MOV       DPL,R2
   \   0000E4   8B83         MOV       DPH,R3
   \   0000E6   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000E9   85..82       MOV       DPL,?V6
   \   0000EC   85..83       MOV       DPH,?V7
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000F5   FD           MOV       R5,A
   \   0000F6   E8           MOV       A,R0
   \   0000F7   4D           ORL       A,R5
   \   0000F8   8E82         MOV       DPL,R6
   \   0000FA   8F83         MOV       DPH,R7
   \   0000FC   6019         JZ        ??afIncomingData_8
   \   0000FE                ; Setup parameters for indirect call
   \   0000FE   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000101   12....       LCALL     ?CALL_IND
   \   000104   EA           MOV       A,R2
   \   000105   4B           ORL       A,R3
   \   000106   601E         JZ        ??CrossCallReturnLabel_51
   \   000108   8A82         MOV       DPL,R2
   \   00010A   8B83         MOV       DPH,R3
   \   00010C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000115   800F         SJMP      ??CrossCallReturnLabel_51
   \                     ??afIncomingData_8:
   \   000117   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00011A   600A         JZ        ??CrossCallReturnLabel_51
   \   00011C   A3           INC       DPTR
   \   00011D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000126   7401         MOV       A,#0x1
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00012E   C8           XCH       A,R0
   \   00012F   2408         ADD       A,#0x8
   \   000131   F582         MOV       DPL,A
   \   000133   E4           CLR       A
   \   000134   38           ADDC      A,R0
   \   000135   F583         MOV       DPH,A
   \   000137   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00013A   12....       LCALL     ?XSTACK_DISP0_8
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   68           XRL       A,R0
   \   00013F   7003         JNZ       ??afIncomingData_9
   \   000141   A3           INC       DPTR
   \   000142   E0           MOVX      A,@DPTR
   \   000143   69           XRL       A,R1
   \                     ??afIncomingData_9:
   \   000144   600B         JZ        ??afIncomingData_10
   \   000146   8E82         MOV       DPL,R6
   \   000148   8F83         MOV       DPH,R7
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   703C         JNZ       ??afIncomingData_11
   \   00014D   E8           MOV       A,R0
   \   00014E   49           ORL       A,R1
   \   00014F   7038         JNZ       ??afIncomingData_11
   \                     ??afIncomingData_10:
   \   000151                ; Setup parameters for call to function afBuildMSGIncoming
   \   000151   78..         MOV       R0,#?V0
   \   000153   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000156   7422         MOV       A,#0x22
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00015E   7422         MOV       A,#0x22
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000166   7412         MOV       A,#0x12
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00016E   740F         MOV       A,#0xf
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   E0           MOVX      A,@DPTR
   \   000174   F9           MOV       R1,A
   \   000175   EE           MOV       A,R6
   \   000176   FC           MOV       R4,A
   \   000177   EF           MOV       A,R7
   \   000178   FD           MOV       R5,A
   \   000179   740B         MOV       A,#0xb
   \   00017B   12....       LCALL     ?XSTACK_DISP0_8
   \   00017E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000181   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   000184   740A         MOV       A,#0xa
   \   000186   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??afIncomingData_11:
   \   000189   7401         MOV       A,#0x1
   \   00018B   12....       LCALL     ?XSTACK_DISP0_8
   \   00018E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000191   7026         JNZ       ??afIncomingData_12
   \   000193                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000193   85..82       MOV       DPL,?XSP + 0
   \   000196   85..83       MOV       DPH,?XSP + 1
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   F9           MOV       R1,A
   \   00019B   7406         MOV       A,#0x6
   \   00019D   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A0   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001A3   6032         JZ        ??afIncomingData_1
   \   0001A5                ; Setup parameters for call to function afFindEndPointDesc
   \   0001A5   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001A8   8A..         MOV       ?V4,R2
   \   0001AA   8B..         MOV       ?V5,R3
   \   0001AC   AE..         MOV       R6,?V4
   \   0001AE   AF..         MOV       R7,?V5
   \   0001B0   EA           MOV       A,R2
   \   0001B1   4F           ORL       A,R7
   \   0001B2   6003         JZ        $+5
   \   0001B4   02....       LJMP      ??afIncomingData_7 & 0xFFFF
   \   0001B7   801E         SJMP      ??afIncomingData_1
   \                     ??afIncomingData_12:
   \   0001B9   7408         MOV       A,#0x8
   \   0001BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BE   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001C1   F4           CPL       A
   \   0001C2   7013         JNZ       ??afIncomingData_1
   \   0001C4   85..82       MOV       DPL,?V6
   \   0001C7   85..83       MOV       DPH,?V7
   \   0001CA   A3           INC       DPTR
   \   0001CB   A3           INC       DPTR
   \   0001CC   A3           INC       DPTR
   \   0001CD   A3           INC       DPTR
   \   0001CE   A3           INC       DPTR
   \   0001CF   12....       LCALL     ?Subroutine15 & 0xFFFF
    373                else
    374                  epDesc = NULL;
    375              }
   \                     ??CrossCallReturnLabel_23:
   \   0001D2   6003         JZ        $+5
   \   0001D4   02....       LJMP      ??afIncomingData_6 & 0xFFFF
    376              else
    377                epDesc = NULL;
    378            }
    379          }
   \                     ??afIncomingData_1:
   \   0001D7   740C         MOV       A,#0xc
   \   0001D9                REQUIRE ?Subroutine3
   \   0001D9                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V7,A
   \   000007   E5..         MOV       A,?V6
   \   000009   45..         ORL       A,?V7
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   540C         ANL       A,#0xc
   \   000005   640C         XRL       A,#0xc
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   64FE         XRL       A,#0xfe
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   7902         MOV       R1,#0x2
   \   000004   8882         MOV       DPL,R0
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000006   E582         MOV       A,DPL
   \   000008   4583         ORL       A,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET
    380          
    381          /*********************************************************************
    382           * @fn          afBuildMSGIncoming
    383           *
    384           * @brief       Build the message for the app
    385           *
    386           * @param
    387           *
    388           * @return      pointer to next in data buffer
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    391                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    392                           byte SecurityUse, uint32 timestamp )
    393          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V0,R2
   \   000014   8B..         MOV       ?V1,R3
   \   000016   8C..         MOV       ?V6,R4
   \   000018   8D..         MOV       ?V7,R5
    394            afIncomingMSGPacket_t *MSGpkt;
    395            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    396            byte *asdu = aff->asdu;
   \   00001A   EA           MOV       A,R2
   \   00001B   240E         ADD       A,#0xe
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V1
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000027   7401         MOV       A,#0x1
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    397            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_52:
   \   00002F   EA           MOV       A,R2
   \   000030   2410         ADD       A,#0x10
   \   000032   F5..         MOV       ?V2,A
   \   000034   E4           CLR       A
   \   000035   35..         ADDC      A,?V1
   \   000037   F5..         MOV       ?V3,A
   \   000039                ; Setup parameters for call to function osal_msg_allocate
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   2423         ADD       A,#0x23
   \   000041   FA           MOV       R2,A
   \   000042   7B00         MOV       R3,#0x0
   \   000044   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   AE..         MOV       R6,?V4
   \   00004D   AF..         MOV       R7,?V5
    398          
    399            if ( MSGpkt == NULL )
   \   00004F   EA           MOV       A,R2
   \   000050   4F           ORL       A,R7
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??CrossCallReturnLabel_17 & 0xFFFF
    400            {
    401              return;
    402            }
    403          
    404            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000056   8A82         MOV       DPL,R2
   \   000058   8B83         MOV       DPH,R3
   \   00005A   741A         MOV       A,#0x1a
   \   00005C   12....       LCALL     ?Subroutine5 & 0xFFFF
    405            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_0:
   \   00005F   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000062   E8           MOV       A,R0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E9           MOV       A,R1
   \   000066   12....       LCALL     ?Subroutine5 & 0xFFFF
    406            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_1:
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    407            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_53:
   \   000073                ; Setup parameters for call to function afCopyAddress
   \   000073   7413         MOV       A,#0x13
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   E0           MOVX      A,@DPTR
   \   000079   FC           MOV       R4,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   FD           MOV       R5,A
   \   00007D   EA           MOV       A,R2
   \   00007E   2406         ADD       A,#0x6
   \   000080   FA           MOV       R2,A
   \   000081   E4           CLR       A
   \   000082   3F           ADDC      A,R7
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    408            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000087   85..82       MOV       DPL,?V0
   \   00008A   85..83       MOV       DPH,?V1
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C0E0         PUSH      A
   \   000093   EE           MOV       A,R6
   \   000094   240F         ADD       A,#0xf
   \   000096   F582         MOV       DPL,A
   \   000098   E4           CLR       A
   \   000099   3F           ADDC      A,R7
   \   00009A   F583         MOV       DPH,A
   \   00009C   D0E0         POP       A
   \   00009E   F0           MOVX      @DPTR,A
    409            MSGpkt->endPoint = epDesc->endPoint;
   \   00009F   85..82       MOV       DPL,?V6
   \   0000A2   85..83       MOV       DPH,?V7
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   C0E0         PUSH      A
   \   0000A8   EE           MOV       A,R6
   \   0000A9   2414         ADD       A,#0x14
   \   0000AB   F582         MOV       DPL,A
   \   0000AD   E4           CLR       A
   \   0000AE   3F           ADDC      A,R7
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   D0E0         POP       A
   \   0000B3   F0           MOVX      @DPTR,A
    410            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000B4   E5..         MOV       A,?V0
   \   0000B6   240C         ADD       A,#0xc
   \   0000B8   F582         MOV       DPL,A
   \   0000BA   E4           CLR       A
   \   0000BB   35..         ADDC      A,?V1
   \   0000BD   F583         MOV       DPH,A
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   C0E0         PUSH      A
   \   0000C2   EE           MOV       A,R6
   \   0000C3   2415         ADD       A,#0x15
   \   0000C5   F582         MOV       DPL,A
   \   0000C7   E4           CLR       A
   \   0000C8   3F           ADDC      A,R7
   \   0000C9   F583         MOV       DPH,A
   \   0000CB   D0E0         POP       A
   \   0000CD   F0           MOVX      @DPTR,A
   \   0000CE   7417         MOV       A,#0x17
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL     ??Subroutine30_0 & 0xFFFF
    411            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_62:
   \   0000D6   8882         MOV       DPL,R0
   \   0000D8   F583         MOV       DPH,A
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   C0E0         PUSH      A
   \   0000DD   EE           MOV       A,R6
   \   0000DE   2416         ADD       A,#0x16
   \   0000E0   F582         MOV       DPL,A
   \   0000E2   E4           CLR       A
   \   0000E3   3F           ADDC      A,R7
   \   0000E4   F583         MOV       DPH,A
   \   0000E6   D0E0         POP       A
   \   0000E8   F0           MOVX      @DPTR,A
    412            MSGpkt->correlation = sig->correlation;
   \   0000E9   8882         MOV       DPL,R0
   \   0000EB   8983         MOV       DPH,R1
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   C0E0         PUSH      A
   \   0000F1   EE           MOV       A,R6
   \   0000F2   2417         ADD       A,#0x17
   \   0000F4   F582         MOV       DPL,A
   \   0000F6   E4           CLR       A
   \   0000F7   3F           ADDC      A,R7
   \   0000F8   F583         MOV       DPH,A
   \   0000FA   D0E0         POP       A
   \   0000FC   F0           MOVX      @DPTR,A
    413            MSGpkt->rssi = sig->rssi;
   \   0000FD   8882         MOV       DPL,R0
   \   0000FF   8983         MOV       DPH,R1
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   E0           MOVX      A,@DPTR
   \   000104   C0E0         PUSH      A
   \   000106   EE           MOV       A,R6
   \   000107   2418         ADD       A,#0x18
   \   000109   F582         MOV       DPL,A
   \   00010B   E4           CLR       A
   \   00010C   3F           ADDC      A,R7
   \   00010D   F583         MOV       DPH,A
   \   00010F   D0E0         POP       A
   \   000111   F0           MOVX      @DPTR,A
    414            MSGpkt->SecurityUse = SecurityUse;
   \   000112   85..82       MOV       DPL,?XSP + 0
   \   000115   85..83       MOV       DPH,?XSP + 1
   \   000118   E0           MOVX      A,@DPTR
   \   000119   C0E0         PUSH      A
   \   00011B   EE           MOV       A,R6
   \   00011C   2419         ADD       A,#0x19
   \   00011E   F582         MOV       DPL,A
   \   000120   E4           CLR       A
   \   000121   3F           ADDC      A,R7
   \   000122   F583         MOV       DPH,A
   \   000124   D0E0         POP       A
   \   000126   F0           MOVX      @DPTR,A
    415            MSGpkt->timestamp = timestamp;
   \   000127   7419         MOV       A,#0x19
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   12....       LCALL     ?XLOAD_R0123
   \   00012F   EE           MOV       A,R6
   \   000130   241A         ADD       A,#0x1a
   \   000132   F582         MOV       DPL,A
   \   000134   E4           CLR       A
   \   000135   3F           ADDC      A,R7
   \   000136   F583         MOV       DPH,A
   \   000138   12....       LCALL     ?XSTORE_R0123
    416            MSGpkt->macDestAddr = aff->macDestAddr;
   \   00013B   85..82       MOV       DPL,?V0
   \   00013E   85..83       MOV       DPH,?V1
   \   000141   A3           INC       DPTR
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00014B   EE           MOV       A,R6
   \   00014C   2412         ADD       A,#0x12
   \   00014E   12....       LCALL     ?Subroutine7 & 0xFFFF
    417            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_59:
   \   000151   7415         MOV       A,#0x15
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000159   EE           MOV       A,R6
   \   00015A   2410         ADD       A,#0x10
   \   00015C   12....       LCALL     ?Subroutine7 & 0xFFFF
    418            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_60:
   \   00015F   EE           MOV       A,R6
   \   000160   241E         ADD       A,#0x1e
   \   000162   F582         MOV       DPL,A
   \   000164   E4           CLR       A
   \   000165   3F           ADDC      A,R7
   \   000166   F583         MOV       DPH,A
   \   000168   E4           CLR       A
   \   000169   F0           MOVX      @DPTR,A
    419            MSGpkt->cmd.DataLength = aff->asduLength;
   \   00016A   85..82       MOV       DPL,?V2
   \   00016D   85..83       MOV       DPH,?V3
   \   000170   E0           MOVX      A,@DPTR
   \   000171   F8           MOV       R0,A
   \   000172   EE           MOV       A,R6
   \   000173   241F         ADD       A,#0x1f
   \   000175   FC           MOV       R4,A
   \   000176   E4           CLR       A
   \   000177   3F           ADDC      A,R7
   \   000178   FD           MOV       R5,A
   \   000179   8C82         MOV       DPL,R4
   \   00017B   F583         MOV       DPH,A
   \   00017D   E8           MOV       A,R0
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   A3           INC       DPTR
   \   000180   E4           CLR       A
   \   000181   F0           MOVX      @DPTR,A
    420          
    421            if ( MSGpkt->cmd.DataLength )
   \   000182   EE           MOV       A,R6
   \   000183   2421         ADD       A,#0x21
   \   000185   F582         MOV       DPL,A
   \   000187   E4           CLR       A
   \   000188   3F           ADDC      A,R7
   \   000189   F583         MOV       DPH,A
   \   00018B   E8           MOV       A,R0
   \   00018C   6033         JZ        ??afBuildMSGIncoming_0
    422            {
    423              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   00018E   EE           MOV       A,R6
   \   00018F   2423         ADD       A,#0x23
   \   000191   FA           MOV       R2,A
   \   000192   E4           CLR       A
   \   000193   3F           ADDC      A,R7
   \   000194   FB           MOV       R3,A
   \   000195   EA           MOV       A,R2
   \   000196   F0           MOVX      @DPTR,A
   \   000197   A3           INC       DPTR
   \   000198   EB           MOV       A,R3
   \   000199   F0           MOVX      @DPTR,A
    424              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   00019A                ; Setup parameters for call to function osal_memcpy
   \   00019A   7401         MOV       A,#0x1
   \   00019C   12....       LCALL     ?XSTACK_DISP0_8
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   F5..         MOV       ?V0,A
   \   0001A2   A3           INC       DPTR
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   F5..         MOV       ?V1,A
   \   0001A6   75..00       MOV       ?V2,#0x0
   \   0001A9   78..         MOV       R0,#?V0
   \   0001AB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001AE   8C82         MOV       DPL,R4
   \   0001B0   8D83         MOV       DPH,R5
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   FC           MOV       R4,A
   \   0001B4   A3           INC       DPTR
   \   0001B5   E0           MOVX      A,@DPTR
   \   0001B6   FD           MOV       R5,A
   \   0001B7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001BA   7403         MOV       A,#0x3
   \   0001BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BF   8004         SJMP      ??afBuildMSGIncoming_1
    425            }
    426            else
    427            {
    428              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_0:
   \   0001C1   E4           CLR       A
   \   0001C2   F0           MOVX      @DPTR,A
   \   0001C3   A3           INC       DPTR
   \   0001C4   F0           MOVX      @DPTR,A
    429            }
    430          
    431          #if defined ( MT_AF_CB_FUNC )
    432            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    433            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    434            {
    435              MT_AfIncomingMsg( (void *)MSGpkt );
    436              // Release the memory.
    437              osal_msg_deallocate( (void *)MSGpkt );
    438            }
    439            else
    440          #endif
    441            {
    442              // Send message through task message.
    443              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_1:
   \   0001C5                ; Setup parameters for call to function osal_msg_send
   \   0001C5   EE           MOV       A,R6
   \   0001C6   FA           MOV       R2,A
   \   0001C7   EF           MOV       A,R7
   \   0001C8   FB           MOV       R3,A
   \   0001C9   85..82       MOV       DPL,?V6
   \   0001CC   85..83       MOV       DPH,?V7
   \   0001CF   12....       LCALL     ?Subroutine12 & 0xFFFF
    444            }
    445          }
   \                     ??CrossCallReturnLabel_17:
   \   0001D2   7403         MOV       A,#0x3
   \   0001D4   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine28_0
   \   000006                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine29_0
   \   000002                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine30_0
   \   000001                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   22           RET
    446          
    447          /*********************************************************************
    448           * @fn      AF_DataRequest
    449           *
    450           * @brief   Common functionality for invoking APSDE_DataReq() for both
    451           *          SendMulti and MSG-Send.
    452           *
    453           * input parameters
    454           *
    455           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    456           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    457           * @param   cID - A valid cluster ID as specified by the Profile.
    458           * @param   len - Number of bytes of data pointed to by next param.
    459           * @param  *buf - A pointer to the data bytes to send.
    460           * @param  *transID - A pointer to a byte which can be modified and which will
    461           *                    be used as the transaction sequence number of the msg.
    462           * @param   options - Valid bit mask of Tx options.
    463           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    464           *
    465           * output parameters
    466           *
    467           * @param  *transID - Incremented by one if the return value is success.
    468           *
    469           * @return  afStatus_t - See previous definition of afStatus_... types.
    470           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    471          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    473                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    474                                     uint8 options, uint8 radius )
    475          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV       A,#-0x1e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V6,R1
    476            pDescCB pfnDescCB;
    477            ZStatus_t stat;
    478            APSDE_DataReq_t req;
    479            afDataReqMTU_t mtu;
    480          
    481            // Verify source end point
    482            if ( srcEP == NULL )
   \   000014   EC           MOV       A,R4
   \   000015   4F           ORL       A,R7
   \   000016   6069         JZ        ??AF_DataRequest_0
    483            {
    484              return afStatus_INVALID_PARAMETER;
    485            }
    486          
    487          #if !defined( REFLECTOR )
    488            if ( dstAddr->addrMode == afAddrNotPresent )
    489            {
    490              return afStatus_INVALID_PARAMETER;
    491            }
    492          #endif
    493          
    494            // Validate broadcasting
    495            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    496                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \   000018   EA           MOV       A,R2
   \   000019   2408         ADD       A,#0x8
   \   00001B   F5..         MOV       ?V0,A
   \   00001D   E4           CLR       A
   \   00001E   35..         ADDC      A,?V3
   \   000020   F5..         MOV       ?V1,A
   \   000022   85..82       MOV       DPL,?V0
   \   000025   F583         MOV       DPH,A
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   7402         MOV       A,#0x2
   \   00002B   68           XRL       A,R0
   \   00002C   6005         JZ        ??AF_DataRequest_1
   \   00002E   740F         MOV       A,#0xf
   \   000030   68           XRL       A,R0
   \   000031   7041         JNZ       ??AF_DataRequest_2
    497            {
    498              // Check for valid broadcast values
    499              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_1:
   \   000033                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00003A   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00003D   E9           MOV       A,R1
   \   00003E   85..82       MOV       DPL,?V0
   \   000041   85..83       MOV       DPH,?V1
   \   000044   6027         JZ        ??AF_DataRequest_3
    500              {
    501                // Force mode to broadcast
    502                dstAddr->addrMode = afAddrBroadcast;
   \   000046   740F         MOV       A,#0xf
   \   000048   F0           MOVX      @DPTR,A
    503              }
    504              else
    505              {
    506                // Address is not a valid broadcast type
    507                if ( dstAddr->addrMode == afAddrBroadcast )
    508                {
    509                  return afStatus_INVALID_PARAMETER;
    510                }
    511              }
    512            }
    513            else if ( dstAddr->addrMode != afAddr64Bit &&
    514                      dstAddr->addrMode != afAddrGroup &&
    515                      dstAddr->addrMode != afAddrNotPresent )
    516            {
    517              return afStatus_INVALID_PARAMETER;
    518            }
    519            
    520            // Set destination address
    521            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_4:
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   C0E0         PUSH      A
   \   00004C   740A         MOV       A,#0xa
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   D0E0         POP       A
   \   000053   F0           MOVX      @DPTR,A
    522            if ( dstAddr->addrMode == afAddr64Bit )
   \   000054   85..82       MOV       DPL,?V0
   \   000057   85..83       MOV       DPH,?V1
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   6403         XRL       A,#0x3
   \   00005D   7027         JNZ       ??AF_DataRequest_5
    523              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   00005F                ; Setup parameters for call to function sAddrExtCpy
   \   00005F   AC..         MOV       R4,?V2
   \   000061   AD..         MOV       R5,?V3
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP101_8
   \   000068   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00006B   802A         SJMP      ??CrossCallReturnLabel_54
   \                     ??AF_DataRequest_3:
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   640F         XRL       A,#0xf
   \   000070   70D7         JNZ       ??AF_DataRequest_4
   \   000072   800D         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_2:
   \   000074   7403         MOV       A,#0x3
   \   000076   68           XRL       A,R0
   \   000077   60D0         JZ        ??AF_DataRequest_4
   \   000079   7401         MOV       A,#0x1
   \   00007B   68           XRL       A,R0
   \   00007C   60CB         JZ        ??AF_DataRequest_4
   \   00007E   E8           MOV       A,R0
   \   00007F   60C8         JZ        ??AF_DataRequest_4
   \                     ??AF_DataRequest_0:
   \   000081   7902         MOV       R1,#0x2
   \   000083   02....       LJMP      ??AF_DataRequest_6 & 0xFFFF
    524            else
    525              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_5:
   \   000086   85..82       MOV       DPL,?V2
   \   000089   85..83       MOV       DPH,?V3
   \   00008C   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00008F   7402         MOV       A,#0x2
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    526            
    527            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_54:
   \   000097   7411         MOV       A,#0x11
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   E4           CLR       A
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   A3           INC       DPTR
   \   00009F   F0           MOVX      @DPTR,A
    528          
    529            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000A0   90....       MOV       DPTR,#epList
   \   0000A3   8002         SJMP      ??AF_DataRequest_7
   \                     ??AF_DataRequest_8:
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \                     ??AF_DataRequest_7:
   \   0000A7   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000AA   603D         JZ        ??AF_DataRequest_9
   \   0000AC   8882         MOV       DPL,R0
   \   0000AE   8983         MOV       DPH,R1
   \   0000B0   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000B3   EE           MOV       A,R6
   \   0000B4   6A           XRL       A,R2
   \   0000B5   7002         JNZ       ??AF_DataRequest_10
   \   0000B7   EF           MOV       A,R7
   \   0000B8   6B           XRL       A,R3
   \                     ??AF_DataRequest_10:
   \   0000B9   8882         MOV       DPL,R0
   \   0000BB   8983         MOV       DPH,R1
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   70E3         JNZ       ??AF_DataRequest_8
   \   0000C2   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C5   FD           MOV       R5,A
   \   0000C6   E8           MOV       A,R0
   \   0000C7   4D           ORL       A,R5
   \   0000C8   601F         JZ        ??AF_DataRequest_9
    530            {
    531              uint16 *pID = (uint16 *)(pfnDescCB(
    532                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   0000CA                ; Setup parameters for indirect call
   \   0000CA   8E82         MOV       DPL,R6
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000D1   12....       LCALL     ?CALL_IND
    533              if ( pID )
   \   0000D4   EA           MOV       A,R2
   \   0000D5   4B           ORL       A,R3
   \   0000D6   6025         JZ        ??CrossCallReturnLabel_55
    534              {
    535                req.profileID = *pID;
   \   0000D8   8A82         MOV       DPL,R2
   \   0000DA   8B83         MOV       DPH,R3
   \   0000DC   12....       LCALL     ??Subroutine30_0 & 0xFFFF
    536                osal_mem_free( pID );
    537              }
    538            }
   \                     ??CrossCallReturnLabel_65:
   \   0000DF   7411         MOV       A,#0x11
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000E7   8014         SJMP      ??CrossCallReturnLabel_55
    539            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_9:
   \   0000E9   8E82         MOV       DPL,R6
   \   0000EB   8F83         MOV       DPH,R7
   \   0000ED   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000F0   600B         JZ        ??CrossCallReturnLabel_55
    540            {
    541              req.profileID = srcEP->simpleDesc->AppProfId;
   \   0000F2   12....       LCALL     ??Subroutine29_0 & 0xFFFF
    542            }
   \                     ??CrossCallReturnLabel_69:
   \   0000F5   7411         MOV       A,#0x11
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    543          
    544            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_55:
   \   0000FD   7417         MOV       A,#0x17
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   E4           CLR       A
   \   000103   F0           MOVX      @DPTR,A
   \   000104   A3           INC       DPTR
   \   000105   F0           MOVX      @DPTR,A
    545          
    546            if ( ( options & AF_ACK_REQUEST              ) &&
    547                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    548                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000106   E5..         MOV       A,?V6
   \   000108   A2E4         MOV       C,0xE0 /* A   */.4
   \   00010A   501C         JNC       ??AF_DataRequest_11
   \   00010C   740A         MOV       A,#0xa
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   E0           MOVX      A,@DPTR
   \   000112   F8           MOV       R0,A
   \   000113   740F         MOV       A,#0xf
   \   000115   68           XRL       A,R0
   \   000116   6010         JZ        ??AF_DataRequest_11
   \   000118   7401         MOV       A,#0x1
   \   00011A   68           XRL       A,R0
   \   00011B   600B         JZ        ??AF_DataRequest_11
    549            {
    550              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00011D   7417         MOV       A,#0x17
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   7404         MOV       A,#0x4
   \   000124   F0           MOVX      @DPTR,A
   \   000125   A3           INC       DPTR
   \   000126   E4           CLR       A
   \   000127   F0           MOVX      @DPTR,A
    551            }
    552          
    553            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_11:
   \   000128   E5..         MOV       A,?V6
   \   00012A   A2E7         MOV       C,0xE0 /* A   */.7
   \   00012C   5009         JNC       ??AF_DataRequest_12
    554            {
    555              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   00012E   7417         MOV       A,#0x17
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   E0           MOVX      A,@DPTR
   \   000134   4410         ORL       A,#0x10
   \   000136   F0           MOVX      @DPTR,A
    556            }
    557          
    558            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_12:
   \   000137   E5..         MOV       A,?V6
   \   000139   A2E6         MOV       C,0xE0 /* A   */.6
   \   00013B   5012         JNC       ??AF_DataRequest_13
    559            {
    560              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   00013D   7417         MOV       A,#0x17
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   E0           MOVX      A,@DPTR
   \   000143   4401         ORL       A,#0x1
   \   000145   F0           MOVX      @DPTR,A
    561              mtu.aps.secure = TRUE;
   \   000146   7401         MOV       A,#0x1
   \   000148   12....       LCALL     ?XSTACK_DISP0_8
   \   00014B   7401         MOV       A,#0x1
   \   00014D   8006         SJMP      ??AF_DataRequest_14
    562            }
    563            else
    564            {
    565              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_13:
   \   00014F   7401         MOV       A,#0x1
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   E4           CLR       A
   \                     ??AF_DataRequest_14:
   \   000155   F0           MOVX      @DPTR,A
    566            }
    567          
    568            mtu.kvp = FALSE;
   \   000156   85..82       MOV       DPL,?XSP + 0
   \   000159   85..83       MOV       DPH,?XSP + 1
   \   00015C   E4           CLR       A
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E   7433         MOV       A,#0x33
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   E0           MOVX      A,@DPTR
   \   000164   F5..         MOV       ?V4,A
   \   000166   A3           INC       DPTR
   \   000167   E0           MOVX      A,@DPTR
   \   000168   F5..         MOV       ?V5,A
    569          
    570            req.transID       = *transID;
   \   00016A   85..82       MOV       DPL,?V4
   \   00016D   F583         MOV       DPH,A
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   C0E0         PUSH      A
   \   000172   7419         MOV       A,#0x19
   \   000174   12....       LCALL     ?XSTACK_DISP0_8
   \   000177   D0E0         POP       A
   \   000179   F0           MOVX      @DPTR,A
    571            req.srcEP         = srcEP->endPoint;
   \   00017A   8E82         MOV       DPL,R6
   \   00017C   8F83         MOV       DPH,R7
   \   00017E   E0           MOVX      A,@DPTR
   \   00017F   C0E0         PUSH      A
   \   000181   740B         MOV       A,#0xb
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   D0E0         POP       A
   \   000188   F0           MOVX      @DPTR,A
    572            req.dstEP         = dstAddr->endPoint;
   \   000189   85..82       MOV       DPL,?V2
   \   00018C   85..83       MOV       DPH,?V3
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   A3           INC       DPTR
   \   000196   A3           INC       DPTR
   \   000197   A3           INC       DPTR
   \   000198   E0           MOVX      A,@DPTR
   \   000199   C0E0         PUSH      A
   \   00019B   740C         MOV       A,#0xc
   \   00019D   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A0   D0E0         POP       A
   \   0001A2   F0           MOVX      @DPTR,A
    573            req.clusterID     = cID;
   \   0001A3   742D         MOV       A,#0x2d
   \   0001A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A8   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001AB   740F         MOV       A,#0xf
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001B3   742F         MOV       A,#0x2f
   \   0001B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B8   E0           MOVX      A,@DPTR
   \   0001B9   F5..         MOV       ?V0,A
   \   0001BB   A3           INC       DPTR
   \   0001BC   E0           MOVX      A,@DPTR
   \   0001BD   F5..         MOV       ?V1,A
    574            req.asduLen       = len;
   \   0001BF   7413         MOV       A,#0x13
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   E5..         MOV       A,?V0
   \   0001C6   F0           MOVX      @DPTR,A
   \   0001C7   A3           INC       DPTR
   \   0001C8   E5..         MOV       A,?V1
   \   0001CA   F0           MOVX      @DPTR,A
    575            req.asdu          = buf;
   \   0001CB   7431         MOV       A,#0x31
   \   0001CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D0   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001D3   7415         MOV       A,#0x15
   \   0001D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D8   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    576            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \                     ??CrossCallReturnLabel_57:
   \   0001DB   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   C0E0         PUSH      A
   \   0001E1   741A         MOV       A,#0x1a
   \   0001E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E6   D0E0         POP       A
   \   0001E8   F0           MOVX      @DPTR,A
    577            req.radiusCounter = radius;
   \   0001E9   7435         MOV       A,#0x35
   \   0001EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   C0E0         PUSH      A
   \   0001F1   741B         MOV       A,#0x1b
   \   0001F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F6   D0E0         POP       A
   \   0001F8   F0           MOVX      @DPTR,A
    578          #if defined ( INTER_PAN )
    579            req.dstPanId      = dstAddr->panId;
    580          
    581            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    582            {
    583              if ( len > INTERP_DataReqMTU() )
    584              {
    585                stat = afStatus_INVALID_PARAMETER;
    586              }
    587              else
    588              {
    589                stat = INTERP_DataReq( &req );
    590              }
    591            }
    592            else
    593          #endif // INTER_PAN
    594            {
    595              if (len > afDataReqMTU( &mtu ) )
   \   0001F9                ; Setup parameters for call to function afDataReqMTU
   \   0001F9   AA..         MOV       R2,?XSP + 0
   \   0001FB   AB..         MOV       R3,?XSP + 1
   \   0001FD   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000200   E9           MOV       A,R1
   \   000201   C3           CLR       C
   \   000202   95..         SUBB      A,?V0
   \   000204   E4           CLR       A
   \   000205   95..         SUBB      A,?V1
   \   000207   501C         JNC       ??AF_DataRequest_15
    596              {
    597                if (apsfSendFragmented)
   \   000209   90....       MOV       DPTR,#apsfSendFragmented
   \   00020C   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00020F   600F         JZ        ??AF_DataRequest_16
    598                {
    599                  stat = (*apsfSendFragmented)( &req );
   \   000211                ; Setup parameters for indirect call
   \   000211   7402         MOV       A,#0x2
   \   000213   12....       LCALL     ?XSTACK_DISP101_8
   \   000216   E0           MOVX      A,@DPTR
   \   000217   F583         MOV       DPH,A
   \   000219   8882         MOV       DPL,R0
   \   00021B   12....       LCALL     ?CALL_IND
   \   00021E   800D         SJMP      ??AF_DataRequest_17
    600                }
    601                else
    602                {
    603                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_16:
   \   000220   75..02       MOV       ?V0,#0x2
   \   000223   800B         SJMP      ??AF_DataRequest_18
    604                }
    605              }
    606              else
    607              {
    608                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_15:
   \   000225                ; Setup parameters for call to function APSDE_DataReq
   \   000225   7402         MOV       A,#0x2
   \   000227   12....       LCALL     ?XSTACK_DISP101_8
   \   00022A   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_17:
   \   00022D   E9           MOV       A,R1
   \   00022E   F5..         MOV       ?V0,A
    609              }
    610            }
    611          
    612            /*
    613             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    614             * get added to the NWK databufs. So it will not go OTA and it will not get
    615             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    616             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    617             * message with the first in line TransSeqNumber, even on a multi message.
    618             * Also note that a reflected msg will not have its confirmation generated
    619             * here.
    620             */
    621            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    622                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_18:
   \   000230   740A         MOV       A,#0xa
   \   000232   12....       LCALL     ?XSTACK_DISP0_8
   \   000235   E0           MOVX      A,@DPTR
   \   000236   6402         XRL       A,#0x2
   \   000238   702C         JNZ       ??AF_DataRequest_19
   \   00023A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00023A   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00023D   8A..         MOV       ?V2,R2
   \   00023F   8B..         MOV       ?V3,R3
   \   000241   A8..         MOV       R0,?V2
   \   000243   A9..         MOV       R1,?V3
   \   000245   7402         MOV       A,#0x2
   \   000247   12....       LCALL     ?XSTACK_DISP0_8
   \   00024A   E0           MOVX      A,@DPTR
   \   00024B   68           XRL       A,R0
   \   00024C   7003         JNZ       ??AF_DataRequest_20
   \   00024E   A3           INC       DPTR
   \   00024F   E0           MOVX      A,@DPTR
   \   000250   69           XRL       A,R1
   \                     ??AF_DataRequest_20:
   \   000251   7013         JNZ       ??AF_DataRequest_19
    623            {
    624              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000253                ; Setup parameters for call to function afDataConfirm
   \   000253   AB..         MOV       R3,?V0
   \   000255   85..82       MOV       DPL,?V4
   \   000258   85..83       MOV       DPH,?V5
   \   00025B   E0           MOVX      A,@DPTR
   \   00025C   FA           MOV       R2,A
   \   00025D   8E82         MOV       DPL,R6
   \   00025F   8F83         MOV       DPH,R7
   \   000261   E0           MOVX      A,@DPTR
   \   000262   F9           MOV       R1,A
   \   000263   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    625            }
    626          
    627            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_19:
   \   000266   E5..         MOV       A,?V0
   \   000268   7009         JNZ       ??AF_DataRequest_21
    628            {
    629              (*transID)++;
   \   00026A   85..82       MOV       DPL,?V4
   \   00026D   85..83       MOV       DPH,?V5
   \   000270   E0           MOVX      A,@DPTR
   \   000271   04           INC       A
   \   000272   F0           MOVX      @DPTR,A
    630            }
    631          
    632            return (afStatus_t)stat;
   \                     ??AF_DataRequest_21:
   \   000273   A9..         MOV       R1,?V0
   \                     ??AF_DataRequest_6:
   \   000275   741E         MOV       A,#0x1e
   \   000277   12....       LCALL     ?DEALLOC_XSTACK8
   \   00027A   7F07         MOV       R7,#0x7
   \   00027C   02....       LJMP      ?BANKED_LEAVE_XDATA
    633          }
    634          
    635          /*********************************************************************
    636           * @fn      afFindEndPointDescList
    637           *
    638           * @brief   Find the endpoint description entry from the endpoint
    639           *          number.
    640           *
    641           * @param   EndPoint - Application Endpoint to look for
    642           *
    643           * @return  the address to the endpoint/interface description entry
    644           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    646          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    647            epList_t *epSearch;
    648          
    649            // Start at the beginning
    650            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8009         SJMP      ??afFindEndPointDescList_0
    651          
    652            // Look through the list until the end
    653            while ( epSearch )
    654            {
    655              // Is there a match?
    656              if ( epSearch->epDesc->endPoint == EndPoint )
    657              {
    658                return ( epSearch );
    659              }
    660              else
    661                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   600C         JZ        ??afFindEndPointDescList_2
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000020   69           XRL       A,R1
   \   000021   70E6         JNZ       ??afFindEndPointDescList_1
   \   000023   8004         SJMP      ??afFindEndPointDescList_3
    662            }
    663          
    664            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_2:
   \   000025   7A00         MOV       R2,#0x0
   \   000027   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDescList_3:
   \   000029   02....       LJMP      ?Subroutine0 & 0xFFFF
    665          }
    666          
    667          /*********************************************************************
    668           * @fn      afFindEndPointDesc
    669           *
    670           * @brief   Find the endpoint description entry from the endpoint
    671           *          number.
    672           *
    673           * @param   EndPoint - Application Endpoint to look for
    674           *
    675           * @return  the address to the endpoint/interface description entry
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    678          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    679            epList_t *epSearch;
    680          
    681            // Look for the endpoint
    682            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine22 & 0xFFFF
    683          
    684            if ( epSearch )
   \                     ??CrossCallReturnLabel_39:
   \   000008   6005         JZ        ??afFindEndPointDesc_0
    685              return ( epSearch->epDesc );
   \   00000A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00000D   8004         SJMP      ??afFindEndPointDesc_1
    686            else
    687              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000013   02....       LJMP      ?Subroutine2 & 0xFFFF
    688          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
    689          
    690          /*********************************************************************
    691           * @fn      afFindSimpleDesc
    692           *
    693           * @brief   Find the Simple Descriptor from the endpoint number.
    694           *
    695           * @param   EP - Application Endpoint to look for.
    696           *
    697           * @return  Non-zero to indicate that the descriptor memory must be freed.
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    701            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    702            byte rtrn = FALSE;
   \   000016   7A00         MOV       R2,#0x0
    703          
    704            if ( epItem )
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   6031         JZ        ??afFindSimpleDesc_0
    705            {
    706              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8B83         MOV       DPH,R3
   \   000020   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000023   6014         JZ        ??afFindSimpleDesc_1
    707              {
    708                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000025                ; Setup parameters for indirect call
   \   000025   AA..         MOV       R2,?V0
   \   000027   7901         MOV       R1,#0x1
   \   000029   12....       LCALL     ?CALL_IND
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   EA           MOV       A,R2
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   EB           MOV       A,R3
   \   000034   F0           MOVX      @DPTR,A
    709                rtrn = TRUE;
   \   000035   7A01         MOV       R2,#0x1
   \   000037   801C         SJMP      ??afFindSimpleDesc_2
    710              }
    711              else
    712              {
    713                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000039   8C82         MOV       DPL,R4
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   12....       LCALL     ?Subroutine26 & 0xFFFF
    714              }
    715            }
   \                     ??CrossCallReturnLabel_47:
   \   000040   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   E8           MOV       A,R0
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E9           MOV       A,R1
   \   00004B   8007         SJMP      ??afFindSimpleDesc_3
    716            else
    717            {
    718              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   E4           CLR       A
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   000054   F0           MOVX      @DPTR,A
    719            }
    720          
    721            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000055   EA           MOV       A,R2
   \   000056   F9           MOV       R1,A
   \   000057   02....       LJMP      ?Subroutine1 & 0xFFFF
    722          }
    723          
    724          /*********************************************************************
    725           * @fn      afGetDescCB
    726           *
    727           * @brief   Get the Descriptor callback function.
    728           *
    729           * @param   epDesc - pointer to the endpoint descriptor
    730           *
    731           * @return  function pointer or NULL
    732           */
    733          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    734          {
    735            epList_t *epSearch;
    736          
    737            // Start at the beginning
    738            epSearch = epList;
    739          
    740            // Look through the list until the end
    741            while ( epSearch )
    742            {
    743              // Is there a match?
    744              if ( epSearch->epDesc == epDesc )
    745              {
    746                return ( epSearch->pfnDescCB );
    747              }
    748              else
    749                epSearch = epSearch->nextDesc;  // Next entry
    750            }
    751          
    752            return ( (pDescCB)NULL );
    753          }
    754          
    755          /*********************************************************************
    756           * @fn      afDataReqMTU
    757           *
    758           * @brief   Get the Data Request MTU(Max Transport Unit).
    759           *
    760           * @param   fields - afDataReqMTU_t
    761           *
    762           * @return  uint8(MTU)
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    765          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    766            uint8 len;
    767            uint8 hdr;
    768          
    769            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
    770            {
    771              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
    772            }
    773            else
    774            {
    775              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
    776            }
    777          
    778            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    779          
    780            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   \   000020                REQUIRE ?Subroutine4
   \   000020                ; // Fall through to label ?Subroutine4
    781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    782          
    783          /*********************************************************************
    784           * @fn      afGetMatch
    785           *
    786           * @brief   Set the allow response flag.
    787           *
    788           * @param   ep - Application Endpoint to look for
    789           * @param   action - true - allow response, false - no response
    790           *
    791           * @return  TRUE allow responses, FALSE no response
    792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    793          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    794          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    795            epList_t *epSearch;
    796          
    797            // Look for the endpoint
    798            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine22 & 0xFFFF
    799          
    800            if ( epSearch )
   \                     ??CrossCallReturnLabel_40:
   \   000008   600B         JZ        ??afGetMatch_0
    801            {
    802              if ( epSearch->flags & eEP_AllowMatch )
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000F   5004         JNC       ??afGetMatch_0
    803                return ( TRUE );
   \   000011   7901         MOV       R1,#0x1
   \   000013   8002         SJMP      ??afGetMatch_1
    804              else
    805                return ( FALSE );
    806            }
    807            else
    808              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000015   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   000017                REQUIRE ?Subroutine2
   \   000017                ; // Fall through to label ?Subroutine2
    809          }
    810          
    811          /*********************************************************************
    812           * @fn      afSetMatch
    813           *
    814           * @brief   Set the allow response flag.
    815           *
    816           * @param   ep - Application Endpoint to look for
    817           * @param   action - true - allow response, false - no response
    818           *
    819           * @return  TRUE if success, FALSE if endpoint not found
    820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    821          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    822          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
    823            epList_t *epSearch;
    824          
    825            // Look for the endpoint
    826            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   A9..         MOV       R1,?V1
    827          
    828            if ( epSearch )
   \   00000E   EA           MOV       A,R2
   \   00000F   49           ORL       A,R1
   \   000010   6019         JZ        ??afSetMatch_0
    829            {
    830              if ( action )
   \   000012   EA           MOV       A,R2
   \   000013   2402         ADD       A,#0x2
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F583         MOV       DPH,A
   \   00001B   EF           MOV       A,R7
   \   00001C   6005         JZ        ??afSetMatch_1
    831              {
    832                epSearch->flags |= eEP_AllowMatch;
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   D2E0         SETB      0xE0 /* A   */.0
   \   000021   8003         SJMP      ??afSetMatch_2
    833              }
    834              else
    835              {
    836                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   000026   F0           MOVX      @DPTR,A
    837              }
    838              return ( TRUE );
   \   000027   7901         MOV       R1,#0x1
   \   000029   8002         SJMP      ??afSetMatch_3
    839            }
    840            else
    841              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002B   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   00002D   80..         SJMP      ?Subroutine2
    842          }
    843          
    844          /*********************************************************************
    845           * @fn      afNumEndPoints
    846           *
    847           * @brief   Returns the number of endpoints defined (including 0)
    848           *
    849           * @param   none
    850           *
    851           * @return  number of endpoints
    852           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    853          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    854          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    855            epList_t *epSearch;
    856            byte endpoints;
    857          
    858            // Start at the beginning
    859            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   12....       LCALL     ?Subroutine25 & 0xFFFF
    860            endpoints = 0;
   \                     ??CrossCallReturnLabel_45:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   800E         SJMP      ??afNumEndPoints_0
    861          
    862            while ( epSearch )
    863            {
    864              endpoints++;
   \                     ??afNumEndPoints_1:
   \   00000E   09           INC       R1
    865              epSearch = epSearch->nextDesc;
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FA           MOV       R2,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   8A82         MOV       DPL,R2
   \   00001A   F583         MOV       DPH,A
    866            }
   \                     ??afNumEndPoints_0:
   \   00001C   E582         MOV       A,DPL
   \   00001E   4583         ORL       A,DPH
   \   000020   70EC         JNZ       ??afNumEndPoints_1
    867          
    868            return ( endpoints );
   \   000022                REQUIRE ?Subroutine0
   \   000022                ; // Fall through to label ?Subroutine0
    869          }
    870          
    871          /*********************************************************************
    872           * @fn      afEndPoints
    873           *
    874           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    875           *          Use afNumEndPoints to find out how big a buffer to supply.
    876           *
    877           * @param   epBuf - pointer to mem used
    878           *
    879           * @return  void
    880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    881          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    882          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    883            epList_t *epSearch;
    884            byte endPoint;
    885          
    886            // Start at the beginning
    887            epSearch = epList;
   \   000006   90....       MOV       DPTR,#epList
   \   000009   8028         SJMP      ??afEndPoints_0
    888          
    889            while ( epSearch )
    890            {
    891              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000B   8882         MOV       DPL,R0
   \   00000D   8983         MOV       DPH,R1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FD           MOV       R5,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F583         MOV       DPH,A
   \   000015   8D82         MOV       DPL,R5
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FD           MOV       R5,A
    892          
    893              if ( !skipZDO || endPoint != 0 )
   \   000019   EC           MOV       A,R4
   \   00001A   6003         JZ        ??afEndPoints_2
   \   00001C   ED           MOV       A,R5
   \   00001D   600B         JZ        ??afEndPoints_3
    894                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00001F   ED           MOV       A,R5
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   AA82         MOV       R2,DPL
   \   000028   AB83         MOV       R3,DPH
    895          
    896              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002A   8882         MOV       DPL,R0
   \   00002C   8983         MOV       DPH,R1
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
    897            }
   \                     ??afEndPoints_0:
   \   000033   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000036   70D3         JNZ       ??afEndPoints_1
    898          }
   \   000038   80..         SJMP      ?Subroutine0
    899          
    900          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    901          void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    902          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    903            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000005   EC           MOV       A,R4
   \   000006   2408         ADD       A,#0x8
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3D           ADDC      A,R5
   \   00000B   F9           MOV       R1,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   F583         MOV       DPH,A
   \   000010   E0           MOVX      A,@DPTR
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    904            if ( zAddr->addrMode == Addr64Bit )
   \   00001E   8882         MOV       DPL,R0
   \   000020   8983         MOV       DPH,R1
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6403         XRL       A,#0x3
   \   000025   7005         JNZ       ??afCopyAddress_0
    905              osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000027                ; Setup parameters for call to function sAddrExtCpy
   \   000027   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002A   800E         SJMP      ??CrossCallReturnLabel_58
    906            else
    907              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002C   8C82         MOV       DPL,R4
   \   00002E   8D83         MOV       DPH,R5
   \   000030   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    908          }
   \                     ??CrossCallReturnLabel_58:
   \   00003A   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
    909          
    910          /*********************************************************************
    911          *********************************************************************/
    912          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     54   AF_DataRequest
        0     45   -> APSDE_DataReq
        0     45   -> NLME_GetShortAddr
        0     45   -> NLME_IsAddressBroadcast
        0     45   -> afDataConfirm
        0     45   -> afDataReqMTU
        0     45   -> osal_mem_free
        0     45   -> sAddrExtCpy
      1     60   afBuildMSGIncoming
        0     19   -> afCopyAddress
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     28   afCopyAddress
        0      9   -> sAddrExtCpy
      1     59   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     54   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      3      0   afEndPoints
      0     38   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     28   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     46   afIncomingData
        0     38   -> afBuildMSGIncoming
        0     28   -> afFindEndPointDesc
        0     28   -> afFindEndPointDescList
        0     28   -> aps_FindGroupForEndpoint
        0     28   -> osal_mem_free
      2      0   afInit
      2      0   afNumEndPoints
      0     10   afRegister
        0     10   -> afFindEndPointDescList
        0     10   -> afRegisterExtended
      0     22   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       6  ??Subroutine28_0
       1  ??Subroutine29_0
       4  ??Subroutine30_0
       7  ?Subroutine0
       5  ?Subroutine1
      11  ?Subroutine10
       6  ?Subroutine11
       9  ?Subroutine12
       8  ?Subroutine13
       4  ?Subroutine14
      12  ?Subroutine15
       6  ?Subroutine16
      10  ?Subroutine17
       2  ?Subroutine18
       6  ?Subroutine19
       5  ?Subroutine2
      10  ?Subroutine20
       9  ?Subroutine21
      12  ?Subroutine22
       5  ?Subroutine23
       5  ?Subroutine24
       8  ?Subroutine25
       8  ?Subroutine26
       5  ?Subroutine27
       8  ?Subroutine3
       5  ?Subroutine4
      12  ?Subroutine5
       9  ?Subroutine6
       6  ?Subroutine7
       9  ?Subroutine8
      21  ?Subroutine9
     639  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     471  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      61  afCopyAddress
       6  afCopyAddress::?relay
      75  afDataConfirm
       6  afDataConfirm::?relay
      32  afDataReqMTU
       6  afDataReqMTU::?relay
      58  afEndPoints
       6  afEndPoints::?relay
      22  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      44  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      90  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      23  afGetMatch
       6  afGetMatch::?relay
     473  afIncomingData
       6  afIncomingData::?relay
      14  afInit
       6  afInit::?relay
      34  afNumEndPoints
       6  afNumEndPoints::?relay
      50  afRegister
       6  afRegister::?relay
     101  afRegisterExtended
       6  afRegisterExtended::?relay
      47  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 2 468 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
    97 bytes of CODE     memory
 2 468 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
