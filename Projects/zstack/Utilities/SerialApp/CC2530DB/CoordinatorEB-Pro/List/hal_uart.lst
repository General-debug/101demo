###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  17:52:24
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWCA08.tmp
#        (D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_uart.c -D ZIGBEEPRO
#        -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\hal_uart.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\hal_uart.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-03-19 15:13:41 -0700 (Thu, 19 Mar 2009) $
      4            Revision:       $Revision: 19475 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 526
   \   00020E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL       0xff,#0x3f
   \   000007   85FFFF       MOV       0xff,0xff
   \   00000A   53F1FE       ANL       0xf1,#0xfe
   \   00000D   43F30C       ORL       0xf3,#0xc
   \   000010   53F2F3       ANL       0xf2,#0xf3
   \   000013   758680       MOV       0x86,#-0x80
   \   000016   75C480       MOV       0xc4,#-0x80
   \   000019   90....       MOV       DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV       A,#0x70
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   74C1         MOV       A,#-0x3f
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   541F         ANL       A,#0x1f
   \   000027   F0           MOVX      @DPTR,A
   \   000028   90....       MOV       DPTR,#dmaCh1234 + 30
   \   00002B   740F         MOV       A,#0xf
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   744A         MOV       A,#0x4a
   \   000031   F0           MOVX      @DPTR,A
   \   000032   90....       MOV       DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV       A,#0x70
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   74C1         MOV       A,#-0x3f
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   90....       MOV       DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   541F         ANL       A,#0x1f
   \   000042   F0           MOVX      @DPTR,A
   \   000043   90....       MOV       DPTR,#dmaCh1234 + 22
   \   000046   74CE         MOV       A,#-0x32
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   540F         ANL       A,#0xf
   \   00004D   4410         ORL       A,#0x10
   \   00004F   F0           MOVX      @DPTR,A

    HAL_DMA_SET_DEST( ch, dmaCfg.rxBuf );
    ^
"D:\SRC\DemoPrj\Components\hal\target\CC2530EB\_hal_uart_dma.c",375  Warning[Pe069]: 
          integer conversion resulted in truncation
   \   000050   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000052   90....       MOV       DPTR,#dmaCh1234 + 18
   \   000055   F0           MOVX      @DPTR,A
   \   000056   74..         MOV       A,#dmaCfg & 0xff
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   90....       MOV       DPTR,#dmaCh1234 + 21
   \   00005D   7480         MOV       A,#-0x80
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   90....       MOV       DPTR,#dmaCh1234 + 20
   \   000063   E4           CLR       A
   \   000064   F0           MOVX      @DPTR,A
   \   000065   90....       MOV       DPTR,#dmaCh1234 + 23
   \   000068   7412         MOV       A,#0x12
   \   00006A   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   00006D                REQUIRE P2DIR
   \   00006D                REQUIRE PERCFG
   \   00006D                REQUIRE P0SEL
   \   00006D                REQUIRE ADCCFG
   \   00006D                REQUIRE U0CSR
   \   00006D                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine11_0
   \   000001                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   241B         ADD       A,#0x1b
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   90....       MOV       DPTR,#dmaCfg + 524
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   7403         MOV       A,#0x3
   \   000023   68           XRL       A,R0
   \   000024   6005         JZ        ??HalUARTOpenDMA_0
   \   000026   7404         MOV       A,#0x4
   \   000028   68           XRL       A,R0
   \   000029   7005         JNZ       ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002B   75C2D8       MOV       0xc2,#-0x28
   \   00002E   8003         SJMP      ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000030   75C23B       MOV       0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000033   E0           MOVX      A,@DPTR
   \   000034   600B         JZ        ??HalUARTOpenDMA_3
   \   000036   14           DEC       A
   \   000037   6012         JZ        ??HalUARTOpenDMA_4
   \   000039   14           DEC       A
   \   00003A   6019         JZ        ??HalUARTOpenDMA_5
   \   00003C   14           DEC       A
   \   00003D   6020         JZ        ??HalUARTOpenDMA_6
   \   00003F   8028         SJMP      ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000041   75C508       MOV       0xc5,#0x8
   \   000044   90....       MOV       DPTR,#dmaCfg + 520
   \   000047   7423         MOV       A,#0x23
   \   000049   8026         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   00004B   75C509       MOV       0xc5,#0x9
   \   00004E   90....       MOV       DPTR,#dmaCfg + 520
   \   000051   7412         MOV       A,#0x12
   \   000053   801C         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   000055   75C50A       MOV       0xc5,#0xa
   \   000058   90....       MOV       DPTR,#dmaCfg + 520
   \   00005B   7409         MOV       A,#0x9
   \   00005D   8012         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   00005F   75C50A       MOV       0xc5,#0xa
   \   000062   90....       MOV       DPTR,#dmaCfg + 520
   \   000065   7406         MOV       A,#0x6
   \   000067   8008         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000069   75C50B       MOV       0xc5,#0xb
   \   00006C   90....       MOV       DPTR,#dmaCfg + 520
   \   00006F   7403         MOV       A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000071   F0           MOVX      @DPTR,A
   \   000072   8A82         MOV       DPL,R2
   \   000074   8B83         MOV       DPH,R3
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   600D         JZ        ??HalUARTOpenDMA_9
   \   00007B   75C442       MOV       0xc4,#0x42
   \   00007E   43F310       ORL       0xf3,#0x10
   \   000081   C285         CLR       0x80.5
   \   000083   43FD20       ORL       0xfd,#0x20
   \   000086   8003         SJMP      ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000088   75C402       MOV       0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   00008B   9070C1       MOV       DPTR,#0x70c1
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   90....       MOV       DPTR,#dmaCfg
   \   000092   F0           MOVX      @DPTR,A
   \   000093   A3           INC       DPTR
   \   000094   E4           CLR       A
   \   000095   F0           MOVX      @DPTR,A
   \   000096   53D1F7       ANL       0xd1,#0xf7
   \   000099   75D608       MOV       0xd6,#0x8
   \   00009C                ; Setup parameters for call to function osal_memset
   \   00009C   FC           MOV       R4,A
   \   00009D   7D01         MOV       R5,#0x1
   \   00009F   E5C2         MOV       A,0xc2
   \   0000A1   F4           CPL       A
   \   0000A2   F9           MOV       R1,A
   \   0000A3   7A..         MOV       R2,#dmaCfg & 0xff
   \   0000A5   7B..         MOV       R3,#(dmaCfg >> 8) & 0xff
   \   0000A7   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000AA   438640       ORL       0x86,#0x40
   \   0000AD   75C100       MOV       0xc1,#0x0
   \   0000B0   90....       MOV       DPTR,#dmaCfg + 523
   \   0000B3   E4           CLR       A
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   90....       MOV       DPTR,#dmaCfg + 522
   \   0000B8   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   0000BB                REQUIRE U0BAUD
   \   0000BB                REQUIRE U0GCR
   \   0000BB                REQUIRE U0UCR
   \   0000BB                REQUIRE P0SEL
   \   0000BB                REQUIRE _A_P0
   \   0000BB                REQUIRE P0DIR
   \   0000BB                REQUIRE DMAIRQ
   \   0000BB                REQUIRE DMAARM
   \   0000BB                REQUIRE U0CSR
   \   0000BB                REQUIRE U0DBUF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(uint8 *, uint16)
   \                     HalUARTReadDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   7800         MOV       R0,#0x0
   \   000007   7900         MOV       R1,#0x0
   \   000009   802D         SJMP      ??HalUARTReadDMA_0
   \                     ??HalUARTReadDMA_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   E5..         MOV       A,?V0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   AA82         MOV       R2,DPL
   \   000015   AB83         MOV       R3,DPH
   \   000017   AFC2         MOV       R7,0xc2
   \   000019   EF           MOV       A,R7
   \   00001A   F4           CPL       A
   \   00001B   F5..         MOV       ?V1,A
   \   00001D   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000020   E4           CLR       A
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   E5..         MOV       A,?V1
   \   000025   F0           MOVX      @DPTR,A
   \   000026   90....       MOV       DPTR,#dmaCfg + 256
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   04           INC       A
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   C3           CLR       C
   \   00002D   9480         SUBB      A,#-0x80
   \   00002F   4002         JC        ??HalUARTReadDMA_2
   \   000031   E4           CLR       A
   \   000032   F0           MOVX      @DPTR,A
   \                     ??HalUARTReadDMA_2:
   \   000033   08           INC       R0
   \   000034   E8           MOV       A,R0
   \   000035   7001         JNZ       ??HalUARTReadDMA_0
   \   000037   09           INC       R1
   \                     ??HalUARTReadDMA_0:
   \   000038   C3           CLR       C
   \   000039   E8           MOV       A,R0
   \   00003A   9C           SUBB      A,R4
   \   00003B   E9           MOV       A,R1
   \   00003C   9D           SUBB      A,R5
   \   00003D   5017         JNC       ??HalUARTReadDMA_3
   \   00003F   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F5..         MOV       ?V0,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V1,A
   \   000049   E5C2         MOV       A,0xc2
   \   00004B   F5..         MOV       ?V2,A
   \   00004D   E5..         MOV       A,?V1
   \   00004F   65..         XRL       A,?V2
   \   000051   7001         JNZ       ??HalUARTReadDMA_4
   \   000053   E4           CLR       A
   \                     ??HalUARTReadDMA_4:
   \   000054   60B5         JZ        ??HalUARTReadDMA_1
   \                     ??HalUARTReadDMA_3:
   \   000056   C285         CLR       0x80.5
   \   000058   E8           MOV       A,R0
   \   000059   FA           MOV       R2,A
   \   00005A   E9           MOV       A,R1
   \   00005B   FB           MOV       R3,A
   \   00005C   7F04         MOV       R7,#0x4
   \   00005E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000061                REQUIRE U0BAUD
   \   000061                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV       DPTR,#dmaCfg + 256
   \   000003   E0           MOVX      A,@DPTR
   \   000004   25E0         ADD       A,0xE0 /* A   */
   \   000006   FE           MOV       R6,A
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FF           MOV       R7,A
   \   00000A   74..         MOV       A,#dmaCfg & 0xff
   \   00000C   2E           ADD       A,R6
   \   00000D   F582         MOV       DPL,A
   \   00000F   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000011   3F           ADDC      A,R7
   \   000012   F583         MOV       DPH,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(uint8 *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   90....       MOV       DPTR,#dmaCfg + 518
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000010   28           ADD       A,R0
   \   000011   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000014   F8           MOV       R0,A
   \   000015   EC           MOV       A,R4
   \   000016   28           ADD       A,R0
   \   000017   F8           MOV       R0,A
   \   000018   E4           CLR       A
   \   000019   3D           ADDC      A,R5
   \   00001A   F9           MOV       R1,A
   \   00001B   C3           CLR       C
   \   00001C   E8           MOV       A,R0
   \   00001D   9481         SUBB      A,#-0x7f
   \   00001F   E9           MOV       A,R1
   \   000020   9400         SUBB      A,#0x0
   \   000022   4007         JC        ??HalUARTWriteDMA_0
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B00         MOV       R3,#0x0
   \   000028   02....       LJMP      ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   00002B   A8A8         MOV       R0,0xa8+0x0
   \   00002D   C2AF         CLR       0xa8.7
   \   00002F   90....       MOV       DPTR,#dmaCfg + 518
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V2,A
   \   000035   F5..         MOV       ?V4,A
   \   000037   75..00       MOV       ?V5,#0x0
   \   00003A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00003D   F9           MOV       R1,A
   \   00003E   E8           MOV       A,R0
   \   00003F   A2E7         MOV       C,0xE0 /* A   */.7
   \   000041   92AF         MOV       0xa8.7,C
   \   000043   7A00         MOV       R2,#0x0
   \   000045   7B00         MOV       R3,#0x0
   \   000047   801E         SJMP      ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   000049   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00004C   C0E0         PUSH      A
   \   00004E   85....       MOV       ?V0,?V4
   \   000051   85....       MOV       ?V1,?V5
   \   000054   7407         MOV       A,#0x7
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?S_SHL
   \   00005B   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00005E   D0E0         POP       A
   \   000060   F0           MOVX      @DPTR,A
   \   000061   09           INC       R1
   \   000062   0A           INC       R2
   \   000063   EA           MOV       A,R2
   \   000064   7001         JNZ       ??HalUARTWriteDMA_2
   \   000066   0B           INC       R3
   \                     ??HalUARTWriteDMA_2:
   \   000067   C3           CLR       C
   \   000068   EA           MOV       A,R2
   \   000069   9C           SUBB      A,R4
   \   00006A   EB           MOV       A,R3
   \   00006B   9D           SUBB      A,R5
   \   00006C   40DB         JC        ??HalUARTWriteDMA_3
   \   00006E   A2AF         MOV       C,0xa8.7
   \   000070   E4           CLR       A
   \   000071   33           RLC       A
   \   000072   F8           MOV       R0,A
   \   000073   C2AF         CLR       0xa8.7
   \   000075   90....       MOV       DPTR,#dmaCfg + 518
   \   000078   E0           MOVX      A,@DPTR
   \   000079   65..         XRL       A,?V2
   \   00007B   6040         JZ        ??HalUARTWriteDMA_4
   \   00007D   E8           MOV       A,R0
   \   00007E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000080   92AF         MOV       0xa8.7,C
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F5..         MOV       ?V2,A
   \   000085   F5..         MOV       ?V4,A
   \   000087   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00008A   F9           MOV       R1,A
   \   00008B   7A00         MOV       R2,#0x0
   \   00008D   7B00         MOV       R3,#0x0
   \   00008F   801E         SJMP      ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   000091   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000094   C0E0         PUSH      A
   \   000096   85....       MOV       ?V0,?V4
   \   000099   85....       MOV       ?V1,?V5
   \   00009C   7407         MOV       A,#0x7
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?S_SHL
   \   0000A3   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000A6   D0E0         POP       A
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   09           INC       R1
   \   0000AA   0A           INC       R2
   \   0000AB   EA           MOV       A,R2
   \   0000AC   7001         JNZ       ??HalUARTWriteDMA_5
   \   0000AE   0B           INC       R3
   \                     ??HalUARTWriteDMA_5:
   \   0000AF   C3           CLR       C
   \   0000B0   EA           MOV       A,R2
   \   0000B1   9C           SUBB      A,R4
   \   0000B2   EB           MOV       A,R3
   \   0000B3   9D           SUBB      A,R5
   \   0000B4   40DB         JC        ??HalUARTWriteDMA_6
   \   0000B6   A2AF         MOV       C,0xa8.7
   \   0000B8   E4           CLR       A
   \   0000B9   33           RLC       A
   \   0000BA   F8           MOV       R0,A
   \   0000BB   C2AF         CLR       0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   0000BD   AC..         MOV       R4,?V2
   \   0000BF   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   0000C1   2C           ADD       A,R4
   \   0000C2   F582         MOV       DPL,A
   \   0000C4   E4           CLR       A
   \   0000C5   34..         ADDC      A,#((dmaCfg + 516) >> 8) & 0xff
   \   0000C7   F583         MOV       DPH,A
   \   0000C9   E9           MOV       A,R1
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   7401         MOV       A,#0x1
   \   0000CD   6C           XRL       A,R4
   \   0000CE   FC           MOV       R4,A
   \   0000CF   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   0000D1   2C           ADD       A,R4
   \   0000D2   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000D5   7006         JNZ       ??HalUARTWriteDMA_7
   \   0000D7   90....       MOV       DPTR,#dmaCfg + 523
   \   0000DA   7401         MOV       A,#0x1
   \   0000DC   F0           MOVX      @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   0000DD   E8           MOV       A,R0
   \   0000DE   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000E0   92AF         MOV       0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000E2   7F08         MOV       R7,#0x8
   \   0000E4   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000E7                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV       A,R6
   \   000001   2A           ADD       A,R2
   \   000002   F582         MOV       DPL,A
   \   000004   EF           MOV       A,R7
   \   000005   3B           ADDC      A,R3
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000002   29           ADD       A,R1
   \   000003   F5..         MOV       ?V6,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#((dmaCfg + 260) >> 8) & 0xff
   \   000008   F5..         MOV       ?V7,A
   \   00000A   E5..         MOV       A,?V6
   \   00000C   25..         ADD       A,?V0
   \   00000E   F582         MOV       DPL,A
   \   000010   E5..         MOV       A,?V7
   \   000012   35..         ADDC      A,?V1
   \   000014   F583         MOV       DPH,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000002   25..         ADD       A,?V4
   \   000004                REQUIRE ??Subroutine10_0
   \   000004                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   34..         ADDC      A,#((dmaCfg + 516) >> 8) & 0xff
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV       R6,#0x0
   \   000007   90....       MOV       DPTR,#dmaCfg + 256
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FA           MOV       R2,A
   \   00000C   E5C2         MOV       A,0xc2
   \   00000E   FC           MOV       R4,A
   \   00000F   EA           MOV       A,R2
   \   000010   2A           ADD       A,R2
   \   000011   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000014   7001         JNZ       ??HalUARTPollDMA_0
   \   000016   E4           CLR       A
   \                     ??HalUARTPollDMA_0:
   \   000017   6003         JZ        $+5
   \   000019   02....       LJMP      ??HalUARTPollDMA_1 & 0xFFFF
   \   00001C   EA           MOV       A,R2
   \   00001D   FC           MOV       R4,A
   \   00001E   F8           MOV       R0,A
   \                     ??HalUARTPollDMA_2:
   \   00001F   E5C2         MOV       A,0xc2
   \   000021   F5..         MOV       ?V0,A
   \   000023   E8           MOV       A,R0
   \   000024   FA           MOV       R2,A
   \   000025   E9           MOV       A,R1
   \   000026   FB           MOV       R3,A
   \   000027   EA           MOV       A,R2
   \   000028   2A           ADD       A,R2
   \   000029   FA           MOV       R2,A
   \   00002A   EB           MOV       A,R3
   \   00002B   33           RLC       A
   \   00002C   FB           MOV       R3,A
   \   00002D   74..         MOV       A,#dmaCfg & 0xff
   \   00002F   2A           ADD       A,R2
   \   000030   F582         MOV       DPL,A
   \   000032   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000034   3B           ADDC      A,R3
   \   000035   F583         MOV       DPH,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   65..         XRL       A,?V0
   \   00003B   7001         JNZ       ??HalUARTPollDMA_3
   \   00003D   E4           CLR       A
   \                     ??HalUARTPollDMA_3:
   \   00003E   7016         JNZ       ??HalUARTPollDMA_4
   \   000040   08           INC       R0
   \   000041   E8           MOV       A,R0
   \   000042   7001         JNZ       ??HalUARTPollDMA_5
   \   000044   09           INC       R1
   \                     ??HalUARTPollDMA_5:
   \   000045   C3           CLR       C
   \   000046   9480         SUBB      A,#-0x80
   \   000048   E9           MOV       A,R1
   \   000049   9400         SUBB      A,#0x0
   \   00004B   4004         JC        ??HalUARTPollDMA_6
   \   00004D   7800         MOV       R0,#0x0
   \   00004F   7900         MOV       R1,#0x0
   \                     ??HalUARTPollDMA_6:
   \   000051   EC           MOV       A,R4
   \   000052   68           XRL       A,R0
   \   000053   49           ORL       A,R1
   \   000054   70C9         JNZ       ??HalUARTPollDMA_2
   \                     ??HalUARTPollDMA_4:
   \   000056   90....       MOV       DPTR,#dmaCfg + 257
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   FA           MOV       R2,A
   \   00005B   E8           MOV       A,R0
   \   00005C   6A           XRL       A,R2
   \   00005D   7001         JNZ       ??HalUARTPollDMA_7
   \   00005F   E9           MOV       A,R1
   \                     ??HalUARTPollDMA_7:
   \   000060   6011         JZ        ??HalUARTPollDMA_8
   \   000062   E8           MOV       A,R0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   7004         JNZ       ??HalUARTPollDMA_9
   \   000068   E595         MOV       A,0x95
   \   00006A   A3           INC       DPTR
   \   00006B   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_9:
   \   00006C   90....       MOV       DPTR,#dmaCfg + 258
   \   00006F   74C6         MOV       A,#-0x3a
   \   000071   801E         SJMP      ??HalUARTPollDMA_10
   \                     ??HalUARTPollDMA_8:
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F9           MOV       R1,A
   \   000076   601A         JZ        ??HalUARTPollDMA_11
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F8           MOV       R0,A
   \   00007B   E595         MOV       A,0x95
   \   00007D   C3           CLR       C
   \   00007E   98           SUBB      A,R0
   \   00007F   F8           MOV       R0,A
   \   000080   C3           CLR       C
   \   000081   99           SUBB      A,R1
   \   000082   90....       MOV       DPTR,#dmaCfg + 258
   \   000085   5009         JNC       ??HalUARTPollDMA_12
   \   000087   E0           MOVX      A,@DPTR
   \   000088   C3           CLR       C
   \   000089   98           SUBB      A,R0
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   E595         MOV       A,0x95
   \   00008D   A3           INC       DPTR
   \   00008E   8001         SJMP      ??HalUARTPollDMA_10
   \                     ??HalUARTPollDMA_12:
   \   000090   E4           CLR       A
   \                     ??HalUARTPollDMA_10:
   \   000091   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_11:
   \   000092                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000092   12....       LCALL     `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   000095   8B..         MOV       ?V1,R3
   \   000097   A9..         MOV       R1,?V1
   \   000099   C3           CLR       C
   \   00009A   EA           MOV       A,R2
   \   00009B   9470         SUBB      A,#0x70
   \   00009D   EB           MOV       A,R3
   \   00009E   9400         SUBB      A,#0x0
   \   0000A0   400B         JC        ??HalUARTPollDMA_13
   \   0000A2   7E01         MOV       R6,#0x1
   \   0000A4   8022         SJMP      ??HalUARTPollDMA_14
   \                     ??HalUARTPollDMA_1:
   \   0000A6   90....       MOV       DPTR,#dmaCfg + 258
   \   0000A9   E4           CLR       A
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   801B         SJMP      ??HalUARTPollDMA_14
   \                     ??HalUARTPollDMA_13:
   \   0000AD   C3           CLR       C
   \   0000AE   EA           MOV       A,R2
   \   0000AF   9430         SUBB      A,#0x30
   \   0000B1   EB           MOV       A,R3
   \   0000B2   9400         SUBB      A,#0x0
   \   0000B4   4006         JC        ??HalUARTPollDMA_15
   \   0000B6   7E02         MOV       R6,#0x2
   \   0000B8   D285         SETB      0x80.5
   \   0000BA   800C         SJMP      ??HalUARTPollDMA_14
   \                     ??HalUARTPollDMA_15:
   \   0000BC   EA           MOV       A,R2
   \   0000BD   49           ORL       A,R1
   \   0000BE   6008         JZ        ??HalUARTPollDMA_14
   \   0000C0   90....       MOV       DPTR,#dmaCfg + 258
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   7002         JNZ       ??HalUARTPollDMA_14
   \   0000C6   7E04         MOV       R6,#0x4
   \                     ??HalUARTPollDMA_14:
   \   0000C8   90....       MOV       DPTR,#dmaCfg + 519
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   6006         JZ        ??HalUARTPollDMA_16
   \   0000CE   E4           CLR       A
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   EE           MOV       A,R6
   \   0000D1   D2E4         SETB      0xE0 /* A   */.4
   \   0000D3   FE           MOV       R6,A
   \                     ??HalUARTPollDMA_16:
   \   0000D4   90....       MOV       DPTR,#dmaCfg + 522
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   6018         JZ        ??HalUARTPollDMA_17
   \   0000DA   A895         MOV       R0,0x95+0x0
   \   0000DC   90....       MOV       DPTR,#dmaCfg + 521
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F9           MOV       R1,A
   \   0000E1   E8           MOV       A,R0
   \   0000E2   C3           CLR       C
   \   0000E3   99           SUBB      A,R1
   \   0000E4   F8           MOV       R0,A
   \   0000E5   90....       MOV       DPTR,#dmaCfg + 520
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   C3           CLR       C
   \   0000EA   98           SUBB      A,R0
   \   0000EB   5005         JNC       ??HalUARTPollDMA_17
   \   0000ED   90....       MOV       DPTR,#dmaCfg + 522
   \   0000F0   E4           CLR       A
   \   0000F1   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_17:
   \   0000F2   90....       MOV       DPTR,#dmaCfg + 523
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   6058         JZ        ??HalUARTPollDMA_18
   \   0000F8   90....       MOV       DPTR,#dmaCfg + 522
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   7052         JNZ       ??HalUARTPollDMA_18
   \   0000FE   A3           INC       DPTR
   \   0000FF   E4           CLR       A
   \   000100   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000103   12....       LCALL     ?S_SHL
   \   000106   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000108   25..         ADD       A,?V0
   \   00010A   74..         MOV       A,#((dmaCfg + 260) >> 8) & 0xff
   \   00010C   35..         ADDC      A,?V1
   \   00010E   90....       MOV       DPTR,#dmaCh1234 + 24
   \   000111   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000114   12....       LCALL     ?S_SHL
   \   000117   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000119   25..         ADD       A,?V0
   \   00011B   90....       MOV       DPTR,#dmaCh1234 + 25
   \   00011E   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000121   90....       MOV       DPTR,#dmaCh1234 + 29
   \   000124   F0           MOVX      @DPTR,A
   \   000125   90....       MOV       DPTR,#dmaCh1234 + 28
   \   000128   E0           MOVX      A,@DPTR
   \   000129   54E0         ANL       A,#0xe0
   \   00012B   F0           MOVX      @DPTR,A
   \   00012C   90....       MOV       DPTR,#dmaCfg + 518
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   6401         XRL       A,#0x1
   \   000133   F0           MOVX      @DPTR,A
   \   000134   A2AF         MOV       C,0xa8.7
   \   000136   E4           CLR       A
   \   000137   33           RLC       A
   \   000138   F8           MOV       R0,A
   \   000139   C2AF         CLR       0xa8.7
   \   00013B   75D610       MOV       0xd6,#0x10
   \                     ??HalUARTPollDMA_19:
   \   00013E   00           NOP
   \   00013F   E5D6         MOV       A,0xd6
   \   000141   A2E4         MOV       C,0xE0 /* A   */.4
   \   000143   50F9         JNC       ??HalUARTPollDMA_19
   \   000145   53D1EF       ANL       0xd1,#0xef
   \   000148   75D710       MOV       0xd7,#0x10
   \   00014B   E8           MOV       A,R0
   \   00014C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00014E   92AF         MOV       0xa8.7,C
   \                     ??HalUARTPollDMA_18:
   \   000150   EE           MOV       A,R6
   \   000151   6018         JZ        ??HalUARTPollDMA_20
   \   000153   90....       MOV       DPTR,#dmaCfg + 524
   \   000156   E0           MOVX      A,@DPTR
   \   000157   F8           MOV       R0,A
   \   000158   A3           INC       DPTR
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   8882         MOV       DPL,R0
   \   00015C   F583         MOV       DPH,A
   \   00015E   E582         MOV       A,DPL
   \   000160   4583         ORL       A,DPH
   \   000162   6007         JZ        ??HalUARTPollDMA_20
   \   000164                ; Setup parameters for indirect call
   \   000164   EE           MOV       A,R6
   \   000165   FA           MOV       R2,A
   \   000166   7900         MOV       R1,#0x0
   \   000168   12....       LCALL     ?CALL_IND
   \                     ??HalUARTPollDMA_20:
   \   00016B   7F02         MOV       R7,#0x2
   \   00016D   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000170                REQUIRE U0BAUD
   \   000170                REQUIRE ST0
   \   000170                REQUIRE _A_P0
   \   000170                REQUIRE _A_IEN0
   \   000170                REQUIRE DMAARM
   \   000170                REQUIRE DMAIRQ
   \   000170                REQUIRE DMAREQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#dmaCfg + 518
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V0,A
   \   000007   75..00       MOV       ?V1,#0x0
   \   00000A   7407         MOV       A,#0x7
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#dmaCfg & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E4           CLR       A
   \   000012   C9           XCH       A,R1
   \   000013   6C           XRL       A,R4
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#dmaCfg + 518
   \   000004   E0           MOVX      A,@DPTR
   \   000005   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F8           MOV       R0,A
   \   000001   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   34..         ADDC      A,#((dmaCfg + 516) >> 8) & 0xff
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   E5C2         MOV       A,0xc2
   \   00000B   FC           MOV       R4,A
   \   00000C   90....       MOV       DPTR,#dmaCfg + 256
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   25E0         ADD       A,0xE0 /* A   */
   \   000012   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000015   7001         JNZ       ??HalUARTRxAvailDMA_0
   \   000017   E4           CLR       A
   \                     ??HalUARTRxAvailDMA_0:
   \   000018   7033         JNZ       ??HalUARTRxAvailDMA_1
   \   00001A   7800         MOV       R0,#0x0
   \                     ??HalUARTRxAvailDMA_2:
   \   00001C   E5C2         MOV       A,0xc2
   \   00001E   FE           MOV       R6,A
   \   00001F   E8           MOV       A,R0
   \   000020   FC           MOV       R4,A
   \   000021   E9           MOV       A,R1
   \   000022   FD           MOV       R5,A
   \   000023   EC           MOV       A,R4
   \   000024   2C           ADD       A,R4
   \   000025   FC           MOV       R4,A
   \   000026   ED           MOV       A,R5
   \   000027   33           RLC       A
   \   000028   FD           MOV       R5,A
   \   000029   74..         MOV       A,#dmaCfg & 0xff
   \   00002B   2C           ADD       A,R4
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000030   3D           ADDC      A,R5
   \   000031   F583         MOV       DPH,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6E           XRL       A,R6
   \   000036   7001         JNZ       ??HalUARTRxAvailDMA_3
   \   000038   E4           CLR       A
   \                     ??HalUARTRxAvailDMA_3:
   \   000039   7005         JNZ       ??HalUARTRxAvailDMA_4
   \   00003B   0A           INC       R2
   \   00003C   EA           MOV       A,R2
   \   00003D   7001         JNZ       ??HalUARTRxAvailDMA_4
   \   00003F   0B           INC       R3
   \                     ??HalUARTRxAvailDMA_4:
   \   000040   08           INC       R0
   \   000041   E8           MOV       A,R0
   \   000042   7001         JNZ       ??HalUARTRxAvailDMA_5
   \   000044   09           INC       R1
   \                     ??HalUARTRxAvailDMA_5:
   \   000045   C3           CLR       C
   \   000046   9480         SUBB      A,#-0x80
   \   000048   E9           MOV       A,R1
   \   000049   9400         SUBB      A,#0x0
   \   00004B   40CF         JC        ??HalUARTRxAvailDMA_2
   \                     ??HalUARTRxAvailDMA_1:
   \   00004D   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   000050                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53D1EF       ANL       0xd1,#0xef
   \   000007   90....       MOV       DPTR,#dmaCfg + 518
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6401         XRL       A,#0x1
   \   00000D   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   90....       MOV       DPTR,#dmaCfg + 519
   \   000015   04           INC       A
   \   000016   F0           MOVX      @DPTR,A
   \   000017   E595         MOV       A,0x95
   \   000019   90....       MOV       DPTR,#dmaCfg + 521
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000023   6006         JZ        ??HalUARTIsrDMA_0
   \   000025   90....       MOV       DPTR,#dmaCfg + 523
   \   000028   7401         MOV       A,#0x1
   \   00002A   F0           MOVX      @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002B   80..         SJMP      ??Subroutine11_0
   \   00002D                REQUIRE DMAIRQ
   \   00002D                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          
     84          /******************************************************************************
     85           * @fn      HalUARTInit
     86           *
     87           * @brief   Initialize the UART
     88           *
     89           * @param   none
     90           *
     91           * @return  none
     92           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     93          void HalUARTInit(void)
   \                     HalUARTInit:
     94          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     95          #if HAL_UART_DMA
     96            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL     `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
     97          #endif
     98          #if HAL_UART_ISR
     99            HalUARTInitISR();
    100          #endif
    101          }
   \   000007   80..         SJMP      ??Subroutine11_0
    102          
    103          /******************************************************************************
    104           * @fn      HalUARTOpen
    105           *
    106           * @brief   Open a port according tp the configuration specified by parameter.
    107           *
    108           * @param   port   - UART port
    109           *          config - contains configuration information
    110           *
    111           * @return  Status of the function call
    112           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    114          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    115          #if (HAL_UART_DMA == 1)
    116            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ       ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL     `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    117          #endif
    118          #if (HAL_UART_DMA == 2)
    119            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    120          #endif
    121          #if (HAL_UART_ISR == 1)
    122            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    123          #endif
    124          #if (HAL_UART_ISR == 2)
    125            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    126          #endif
    127            
    128          #if (HAL_UART_DMA == 0) && (HAL_UART_ISR == 0)
    129            // UART is not enabled. Do nothing.
    130            (void) port;   // unused argument
    131            (void) config; // unused argument
    132          #endif
    133            
    134            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   80..         SJMP      ?Subroutine1
    135          }
    136          
    137          /*****************************************************************************
    138           * @fn      HalUARTRead
    139           *
    140           * @brief   Read a buffer from the UART
    141           *
    142           * @param   port - USART module designation
    143           *          buf  - valid data buffer at least 'len' bytes in size
    144           *          len  - max length number of bytes to copy to 'buf'
    145           *
    146           * @return  length of buffer that was read
    147           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    149          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    150          #if (HAL_UART_DMA == 1)
    151            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   000006   7005         JNZ       ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadDMA
   \   000008   12....       LCALL     `??HalUARTReadDMA::?relay`; Banked call to: HalUARTReadDMA
   \   00000B   8004         SJMP      ??HalUARTRead_1
    152          #endif
    153          #if (HAL_UART_DMA == 2)
    154            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    155          #endif
    156          #if (HAL_UART_ISR == 1)
    157            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    158          #endif
    159          #if (HAL_UART_ISR == 2)
    160            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    161          #endif
    162          
    163          #if (HAL_UART_DMA == 0) && (HAL_UART_ISR == 0)
    164            // UART is not enabled. Do nothing.
    165            // Unused arguments
    166            (void) port;
    167            (void) buf;
    168            (void) len;
    169          #endif
    170            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011                REQUIRE ?Subroutine1
   \   000011                ; // Fall through to label ?Subroutine1
    171          }
    172          
    173          /******************************************************************************
    174           * @fn      HalUARTWrite
    175           *
    176           * @brief   Write a buffer to the UART.
    177           *
    178           * @param   port - UART port
    179           *          buf  - pointer to the buffer that will be written, not freed
    180           *          len  - length of
    181           *
    182           * @return  length of the buffer that was sent
    183           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    185          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    186          #if (HAL_UART_DMA == 1)
    187            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ       ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL     `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP      ??HalUARTWrite_1
    188          #endif
    189          #if (HAL_UART_DMA == 2)
    190            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    191          #endif
    192          #if (HAL_UART_ISR == 1)
    193            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    194          #endif
    195          #if (HAL_UART_ISR == 2)
    196            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    197          #endif
    198          
    199          #if (HAL_UART_DMA == 0) && (HAL_UART_ISR == 0)
    200            // UART is not enabled. Do nothing.
    201            // Unused arguments
    202            (void) port;
    203            (void) buf;
    204            (void) len;
    205          #endif
    206            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011   80..         SJMP      ?Subroutine1
    207          }
    208          
    209          /******************************************************************************
    210           * @fn      HalUARTSuspend
    211           *
    212           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    213           *
    214           * @param   None
    215           *
    216           * @return  None
    217           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    219          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    220          #if HAL_UART_DMA
    221            HalUARTSuspendDMA();
   \   000000   5386BF       ANL       0x86,#0xbf
    222          #endif
    223          #if HAL_UART_ISR
    224            HalUARTSuspendISR();
    225          #endif
    226          }
   \   000003   02....       LJMP      ?BRET
   \   000006                REQUIRE U0CSR
    227          
    228          /******************************************************************************
    229           * @fn      HalUARTResume
    230           *
    231           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    232           *
    233           * @param   None
    234           *
    235           * @return  None
    236           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void HalUARTResume( void )
   \                     HalUARTResume:
    238          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    239          #if HAL_UART_DMA
    240            HalUARTResumeDMA();
   \   000000   43C480       ORL       0xc4,#0x80
   \   000003   438640       ORL       0x86,#0x40
    241          #endif
    242          #if HAL_UART_ISR
    243            HalUARTResumeISR();
    244          #endif
    245          }
   \   000006   02....       LJMP      ?BRET
   \   000009                REQUIRE U0UCR
   \   000009                REQUIRE U0CSR
    246          
    247          /***************************************************************************************************
    248           * @fn      HalUARTPoll
    249           *
    250           * @brief   Poll the UART.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void HalUARTPoll(void)
   \                     HalUARTPoll:
    257          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    258          #if HAL_UART_DMA
    259            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL     `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    260          #endif
    261          #if HAL_UART_ISR
    262            HalUARTPollISR();
    263          #endif
    264          }
   \   000007   80..         SJMP      ??Subroutine11_0
    265          
    266          /**************************************************************************************************
    267           * @fn      Hal_UART_RxBufLen()
    268           *
    269           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    270           *
    271           * @param   port - UART port
    272           *
    273           * @return  length of current Rx Buffer
    274           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    276          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    277          #if (HAL_UART_DMA == 1)
    278            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ       ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL     `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000B   8004         SJMP      ??Hal_UART_RxBufLen_1
    279          #endif
    280          #if (HAL_UART_DMA == 2)
    281            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    282          #endif
    283          #if (HAL_UART_ISR == 1)
    284            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    285          #endif
    286          #if (HAL_UART_ISR == 2)
    287            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    288          #endif
    289          
    290          #if (HAL_UART_DMA == 0) && (HAL_UART_ISR == 0)
    291            // UART is not enabled. Do nothing.
    292            // Unused argument
    293            (void) port;
    294          #endif
    295            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP      ?Subroutine1
    296          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInitDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpenDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTReadDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTIsrDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    297          
    298          /******************************************************************************
    299          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2      0   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     10   HalUARTPollDMA
        0     10   -> HalUARTRxAvailDMA
      0      9   HalUARTRead
        0      9   -> HalUARTReadDMA
      1     21   HalUARTReadDMA
      0      0   HalUARTResume
      0     19   HalUARTRxAvailDMA
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     25   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ??Subroutine10_0
       7  ??Subroutine11_0
       1  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine2
      15  ?Subroutine3
      21  ?Subroutine4
      21  ?Subroutine5
       4  ?Subroutine6
      23  ?Subroutine7
      10  ?Subroutine8
      12  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
       9  HalUARTInit
       6  HalUARTInit::?relay
     109  HalUARTInitDMA
       6  HalUARTInitDMA::?relay
      45  HalUARTIsrDMA
       6  HalUARTIsrDMA::?relay
      15  HalUARTOpen
       6  HalUARTOpen::?relay
     187  HalUARTOpenDMA
       6  HalUARTOpenDMA::?relay
       9  HalUARTPoll
       6  HalUARTPoll::?relay
     368  HalUARTPollDMA
       6  HalUARTPollDMA::?relay
      17  HalUARTRead
       6  HalUARTRead::?relay
      97  HalUARTReadDMA
       6  HalUARTReadDMA::?relay
       9  HalUARTResume
       6  HalUARTResume::?relay
      80  HalUARTRxAvailDMA
       6  HalUARTRxAvailDMA::?relay
       6  HalUARTSuspend
       6  HalUARTSuspend::?relay
      19  HalUARTWrite
       6  HalUARTWrite::?relay
     231  HalUARTWriteDMA
       6  HalUARTWriteDMA::?relay
      19  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  P0DIR
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0DBUF
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_P0
     526  dmaCfg

 
 1 358 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    16 bytes in segment SFR_AN
   526 bytes in segment XDATA_Z
 
    90 bytes of CODE     memory
     0 bytes of DATA     memory (+ 16 bytes shared)
 1 358 bytes of HUGECODE memory
   526 bytes of XDATA    memory

Errors: none
Warnings: 1
