###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  17:52:29
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\SRC\DemoPrj\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWDC05.tmp
#        (D:\SRC\DemoPrj\Components\osal\mcu\cc2530\OSAL_Nv.c -D ZIGBEEPRO -D
#        HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\OSAL_Nv.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\OSAL_Nv.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2008-08-06 17:17:11 -0700 (Wed, 06 Aug 2008) $
      4            Revision:       $Revision: 17715 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
     43                be reserved for use by this module.
     44          **************************************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "ZComdef.h"
     54          #include "OSAL_Nv.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          #define OSAL_NV_PAGE_FREE       HAL_FLASH_PAGE_SIZE
     73          
     74          // In case pages 0-1 are ever used, define a null page value.
     75          #define OSAL_NV_PAGE_NULL       0
     76          
     77          // In case item Id 0 is ever used, define a null item value.
     78          #define OSAL_NV_ITEM_NULL       0
     79          
     80          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     81          
     82          #define OSAL_NV_PAGE_HDR_OFFSET 0
     83          
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
     89          
     90          #define OSAL_NV_DATA_SIZE( LEN )  \
     91             ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)
     92          
     93          #define OSAL_NV_ITEM_SIZE( LEN )  \
     94            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE)
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          typedef struct
    101          {
    102            uint16 id;
    103            uint16 len;   // Enforce Flash-WORD size on len.
    104            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    105            uint16 stat;  // Item status.
    106          } osalNvHdr_t;
    107          // Struct member offsets.
    108          #define OSAL_NV_HDR_ID    0
    109          #define OSAL_NV_HDR_LEN   2
    110          #define OSAL_NV_HDR_CHK   4
    111          #define OSAL_NV_HDR_STAT  6
    112          
    113          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    114          #define OSAL_NV_HDR_SIZE  8
    115          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    116          
    117          typedef struct
    118          {
    119            uint16 active;
    120            uint16 inUse;
    121            uint16 xfer;
    122            uint16 spare;
    123          } osalNvPgHdr_t;
    124          // Struct member offsets.
    125          #define OSAL_NV_PG_ACTIVE 0
    126          #define OSAL_NV_PG_INUSE  2
    127          #define OSAL_NV_PG_XFER   4
    128          #define OSAL_NV_PG_SPARE  6
    129          
    130          #define OSAL_NV_PAGE_HDR_SIZE  8
    131          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    132          
    133          typedef enum
    134          {
    135            eNvXfer,
    136            eNvZero
    137          } eNvHdrEnum;
    138          
    139          typedef enum
    140          {
    141            ePgActive,
    142            ePgInUse,
    143            ePgXfer,
    144            ePgSpare
    145          } ePgHdrEnum;
    146          
    147          /*********************************************************************
    148           * EXTERNAL FUNCTIONS
    149           */
    150          
    151          extern bool HalAdcCheckVdd(uint8 limit);
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          
    157          #ifndef OAD_KEEP_NV_PAGES
    158          // When NV pages are to remain intact during OAD download,
    159          // the image itself should not include NV pages.
    160          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    161          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    162          #pragma required=_nvBuf
    163          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
    164          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _nvBuf
    165          #pragma required=_nvIEEE
    166          #endif // OAD_KEEP_NV_PAGES
    167          
    168          /*********************************************************************
    169           * LOCAL VARIABLES
    170           */
    171          
    172          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvIEEE
    174          
    175          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    177          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          
    180          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          
    183          /* Immediately before the voltage critical operations of a page erase or
    184           * a word write, check bus voltage. If less than min, set global flag & abort.
    185           * Since this is to be done at the lowest level, many void functions would have to be changed to
    186           * return a value and code added to check that value before proceeding, resulting in a very
    187           * expensive code size hit for implementing this properly. Therefore, use this global as follows:
    188           * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
    189           * check the value. Thus, the global is an accumulator of any error that occurred in any of the
    190           * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
    191           * may occur on any item init or write. This is much more expedient and code saving than adding
    192           * return values and checking return values to early out. No matter which method is used, an NV
    193           * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
    194           * and checksums will detect and allow recovery from such a condition.
    195           *
    196           * One unfortunate side-effect of using the global fail flag vice adding and checking return
    197           * values, is that when setting an item Id to zero has failed due to the low VCC check,
    198           * the page lost-bytes counter is still updated. Having an artificially high lost-byte
    199           * count makes it look like there are more bytes to recover from compacting a page than there may
    200           * actually be. The easy work-around implemented is it to invoke initNV() from osal_nv_item_init or
    201           * osal_nv_write anytime that the failF gets set - this will re-walk all of the pages and set the
    202           * page offset count and page lost bytes count to their actual values.
    203           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint8 failF;
   \                     failF:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          
    210          static uint8  initNV( void );
    211          
    212          static void   setPageUse( uint8 pg, uint8 inUse );
    213          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    214          static void   erasePage( uint8 pg );
    215          static void   compactPage( uint8 pg );
    216          
    217          static uint16 findItem( uint16 id );
    218          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    219          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    220          
    221          static uint16 calcChkB( uint16 len, uint8 *buf );
    222          static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
    223          
    224          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    225          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    226          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    227          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    228          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    229          
    230          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    231          
    232          /*********************************************************************
    233           * @fn      initNV
    234           *
    235           * @brief   Initialize the NV flash pages.
    236           *
    237           * @param   none
    238           *
    239           * @return  TRUE
    240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          static uint8 initNV( void )
   \                     initNV:
    242          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    243            osalNvPgHdr_t pgHdr;
    244            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   7F00         MOV       R7,#0x0
    245            uint8 newPg = OSAL_NV_PAGE_NULL;
   \   00000C   75..00       MOV       ?V0,#0x0
    246            uint8 findDups = FALSE;
   \   00000F   75..00       MOV       ?V1,#0x0
    247            uint8 pg;
    248          
    249            pgRes = OSAL_NV_PAGE_NULL;
   \   000012   90....       MOV       DPTR,#pgRes
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
    250          
    251            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000017   7E79         MOV       R6,#0x79
    252            {
    253              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000019                ; Setup parameters for call to function HalFlashRead
   \   000019   75..08       MOV       ?V2,#0x8
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7402         MOV       A,#0x2
   \   000026   12....       LCALL     ?XSTACK_DISP102_8
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   EE           MOV       A,R6
   \   00002E   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
    254          
    255              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000034   85..82       MOV       DPL,?XSP + 0
   \   000037   85..83       MOV       DPH,?XSP + 1
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F4           CPL       A
   \   00003C   7003         JNZ       ??initNV_1
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F4           CPL       A
   \                     ??initNV_1:
   \   000041   7013         JNZ       ??initNV_2
    256              {
    257                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000043   90....       MOV       DPTR,#pgRes
   \   000046   E0           MOVX      A,@DPTR
   \   000047   7004         JNZ       ??initNV_3
    258                {
    259                  pgRes = pg;
   \   000049   EE           MOV       A,R6
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   802B         SJMP      ??initNV_4
    260                }
    261                else
    262                {
    263                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004D                ; Setup parameters for call to function setPageUse
   \   00004D   7A01         MOV       R2,#0x1
   \   00004F   EE           MOV       A,R6
   \   000050   F9           MOV       R1,A
   \   000051   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000054   8022         SJMP      ??initNV_4
    264                }
    265              }
    266              else  // Page is active.
    267              {
    268                // If the page is not yet in use, it is the tgt of items from an xfer.
    269                if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F4           CPL       A
   \   00005D   7003         JNZ       ??initNV_5
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F4           CPL       A
   \                     ??initNV_5:
   \   000062   7004         JNZ       ??initNV_6
    270                {
    271                  newPg = pg;
   \   000064   8E..         MOV       ?V0,R6
   \   000066   8010         SJMP      ??initNV_4
    272                }
    273                // An Xfer from this page was in progress.
    274                else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_6:
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F4           CPL       A
   \   00006F   7003         JNZ       ??initNV_7
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F4           CPL       A
   \                     ??initNV_7:
   \   000074   6002         JZ        ??initNV_4
    275                {
    276                  oldPg = pg;
   \   000076   EE           MOV       A,R6
   \   000077   FF           MOV       R7,A
    277                }
    278              }
    279          
    280              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    281              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_4:
   \   000078                ; Setup parameters for call to function initPage
   \   000078   AC..         MOV       R4,?V1
   \   00007A   7A00         MOV       R2,#0x0
   \   00007C   7B00         MOV       R3,#0x0
   \   00007E   EE           MOV       A,R6
   \   00007F   F9           MOV       R1,A
   \   000080   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   000083   EA           MOV       A,R2
   \   000084   4B           ORL       A,R3
   \   000085   6005         JZ        ??initNV_8
    282              {
    283                findDups = TRUE;
   \   000087   75..01       MOV       ?V1,#0x1
    284                pg = OSAL_NV_PAGE_BEG-1;
   \   00008A   7E78         MOV       R6,#0x78
    285                continue;
    286              }
    287            }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   00008C   0E           INC       R6
   \   00008D   EE           MOV       A,R6
   \   00008E   C3           CLR       C
   \   00008F   947F         SUBB      A,#0x7f
   \   000091   4086         JC        ??initNV_0
    288          
    289            /* First the old page is erased, and then the new page is put into use.
    290             * So if a transfer was in progress, the new page will always not yet be
    291             * marked as in use, since that is the last step to ending a transfer.
    292             */
    293            if ( newPg != OSAL_NV_PAGE_NULL )
   \   000093   E5..         MOV       A,?V0
   \   000095   601D         JZ        ??initNV_9
    294            {
    295              /* If there is already a fallow page reserved, keep it and put the newPg in use.
    296               * An unfinished compaction will finish to the new reserve page and the old page
    297               * will be erased and reserved.
    298               */
    299              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000097   90....       MOV       DPTR,#pgRes
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   600C         JZ        ??initNV_10
    300              {
    301                setPageUse( newPg, TRUE );
   \   00009D                ; Setup parameters for call to function setPageUse
   \   00009D   7A01         MOV       R2,#0x1
   \   00009F   A9..         MOV       R1,?V0
   \   0000A1   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
    302              }
    303              /* If setting old page to 'xfer' failed or board reset before it was effected, there is no way
    304               * to know which page was the 'old page' - so just reset all NV pages to start clean.
    305               */
    306              else if ( oldPg != OSAL_NV_PAGE_NULL )
    307              {
    308                pgRes = newPg;
    309              }
    310          
    311              /* If a page compaction was interrupted and the page being compacted is not
    312               * yet erased, then there may be items remaining to xfer before erasing.
    313               */
    314              if ( oldPg != OSAL_NV_PAGE_NULL )
   \   0000A4   EF           MOV       A,R7
   \   0000A5   7008         JNZ       ??initNV_11
   \   0000A7   800B         SJMP      ??initNV_9
   \                     ??initNV_10:
   \   0000A9   EF           MOV       A,R7
   \   0000AA   600E         JZ        ??initNV_12
   \   0000AC   E5..         MOV       A,?V0
   \   0000AE   F0           MOVX      @DPTR,A
    315              {
    316                compactPage( oldPg );
   \                     ??initNV_11:
   \   0000AF                ; Setup parameters for call to function compactPage
   \   0000AF   EF           MOV       A,R7
   \   0000B0   F9           MOV       R1,A
   \   0000B1   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
    317              }
    318            }
    319          
    320            /* If no page met the criteria to be the reserve page:
    321             *  - A compactPage() failed or board reset before doing so.
    322             *  - Perhaps the user changed which Flash pages are dedicated to NV and downloaded the code
    323             *    without erasing Flash?
    324             */
    325            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_9:
   \   0000B4   90....       MOV       DPTR,#pgRes
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   7011         JNZ       ??initNV_13
    326            {
    327              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_12:
   \   0000BA   7E79         MOV       R6,#0x79
    328              {
    329                erasePage( pg );
   \                     ??initNV_14:
   \   0000BC                ; Setup parameters for call to function erasePage
   \   0000BC   EE           MOV       A,R6
   \   0000BD   F9           MOV       R1,A
   \   0000BE   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    330              }
   \   0000C1   0E           INC       R6
   \   0000C2   EE           MOV       A,R6
   \   0000C3   C3           CLR       C
   \   0000C4   947F         SUBB      A,#0x7f
   \   0000C6   40F4         JC        ??initNV_14
    331              initNV();
   \   0000C8                ; Setup parameters for call to function initNV
   \   0000C8   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
    332            }
    333          
    334            return TRUE;
   \                     ??initNV_13:
   \   0000CB   7901         MOV       R1,#0x1
   \   0000CD   7408         MOV       A,#0x8
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D2                REQUIRE ?Subroutine0
   \   0000D2                ; // Fall through to label ?Subroutine0
    335          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   F9           MOV       R1,A
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    336          
    337          /*********************************************************************
    338           * @fn      setPageUse
    339           *
    340           * @brief   Set page header active/inUse state according to 'inUse'.
    341           *
    342           * @param   pg - Valid NV page to verify and init.
    343           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    344           *
    345           * @return  none
    346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    348          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    349            osalNvPgHdr_t pgHdr;
    350          
    351            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    352          
    353            if ( inUse )
   \   000014   EA           MOV       A,R2
   \   000015   6008         JZ        ??setPageUse_0
    354            {
    355              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E4           CLR       A
   \   00001D   8007         SJMP      ??setPageUse_1
    356            }
    357            else
    358            {
    359              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   74FF         MOV       A,#-0x1
    360            }
   \                     ??setPageUse_1:
   \   000026   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    361          
    362            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_89:
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    363          }
   \   000030   7408         MOV       A,#0x8
   \   000032                REQUIRE ?Subroutine1
   \   000032                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function writeWordH
   \   000003                ; Setup parameters for call to function writeWord
   \   000003                ; Setup parameters for call to function writeWord
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   22           RET
    364          
    365          /*********************************************************************
    366           * @fn      initPage
    367           *
    368           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    369           *
    370           * @param   pg - Valid NV page to verify and init.
    371           * @param   id - Valid NV item Id to use function as a "findItem".
    372           *               If set to NULL then just perform the page initialization.
    373           *
    374           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    375           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    377          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    378          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00000D   89..         MOV       ?V6,R1
   \   00000F   8C..         MOV       ?V7,R4
    379            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000011   75..08       MOV       ?V0,#0x8
   \   000014   75..00       MOV       ?V1,#0x0
    380            uint16 sz, lost = 0;
   \   000017   75..00       MOV       ?V2,#0x0
   \   00001A   75..00       MOV       ?V3,#0x0
   \   00001D   801B         SJMP      ??initPage_0
    381            osalNvHdr_t hdr;
    382          
    383            do
    384            {
    385              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    386          
    387              if ( hdr.id == OSAL_NV_ERASED_ID )
    388              {
    389                break;
    390              }
    391              offset += OSAL_NV_HDR_SIZE;
    392              sz = OSAL_NV_DATA_SIZE( hdr.len );
    393          
    394              // A bad 'len' write has blown away the rest of the page.
    395              if ( (offset + sz) > OSAL_NV_PAGE_FREE )
    396              {
    397                lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
    398                offset = OSAL_NV_PAGE_FREE;
    399                break;
    400              }
    401          
    402              if ( hdr.id != OSAL_NV_ZEROED_ID )
    403              {
    404                /* This trick allows function to do double duty for findItem() without
    405                 * compromising its essential functionality at powerup initialization.
    406                 */
    407                if ( id != OSAL_NV_ITEM_NULL )
    408                {
    409                  /* This trick allows asking to find the old/transferred item in case
    410                   * of a successful new item write that gets interrupted before the
    411                   * old item can be zeroed out.
    412                   */
    413                  if ( (id & 0x7fff) == hdr.id )
    414                  {
    415                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    416                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
    417                    {
    418                      return offset;
    419                    }
    420                  }
    421                }
    422                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    423                else
    424                {
    425                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
    426                  {
    427                    if ( findDups )
    428                    {
    429                      if ( hdr.stat == OSAL_NV_ERASED_ID )
    430                      {
    431                        /* The trick of setting the MSB of the item Id causes the logic
    432                         * immediately above to return a valid page only if the header 'stat'
    433                         * indicates that it was the older item being transferred.
    434                         */
    435                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
    436          
    437                        if ( off != OSAL_NV_ITEM_NULL )
    438                        {
    439                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
    440                        }
    441                      }
    442                    }
    443                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    444                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
    445                    {
    446                      return OSAL_NV_ERASED_ID;
    447                    }
    448                  }
    449                  else
    450                  {
    451                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
    452                    lost += (OSAL_NV_HDR_SIZE + sz);
    453                  }
    454                }
    455              }
    456              else
    457              {
    458                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_1:
   \   00001F   EE           MOV       A,R6
   \   000020   2408         ADD       A,#0x8
   \   000022   F8           MOV       R0,A
   \   000023   E4           CLR       A
   \   000024   3F           ADDC      A,R7
   \   000025   F9           MOV       R1,A
   \   000026   E5..         MOV       A,?V2
   \   000028   28           ADD       A,R0
   \   000029   F5..         MOV       ?V2,A
   \   00002B   E5..         MOV       A,?V3
   \   00002D   39           ADDC      A,R1
   \   00002E   F5..         MOV       ?V3,A
    459              }
    460              offset += sz;
   \                     ??initPage_2:
   \   000030   E5..         MOV       A,?V0
   \   000032   2E           ADD       A,R6
   \   000033   F5..         MOV       ?V0,A
   \   000035   E5..         MOV       A,?V1
   \   000037   3F           ADDC      A,R7
   \   000038   F5..         MOV       ?V1,A
    461          
    462            } while ( TRUE );
   \                     ??initPage_0:
   \   00003A                ; Setup parameters for call to function HalFlashRead
   \   00003A   75..08       MOV       ?V4,#0x8
   \   00003D   75..00       MOV       ?V5,#0x0
   \   000040   78..         MOV       R0,#?V4
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?XSTACK_DISP102_8
   \   00004A   AA..         MOV       R2,?V0
   \   00004C   AB..         MOV       R3,?V1
   \   00004E   A9..         MOV       R1,?V6
   \   000050   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F4           CPL       A
   \   00005D   7003         JNZ       ??initPage_3
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F4           CPL       A
   \                     ??initPage_3:
   \   000062   603C         JZ        ??initPage_4
   \   000064   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00006F   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000072   FE           MOV       R6,A
   \   000073   E9           MOV       A,R1
   \   000074   FF           MOV       R7,A
   \   000075   E5..         MOV       A,?V0
   \   000077   2E           ADD       A,R6
   \   000078   F8           MOV       R0,A
   \   000079   E5..         MOV       A,?V1
   \   00007B   3F           ADDC      A,R7
   \   00007C   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00007F   4044         JC        ??initPage_5
   \   000081   E5..         MOV       A,?V2
   \   000083   2408         ADD       A,#0x8
   \   000085   F5..         MOV       ?V2,A
   \   000087   E5..         MOV       A,?V3
   \   000089   3408         ADDC      A,#0x8
   \   00008B   F5..         MOV       ?V3,A
   \   00008D   C3           CLR       C
   \   00008E   E5..         MOV       A,?V2
   \   000090   95..         SUBB      A,?V0
   \   000092   F5..         MOV       ?V2,A
   \   000094   E5..         MOV       A,?V3
   \   000096   95..         SUBB      A,?V1
   \   000098   F5..         MOV       ?V3,A
   \   00009A   75..00       MOV       ?V0,#0x0
   \   00009D   75..08       MOV       ?V1,#0x8
    463          
    464            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_4:
   \   0000A0   A8..         MOV       R0,?V6
   \   0000A2   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   0000A9   39           ADDC      A,R1
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   E5..         MOV       A,?V0
   \   0000AE   F0           MOVX      @DPTR,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E5..         MOV       A,?V1
   \   0000B2   12....       LCALL     ?Subroutine7 & 0xFFFF
    465            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_0:
   \   0000B5   E5..         MOV       A,?V2
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   E5..         MOV       A,?V3
   \   0000BB   F0           MOVX      @DPTR,A
    466          
    467            return OSAL_NV_ITEM_NULL;
   \   0000BC   7A00         MOV       R2,#0x0
   \   0000BE   7B00         MOV       R3,#0x0
   \                     ??initPage_6:
   \   0000C0   740A         MOV       A,#0xa
   \   0000C2   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??initPage_5:
   \   0000C5   7402         MOV       A,#0x2
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000CD   7003         JNZ       $+5
   \   0000CF   02....       LJMP      ??initPage_1 & 0xFFFF
   \   0000D2   85..82       MOV       DPL,?XSP + 0
   \   0000D5   85..83       MOV       DPH,?XSP + 1
   \   0000D8   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000DB   6052         JZ        ??initPage_7
   \   0000DD   85..82       MOV       DPL,?XSP + 0
   \   0000E0   85..83       MOV       DPH,?XSP + 1
   \   0000E3   A3           INC       DPTR
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   547F         ANL       A,#0x7f
   \   0000E7   F9           MOV       R1,A
   \   0000E8   7402         MOV       A,#0x2
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   68           XRL       A,R0
   \   0000EF   7003         JNZ       ??initPage_8
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   69           XRL       A,R1
   \                     ??initPage_8:
   \   0000F4   6003         JZ        $+5
   \   0000F6   02....       LJMP      ??initPage_2 & 0xFFFF
   \   0000F9   7408         MOV       A,#0x8
   \   0000FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FE   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000101   85..82       MOV       DPL,?XSP + 0
   \   000104   85..83       MOV       DPH,?XSP + 1
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   5480         ANL       A,#0x80
   \   00010B   700F         JNZ       ??initPage_9
   \   00010D   74FF         MOV       A,#-0x1
   \   00010F   6A           XRL       A,R2
   \   000110   7003         JNZ       ??initPage_10
   \   000112   74FF         MOV       A,#-0x1
   \   000114   6B           XRL       A,R3
   \                     ??initPage_10:
   \   000115   6003         JZ        $+5
   \   000117   02....       LJMP      ??initPage_2 & 0xFFFF
   \   00011A   800D         SJMP      ??initPage_11
   \                     ??initPage_9:
   \   00011C   74FF         MOV       A,#-0x1
   \   00011E   6A           XRL       A,R2
   \   00011F   7003         JNZ       ??initPage_12
   \   000121   74FF         MOV       A,#-0x1
   \   000123   6B           XRL       A,R3
   \                     ??initPage_12:
   \   000124   7003         JNZ       $+5
   \   000126   02....       LJMP      ??initPage_2 & 0xFFFF
   \                     ??initPage_11:
   \   000129   AA..         MOV       R2,?V0
   \   00012B   AB..         MOV       R3,?V1
   \   00012D   8091         SJMP      ??initPage_6
   \                     ??initPage_7:
   \   00012F                ; Setup parameters for call to function calcChkF
   \   00012F   AA..         MOV       R2,?V0
   \   000131   AB..         MOV       R3,?V1
   \   000133   A9..         MOV       R1,?V6
   \   000135   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   68           XRL       A,R0
   \   00013D   7003         JNZ       ??initPage_13
   \   00013F   A3           INC       DPTR
   \   000140   E0           MOVX      A,@DPTR
   \   000141   69           XRL       A,R1
   \                     ??initPage_13:
   \   000142   7050         JNZ       ??initPage_14
   \   000144   7408         MOV       A,#0x8
   \   000146   12....       LCALL     ?XSTACK_DISP0_8
   \   000149   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00014C   E5..         MOV       A,?V7
   \   00014E   6030         JZ        ??initPage_15
   \   000150   74FF         MOV       A,#-0x1
   \   000152   68           XRL       A,R0
   \   000153   7003         JNZ       ??initPage_16
   \   000155   74FF         MOV       A,#-0x1
   \   000157   69           XRL       A,R1
   \                     ??initPage_16:
   \   000158   6003         JZ        $+5
   \   00015A   02....       LJMP      ??initPage_2 & 0xFFFF
   \   00015D                ; Setup parameters for call to function findItem
   \   00015D   7402         MOV       A,#0x2
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   E0           MOVX      A,@DPTR
   \   000163   FA           MOV       R2,A
   \   000164   A3           INC       DPTR
   \   000165   E0           MOVX      A,@DPTR
   \   000166   4480         ORL       A,#0x80
   \   000168   FB           MOV       R3,A
   \   000169   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00016C   EA           MOV       A,R2
   \   00016D   4B           ORL       A,R3
   \   00016E   7003         JNZ       $+5
   \   000170   02....       LJMP      ??initPage_2 & 0xFFFF
   \   000173                ; Setup parameters for call to function setItem
   \   000173   7C01         MOV       R4,#0x1
   \   000175   90....       MOV       DPTR,#findPg
   \   000178   E0           MOVX      A,@DPTR
   \   000179   F9           MOV       R1,A
   \   00017A   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   00017D   02....       LJMP      ??initPage_2 & 0xFFFF
   \                     ??initPage_15:
   \   000180   74FF         MOV       A,#-0x1
   \   000182   68           XRL       A,R0
   \   000183   7003         JNZ       ??initPage_17
   \   000185   74FF         MOV       A,#-0x1
   \   000187   69           XRL       A,R1
   \                     ??initPage_17:
   \   000188   7003         JNZ       $+5
   \   00018A   02....       LJMP      ??initPage_2 & 0xFFFF
   \   00018D   7AFF         MOV       R2,#-0x1
   \   00018F   7BFF         MOV       R3,#-0x1
   \   000191   02....       LJMP      ??initPage_6 & 0xFFFF
   \                     ??initPage_14:
   \   000194                ; Setup parameters for call to function setItem
   \   000194   7C01         MOV       R4,#0x1
   \   000196   AA..         MOV       R2,?V0
   \   000198   AB..         MOV       R3,?V1
   \   00019A   A9..         MOV       R1,?V6
   \   00019C   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   00019F   02....       LJMP      ??initPage_1 & 0xFFFF
    468          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine42_0
   \   000006                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   F9           MOV       R1,A
   \   000001   C3           CLR       C
   \   000002   E8           MOV       A,R0
   \   000003   9401         SUBB      A,#0x1
   \   000005   E9           MOV       A,R1
   \   000006   9408         SUBB      A,#0x8
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   A8..         MOV       R0,?V4
   \   000009   A9..         MOV       R1,?V5
   \   00000B   7406         MOV       A,#0x6
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EC           MOV       A,R4
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3D           ADDC      A,R5
   \   000006   F9           MOV       R1,A
   \   000007   E8           MOV       A,R0
   \   000008   54FC         ANL       A,#0xfc
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E5..         MOV       A,?V0
   \   000002   2408         ADD       A,#0x8
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F5..         MOV       ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000008   28           ADD       A,R0
   \   000009   22           RET
    469          
    470          /*********************************************************************
    471           * @fn      erasePage
    472           *
    473           * @brief   Erases a page in Flash.
    474           *
    475           * @param   pg - Valid NV page to erase.
    476           *
    477           * @return  none
    478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          static void erasePage( uint8 pg )
   \                     erasePage:
    480          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    481            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000007                ; Setup parameters for call to function HalAdcCheckVdd
   \   000007   7904         MOV       R1,#0x4
   \   000009   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   00000C   E9           MOV       A,R1
   \   00000D   7007         JNZ       ??erasePage_0
    482            {
    483              failF = TRUE;
   \   00000F   90....       MOV       DPTR,#failF
   \   000012   7401         MOV       A,#0x1
   \   000014   8015         SJMP      ??erasePage_1
    484              return;
    485            }
    486          
    487            HalFlashErase(pg);
   \                     ??erasePage_0:
   \   000016                ; Setup parameters for call to function HalFlashErase
   \   000016   EE           MOV       A,R6
   \   000017   F9           MOV       R1,A
   \   000018   12....       LCALL     `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    488          
    489            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00001B   EE           MOV       A,R6
   \   00001C   2E           ADD       A,R6
   \   00001D   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000020   7408         MOV       A,#0x8
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E4           CLR       A
   \   000025   12....       LCALL     ?Subroutine7 & 0xFFFF
    490            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_1:
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \                     ??erasePage_1:
   \   00002B   F0           MOVX      @DPTR,A
    491          }
   \   00002C   02....       LJMP      ??Subroutine41_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET
    492          
    493          /*********************************************************************
    494           * @fn      compactPage
    495           *
    496           * @brief   Compacts the page specified.
    497           *
    498           * @param   srcPg - Valid NV page to erase.
    499           *
    500           * @return  none
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          static void compactPage( uint8 srcPg )
   \                     compactPage:
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    504            uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \   00000C   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V1,A
    505            uint16 srcOff = OSAL_NV_ZEROED_ID;
   \   000016   12....       LCALL     ?Subroutine6 & 0xFFFF
    506            osalNvHdr_t hdr;
    507          
    508            // Mark page as being in process of compaction.
    509            writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
   \                     ??CrossCallReturnLabel_87:
   \   000019   7A04         MOV       R2,#0x4
   \   00001B   FB           MOV       R3,A
   \   00001C   EE           MOV       A,R6
   \   00001D   F9           MOV       R1,A
   \   00001E   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    510          
    511            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000021   85..82       MOV       DPL,?XSP + 0
   \   000024   85..83       MOV       DPH,?XSP + 1
   \   000027   7408         MOV       A,#0x8
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   E4           CLR       A
   \   00002C   02....       LJMP      ??compactPage_0 & 0xFFFF
    512          
    513            do
    514            {
    515              uint16 sz;
    516              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    517          
    518              if ( hdr.id == OSAL_NV_ERASED_ID )
    519              {
    520                break;
    521              }
    522          
    523              srcOff += OSAL_NV_HDR_SIZE;
    524          
    525              if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
    526              {
    527                break;
    528              }
    529          
    530              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \                     ??compactPage_1:
   \   00002F   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000032   F5..         MOV       ?V2,A
   \   000034   E9           MOV       A,R1
   \   000035   F5..         MOV       ?V3,A
    531          
    532              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00003F   6075         JZ        ??CrossCallReturnLabel_30
    533              {
    534                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000041                ; Setup parameters for call to function calcChkF
   \   000041   85..82       MOV       DPL,?XSP + 0
   \   000044   85..83       MOV       DPH,?XSP + 1
   \   000047   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00004A   F9           MOV       R1,A
   \   00004B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   E0           MOVX      A,@DPTR
   \   000052   68           XRL       A,R0
   \   000053   7003         JNZ       ??compactPage_2
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   69           XRL       A,R1
   \                     ??compactPage_2:
   \   000058   7057         JNZ       ??compactPage_3
    535                {
    536                  setItem( srcPg, srcOff, eNvXfer );
   \   00005A                ; Setup parameters for call to function setItem
   \   00005A   7C00         MOV       R4,#0x0
   \   00005C   12....       LCALL     ?Subroutine18 & 0xFFFF
    537                  writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
   \                     ??CrossCallReturnLabel_29:
   \   00005F                ; Setup parameters for call to function writeBuf
   \   00005F   7402         MOV       A,#0x2
   \   000061   12....       LCALL     ?XSTACK_DISP100_8
   \   000064   88..         MOV       ?V4,R0
   \   000066   89..         MOV       ?V5,R1
   \   000068   78..         MOV       R0,#?V4
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   7C08         MOV       R4,#0x8
   \   00006F   7D00         MOV       R5,#0x0
   \   000071   AA..         MOV       R2,?V0
   \   000073   AB..         MOV       R3,?V1
   \   000075   90....       MOV       DPTR,#pgRes
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F9           MOV       R1,A
   \   00007A   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
    538                  dstOff += OSAL_NV_HDR_SIZE;
   \   000082   12....       LCALL     ?Subroutine26 & 0xFFFF
    539                  xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \                     ??CrossCallReturnLabel_48:
   \   000085                ; Setup parameters for call to function xferBuf
   \   000085   78..         MOV       R0,#?V2
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   78..         MOV       R0,#?V0
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   90....       MOV       DPTR,#pgRes
   \   000092   E0           MOVX      A,@DPTR
   \   000093   FC           MOV       R4,A
   \   000094   7404         MOV       A,#0x4
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00009C   F9           MOV       R1,A
   \   00009D   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   0000A0   7404         MOV       A,#0x4
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
    540                  dstOff += sz;
   \   0000A5   E5..         MOV       A,?V0
   \   0000A7   25..         ADD       A,?V2
   \   0000A9   F5..         MOV       ?V0,A
   \   0000AB   E5..         MOV       A,?V1
   \   0000AD   35..         ADDC      A,?V3
   \   0000AF   F5..         MOV       ?V1,A
    541                }
    542          
    543                setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
   \                     ??compactPage_3:
   \   0000B1                ; Setup parameters for call to function setItem
   \   0000B1   7C01         MOV       R4,#0x1
   \   0000B3   12....       LCALL     ?Subroutine18 & 0xFFFF
    544              }
    545          
    546              srcOff += sz;
   \                     ??CrossCallReturnLabel_30:
   \   0000B6   85..82       MOV       DPL,?XSP + 0
   \   0000B9   85..83       MOV       DPH,?XSP + 1
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   25..         ADD       A,?V2
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   35..         ADDC      A,?V3
   \                     ??compactPage_0:
   \   0000C4   F0           MOVX      @DPTR,A
    547          
    548            } while ( TRUE );
   \   0000C5                ; Setup parameters for call to function HalFlashRead
   \   0000C5   75..08       MOV       ?V2,#0x8
   \   0000C8   75..00       MOV       ?V3,#0x0
   \   0000CB   78..         MOV       R0,#?V2
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   7404         MOV       A,#0x4
   \   0000D2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000DD   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000E0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E3   7402         MOV       A,#0x2
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F4           CPL       A
   \   0000EA   7003         JNZ       ??compactPage_4
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F4           CPL       A
   \                     ??compactPage_4:
   \   0000EF   602B         JZ        ??compactPage_5
   \   0000F1   85..82       MOV       DPL,?XSP + 0
   \   0000F4   85..83       MOV       DPH,?XSP + 1
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   2408         ADD       A,#0x8
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   3400         ADDC      A,#0x0
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100   7404         MOV       A,#0x4
   \   000102   12....       LCALL     ?XSTACK_DISP0_8
   \   000105   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000108   85..82       MOV       DPL,?XSP + 0
   \   00010B   85..83       MOV       DPH,?XSP + 1
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   2C           ADD       A,R4
   \   000110   F8           MOV       R0,A
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   3D           ADDC      A,R5
   \   000114   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000117   5003         JNC       $+5
   \   000119   02....       LJMP      ??compactPage_1 & 0xFFFF
    549          
    550            pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
   \                     ??compactPage_5:
   \   00011C   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00011F   E5..         MOV       A,?V0
   \   000121   F0           MOVX      @DPTR,A
   \   000122   A3           INC       DPTR
   \   000123   E5..         MOV       A,?V1
   \   000125   F0           MOVX      @DPTR,A
    551          
    552            /* In order to recover from a page compaction that is interrupted,
    553             * the logic in osal_nv_init() depends upon the following order:
    554             * 1. Compacted page is erased.
    555             * 2. State of the target of compaction is changed ePgActive to ePgInUse.
    556             */
    557            erasePage( srcPg );
   \   000126                ; Setup parameters for call to function erasePage
   \   000126   EE           MOV       A,R6
   \   000127   F9           MOV       R1,A
   \   000128   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    558          
    559            // Mark the reserve page as being in use.
    560            setPageUse( pgRes, TRUE );
   \   00012B                ; Setup parameters for call to function setPageUse
   \   00012B   7A01         MOV       R2,#0x1
   \   00012D   90....       MOV       DPTR,#pgRes
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F9           MOV       R1,A
   \   000132   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
    561          
    562            // Set the reserve page to be the newly erased page.
    563            pgRes = srcPg;
   \   000135   EE           MOV       A,R6
   \   000136   90....       MOV       DPTR,#pgRes
   \   000139   F0           MOVX      @DPTR,A
    564          }
   \   00013A   740A         MOV       A,#0xa
   \   00013C                REQUIRE ?Subroutine3
   \   00013C                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#pgRes
   \   000003   E0           MOVX      A,@DPTR
   \   000004   25E0         ADD       A,0xE0 /* A   */
   \   000006   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007                REQUIRE ??Subroutine45_0
   \   000007                ; // Fall through to label ??Subroutine45_0
    565          
    566          /*********************************************************************
    567           * @fn      findItem
    568           *
    569           * @brief   Find an item Id in NV and return the page and offset to its data.
    570           *
    571           * @param   id - Valid NV item Id.
    572           *
    573           * @return  Offset of data corresponding to item Id, if found;
    574           *          otherwise OSAL_NV_ITEM_NULL.
    575           *
    576           *          The page containing the item, if found;
    577           *          otherwise no valid assignment made - left equal to item Id.
    578           *
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          static uint16 findItem( uint16 id )
   \                     findItem:
    581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   8003         SJMP      ??findItem_0
    582            uint16 off;
    583            uint8 pg;
    584          
    585            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    586            {
    587              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    588              {
    589                findPg = pg;
    590                return off;
    591              }
    592            }
    593          
    594            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    595            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    596            {
    597              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV       A,#-0x80
   \   00000C   4F           ORL       A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV       R7,A
    598            }
   \   00000E   75..79       MOV       ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV       R4,#0x0
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6008         JZ        ??findItem_3
   \   000020   E5..         MOV       A,?V0
   \   000022   90....       MOV       DPTR,#findPg
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8015         SJMP      ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC       ?V0
   \   00002A   E5..         MOV       A,?V0
   \   00002C   C3           CLR       C
   \   00002D   947F         SUBB      A,#0x7f
   \   00002F   40E0         JC        ??findItem_2
   \   000031   EF           MOV       A,R7
   \   000032   5480         ANL       A,#0x80
   \   000034   60D4         JZ        ??findItem_1
    599            else
    600            {
    601              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV       DPTR,#findPg
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    602              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV       R2,A
   \   00003C   FB           MOV       R3,A
    603            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP      ?Subroutine0 & 0xFFFF
    604          }
    605          
    606          /*********************************************************************
    607           * @fn      initItem
    608           *
    609           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    610           *
    611           * @param   id  - Valid NV item Id.
    612           * @param   len - Item data length.
    613           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    614           *
    615           * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
    616           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   3B           ADDC      A,R3
   \   000001                REQUIRE ??Subroutine44_0
   \   000001                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    617          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    618          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
    619            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   00000B   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00000E   2408         ADD       A,#0x8
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   39           ADDC      A,R1
   \   000013   FB           MOV       R3,A
    620            uint8 rtrn = FALSE;
   \   000014   75..00       MOV       ?V1,#0x0
    621            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000017   75..06       MOV       ?V4,#0x6
    622            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   00001A   90....       MOV       DPTR,#pgRes
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   04           INC       A
   \   00001F   FE           MOV       R6,A
    623            uint8 idx;
    624          
    625            do {
    626              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_0:
   \   000020   EE           MOV       A,R6
   \   000021   C3           CLR       C
   \   000022   947F         SUBB      A,#0x7f
   \   000024   4002         JC        ??initItem_1
    627              {
    628                pg = OSAL_NV_PAGE_BEG;
   \   000026   7E79         MOV       R6,#0x79
    629              }
    630              if ( pg != pgRes )
   \                     ??initItem_1:
   \   000028   90....       MOV       DPTR,#pgRes
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6E           XRL       A,R6
   \   00002D   603A         JZ        ??initItem_2
    631              {
    632                idx = pg - OSAL_NV_PAGE_BEG;
   \   00002F   7487         MOV       A,#-0x79
   \   000031   2E           ADD       A,R6
   \   000032   FF           MOV       R7,A
    633                if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
   \   000033   25E0         ADD       A,0xE0 /* A   */
   \   000035   F8           MOV       R0,A
   \   000036   E4           CLR       A
   \   000037   33           RLC       A
   \   000038   F9           MOV       R1,A
   \   000039   74..         MOV       A,#pgOff & 0xff
   \   00003B   28           ADD       A,R0
   \   00003C   F582         MOV       DPL,A
   \   00003E   74..         MOV       A,#(pgOff >> 8) & 0xff
   \   000040   39           ADDC      A,R1
   \   000041   F583         MOV       DPH,A
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F5..         MOV       ?V2,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V3,A
   \   00004A   74..         MOV       A,#pgLost & 0xff
   \   00004C   28           ADD       A,R0
   \   00004D   F582         MOV       DPL,A
   \   00004F   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   000051   39           ADDC      A,R1
   \   000052   F583         MOV       DPH,A
   \   000054   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    634                {
    635                  break;
    636                }
    637              }
   \                     ??CrossCallReturnLabel_96:
   \   000057   E5..         MOV       A,?V2
   \   000059   C3           CLR       C
   \   00005A   98           SUBB      A,R0
   \   00005B   F8           MOV       R0,A
   \   00005C   E5..         MOV       A,?V3
   \   00005E   99           SUBB      A,R1
   \   00005F   F9           MOV       R1,A
   \   000060   E8           MOV       A,R0
   \   000061   2A           ADD       A,R2
   \   000062   F8           MOV       R0,A
   \   000063   E9           MOV       A,R1
   \   000064   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000067   4009         JC        ??initItem_3
    638              pg++;
   \                     ??initItem_2:
   \   000069   0E           INC       R6
    639            } while (--cnt);
   \   00006A   15..         DEC       ?V4
   \   00006C   E5..         MOV       A,?V4
   \   00006E   70B0         JNZ       ??initItem_0
   \   000070   805B         SJMP      ??initItem_4
    640          
    641            if (cnt)
   \                     ??initItem_3:
   \   000072   E5..         MOV       A,?V4
   \   000074   6057         JZ        ??initItem_4
    642            {
    643              // Item fits if an old page is compacted.
    644              if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
   \   000076   E5..         MOV       A,?V2
   \   000078   2A           ADD       A,R2
   \   000079   F8           MOV       R0,A
   \   00007A   E5..         MOV       A,?V3
   \   00007C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00007F   4005         JC        ??initItem_5
    645              {
    646                pg = pgRes;
   \   000081   90....       MOV       DPTR,#pgRes
   \   000084   E0           MOVX      A,@DPTR
   \   000085   FE           MOV       R6,A
   \                     ??initItem_5:
   \   000086   7410         MOV       A,#0x10
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F5..         MOV       ?V2,A
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F5..         MOV       ?V3,A
    647              }
    648          
    649              // New item is the first one written to the reserved page, then the old page is compacted.
    650              rtrn = writeItem( pg, id, len, buf, flag );
   \   000092                ; Setup parameters for call to function writeItem
   \   000092   E5..         MOV       A,?V0
   \   000094   F5..         MOV       ?V1,A
   \   000096   78..         MOV       R0,#?V1
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   AA..         MOV       R2,?V6
   \   0000A2   AB..         MOV       R3,?V7
   \   0000A4   EE           MOV       A,R6
   \   0000A5   F9           MOV       R1,A
   \   0000A6   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   0000A9   7403         MOV       A,#0x3
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV       A,R1
   \   0000AF   F5..         MOV       ?V1,A
    651          
    652              if ( pg == pgRes )
   \   0000B1   90....       MOV       DPTR,#pgRes
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   6E           XRL       A,R6
   \   0000B6   7015         JNZ       ??initItem_4
    653              {
    654                if ( flag )
   \   0000B8   7479         MOV       A,#0x79
   \   0000BA   2F           ADD       A,R7
   \   0000BB   F9           MOV       R1,A
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   6005         JZ        ??initItem_6
    655                {
    656                  compactPage( OSAL_NV_PAGE_BEG+idx );
   \   0000C0                ; Setup parameters for call to function compactPage
   \   0000C0   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   0000C3   8008         SJMP      ??initItem_4
    657                }
    658                else
    659                {
    660                  *(uint8 *)buf = OSAL_NV_PAGE_BEG+idx;
   \                     ??initItem_6:
   \   0000C5   E9           MOV       A,R1
   \   0000C6   85..82       MOV       DPL,?V2
   \   0000C9   85..83       MOV       DPH,?V3
   \   0000CC   F0           MOVX      @DPTR,A
    661                }
    662              }
    663            }
    664          
    665            return rtrn;
   \                     ??initItem_4:
   \   0000CD   A9..         MOV       R1,?V1
   \   0000CF   02....       LJMP      ??Subroutine48_0 & 0xFFFF
    666          }
    667          
    668          /*********************************************************************
    669           * @fn      setItem
    670           *
    671           * @brief   Set an item Id or status to mark its state.
    672           *
    673           * @param   pg - Valid NV page.
    674           * @param   offset - Valid offset into the page of the item data - the header
    675           *                   offset is calculated from this.
    676           * @param   stat - Valid enum value for the item status.
    677           *
    678           * @return  none
    679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    680          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    681          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8C..         MOV       ?V3,R4
    682            osalNvHdr_t hdr;
    683          
    684            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV       A,R2
   \   00000F   24F8         ADD       A,#-0x8
   \   000011   F5..         MOV       ?V0,A
   \   000013   EB           MOV       A,R3
   \   000014   34FF         ADDC      A,#-0x1
   \   000016   F5..         MOV       ?V1,A
    685            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV       ?V4,#0x8
   \   00001B   75..00       MOV       ?V5,#0x0
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP102_8
   \   000028   AA..         MOV       R2,?V0
   \   00002A   AB..         MOV       R3,?V1
   \   00002C   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
    686          
    687            if ( stat == eNvXfer )
   \   000032   E5..         MOV       A,?V3
   \   000034   7022         JNZ       ??setItem_0
    688            {
    689              hdr.stat = OSAL_NV_ACTIVE;
   \   000036   7406         MOV       A,#0x6
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
    690              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   00003F                ; Setup parameters for call to function writeWord
   \   00003F   7404         MOV       A,#0x4
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   AC82         MOV       R4,DPL
   \   000046   AD83         MOV       R5,DPH
   \   000048   E5..         MOV       A,?V0
   \   00004A   2404         ADD       A,#0x4
   \   00004C   FA           MOV       R2,A
   \   00004D   E4           CLR       A
   \   00004E   35..         ADDC      A,?V1
   \   000050   FB           MOV       R3,A
   \   000051   A9..         MOV       R1,?V2
   \   000053   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   000056   802A         SJMP      ??setItem_1
    691          }
    692            else // if ( stat == eNvZero )
    693            {
    694              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    695                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000060   FE           MOV       R6,A
   \   000061   E4           CLR       A
   \   000062   39           ADDC      A,R1
   \   000063   FF           MOV       R7,A
    696              hdr.id = 0;
   \   000064   12....       LCALL     ?Subroutine6 & 0xFFFF
    697              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_88:
   \   000067   AA..         MOV       R2,?V0
   \   000069   AB..         MOV       R3,?V1
   \   00006B   A9..         MOV       R1,?V2
   \   00006D   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    698              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000070   A8..         MOV       R0,?V2
   \   000072   E8           MOV       A,R0
   \   000073   28           ADD       A,R0
   \   000074   F8           MOV       R0,A
   \   000075   E4           CLR       A
   \   000076   33           RLC       A
   \   000077   F9           MOV       R1,A
   \   000078   12....       LCALL     ?Subroutine39 & 0xFFFF
    699            }
   \                     ??CrossCallReturnLabel_75:
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   2E           ADD       A,R6
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   3F           ADDC      A,R7
   \   000081   F0           MOVX      @DPTR,A
    700          }
   \                     ??setItem_1:
   \   000082   7408         MOV       A,#0x8
   \   000084   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   2408         ADD       A,#0x8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   E8           MOV       A,R0
   \   00000A   54FC         ANL       A,#0xfc
   \   00000C   22           RET
    701          
    702          /*********************************************************************
    703           * @fn      calcChkB
    704           *
    705           * @brief   Calculates the data checksum over the 'buf' parameter.
    706           *
    707           * @param   pg - A valid NV Flash page.
    708           * @param   offset - A valid offset into the page.
    709           * @param   len - Byte count of the data to be checksummed.
    710           *
    711           * @return  Calculated checksum of the data bytes.
    712           */
    713          static uint16 calcChkB( uint16 len, uint8 *buf )
    714          {
    715            uint8 fill = len % OSAL_NV_WORD_SIZE;
    716            uint16 chk;
    717          
    718            if ( !buf )
    719            {
    720              chk = len * OSAL_NV_ERASED;
    721            }
    722            else
    723            {
    724              chk = 0;
    725              while ( len-- )
    726              {
    727                chk += *buf++;
    728              }
    729            }
    730          
    731            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    732            if ( fill )
    733            {
    734              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    735            }
    736          
    737            return chk;
    738          }
    739          
    740          /*********************************************************************
    741           * @fn      calcChkF
    742           *
    743           * @brief   Calculates the data checksum by reading the data bytes from NV.
    744           *
    745           * @param   pg - A valid NV Flash page.
    746           * @param   offset - A valid offset into the page.
    747           * @param   len - Byte count of the data to be checksummed.
    748           *
    749           * @return  Calculated checksum of the data bytes.
    750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
   \                     calcChkF:
    752          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V6,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    753            uint16 chk = 0;
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   75..00       MOV       ?V3,#0x0
    754          
    755            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   000018   EC           MOV       A,R4
   \   000019   2403         ADD       A,#0x3
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   E4           CLR       A
   \   00001E   3F           ADDC      A,R7
   \   00001F   F5..         MOV       ?V5,A
   \   000021   7402         MOV       A,#0x2
   \   000023   78..         MOV       R0,#?V4
   \   000025   12....       LCALL     ?US_SHR
   \   000028   AE..         MOV       R6,?V4
   \   00002A   AF..         MOV       R7,?V5
    756          
    757            while ( len-- )
   \                     ??calcChkF_0:
   \   00002C   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00002F   6048         JZ        ??calcChkF_1
    758            {
    759              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    760          
    761              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000031                ; Setup parameters for call to function HalFlashRead
   \   000031   75..04       MOV       ?V4,#0x4
   \   000034   75..00       MOV       ?V5,#0x0
   \   000037   78..         MOV       R0,#?V4
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP102_8
   \   000041   AA..         MOV       R2,?V0
   \   000043   AB..         MOV       R3,?V1
   \   000045   A9..         MOV       R1,?V6
   \   000047   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
    762              offset += OSAL_NV_WORD_SIZE;
   \   00004D   12....       LCALL     ?Subroutine40 & 0xFFFF
    763          
    764              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \                     ??CrossCallReturnLabel_93:
   \   000050   7800         MOV       R0,#0x0
    765              {
    766                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   000052   E8           MOV       A,R0
   \   000053   FA           MOV       R2,A
   \   000054   85..82       MOV       DPL,?XSP + 0
   \   000057   85..83       MOV       DPH,?XSP + 1
   \   00005A   E582         MOV       A,DPL
   \   00005C   2A           ADD       A,R2
   \   00005D   F582         MOV       DPL,A
   \   00005F   E4           CLR       A
   \   000060   3583         ADDC      A,DPH
   \   000062   F583         MOV       DPH,A
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FA           MOV       R2,A
   \   000066   E5..         MOV       A,?V2
   \   000068   2A           ADD       A,R2
   \   000069   F5..         MOV       ?V2,A
   \   00006B   E4           CLR       A
   \   00006C   35..         ADDC      A,?V3
   \   00006E   F5..         MOV       ?V3,A
    767              }
   \   000070   08           INC       R0
   \   000071   E8           MOV       A,R0
   \   000072   C3           CLR       C
   \   000073   9404         SUBB      A,#0x4
   \   000075   50B5         JNC       ??calcChkF_0
   \   000077   80D9         SJMP      ??calcChkF_2
    768            }
    769          
    770            return chk;
   \                     ??calcChkF_1:
   \   000079   AA..         MOV       R2,?V2
   \   00007B   AB..         MOV       R3,?V3
   \   00007D   7404         MOV       A,#0x4
   \   00007F                REQUIRE ?Subroutine4
   \   00007F                ; // Fall through to label ?Subroutine4
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1E           DEC       R6
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FF           MOV       R7,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E5..         MOV       A,?V0
   \   000002   2404         ADD       A,#0x4
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F5..         MOV       ?V1,A
   \   00000B   22           RET
    772          
    773          /*********************************************************************
    774           * @fn      writeWord
    775           *
    776           * @brief   Writes a Flash-WORD to NV.
    777           *
    778           * @param   pg - A valid NV Flash page.
    779           * @param   offset - A valid offset into the page.
    780           * @param   buf - Pointer to source buffer.
    781           *
    782           * @return  none
    783           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    784          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    785          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    786            offset = (offset >> 2) + ((uint16)pg << 9);
    787          
    788            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000F                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000F   7904         MOV       R1,#0x4
   \   000011   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000014   E9           MOV       A,R1
   \   000015   6030         JZ        ??writeWord_0
    789            {
    790              HalFlashWrite(offset, buf, 1);
   \   000017                ; Setup parameters for call to function HalFlashWrite
   \   000017   75..01       MOV       ?V4,#0x1
   \   00001A   75..00       MOV       ?V5,#0x0
   \   00001D   78..         MOV       R0,#?V4
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   EE           MOV       A,R6
   \   000023   FC           MOV       R4,A
   \   000024   EF           MOV       A,R7
   \   000025   FD           MOV       R5,A
   \   000026   7402         MOV       A,#0x2
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?US_SHR
   \   00002D   E5..         MOV       A,?V2
   \   00002F   F5..         MOV       ?V4,A
   \   000031   7409         MOV       A,#0x9
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?S_SHL
   \   000038   E5..         MOV       A,?V0
   \   00003A   2400         ADD       A,#0x0
   \   00003C   FA           MOV       R2,A
   \   00003D   E5..         MOV       A,?V1
   \   00003F   12....       LCALL     ?Subroutine34 & 0xFFFF
    791            }
   \                     ??CrossCallReturnLabel_63:
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   8006         SJMP      ??writeWord_1
    792            else
    793            {
    794              failF = TRUE;
   \                     ??writeWord_0:
   \   000047   90....       MOV       DPTR,#failF
   \   00004A   7401         MOV       A,#0x1
   \   00004C   F0           MOVX      @DPTR,A
    795            }
    796          }
   \                     ??writeWord_1:
   \   00004D   02....       LJMP      ??Subroutine43_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   35..         ADDC      A,?V5
   \   000002   FB           MOV       R3,A
   \   000003   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000006   7402         MOV       A,#0x2
   \   000008   22           RET
    797          
    798          /*********************************************************************
    799           * @fn      writeWordM
    800           *
    801           * @brief   Writes multiple Flash-WORDs to NV.
    802           *
    803           * @param   pg - A valid NV Flash page.
    804           * @param   offset - A valid offset into the page.
    805           * @param   buf - Pointer to source buffer.
    806           * @param   cnt - Number of 4-byte blocks to write.
    807           *
    808           * @return  none
    809           */
    810          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    811          {
    812            offset = (offset >> 2) + ((uint16)pg << 9);
    813          
    814            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
    815            {
    816              HalFlashWrite(offset, buf, cnt);
    817            }
    818            else
    819            {
    820              failF = TRUE;
    821            }
    822          }
    823          
    824          /*********************************************************************
    825           * @fn      writeWordH
    826           *
    827           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    828           *
    829           * @param   pg - A valid NV Flash page.
    830           * @param   offset - A valid offset into the page.
    831           * @param   buf - Pointer to source buffer.
    832           *
    833           * @return  none
    834           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    835          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    836          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    837            uint8 tmp[4];
    838          
    839            tmp[0] = buf[0];
   \   00000A   8C82         MOV       DPL,R4
   \   00000C   8D83         MOV       DPH,R5
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   F0           MOVX      @DPTR,A
    840            tmp[1] = buf[1];
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
    841            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    842            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
    843          
    844            writeWord( pg, offset, tmp );
   \   000036                ; Setup parameters for call to function writeWord
   \   000036   AC..         MOV       R4,?XSP + 0
   \   000038   AD..         MOV       R5,?XSP + 1
   \   00003A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    845          }
   \   00003D   7404         MOV       A,#0x4
   \   00003F   02....       LJMP      ?Subroutine1 & 0xFFFF
    846          
    847          /*********************************************************************
    848           * @fn      writeBuf
    849           *
    850           * @brief   Writes a data buffer to NV.
    851           *
    852           * @param   dstPg - A valid NV Flash page.
    853           * @param   offset - A valid offset into the page.
    854           * @param   len  - Byte count of the data to write.
    855           * @param   buf  - The data to write.
    856           *
    857           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    858           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    859          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    860          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V7,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
    861            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV       A,R2
   \   000015   5403         ANL       A,#0x3
   \   000017   F5..         MOV       ?V6,A
    862            uint8 tmp[OSAL_NV_WORD_SIZE];
    863          
    864            if ( rem )
   \   000019   605F         JZ        ??CrossCallReturnLabel_92
    865            {
    866              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00001B   74FC         MOV       A,#-0x4
   \   00001D   5A           ANL       A,R2
   \   00001E   F5..         MOV       ?V0,A
    867              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000020                ; Setup parameters for call to function HalFlashRead
   \   000020   75..04       MOV       ?V2,#0x4
   \   000023   75..00       MOV       ?V3,#0x0
   \   000026   78..         MOV       R0,#?V2
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   AA..         MOV       R2,?V0
   \   000032   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeBuf_0:
   \   000038   EE           MOV       A,R6
   \   000039   4F           ORL       A,R7
   \   00003A   6031         JZ        ??writeBuf_1
    868          
    869              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    870              {
    871                tmp[rem++] = *buf++;
   \   00003C   7414         MOV       A,#0x14
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000044   C0E0         PUSH      A
   \   000046   A8..         MOV       R0,?V6
   \   000048   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00004B   D0E0         POP       A
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   7414         MOV       A,#0x14
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00005C   05..         INC       ?V6
    872                len--;
   \   00005E   EE           MOV       A,R6
   \   00005F   24FF         ADD       A,#-0x1
   \   000061   1E           DEC       R6
   \   000062   EF           MOV       A,R7
   \   000063   34FF         ADDC      A,#-0x1
   \   000065   FF           MOV       R7,A
    873              }
   \   000066   E5..         MOV       A,?V6
   \   000068   C3           CLR       C
   \   000069   9404         SUBB      A,#0x4
   \   00006B   40CB         JC        ??writeBuf_0
    874          
    875              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_1:
   \   00006D                ; Setup parameters for call to function writeWord
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   AA..         MOV       R2,?V0
   \   000073   AB..         MOV       R3,?V1
   \   000075   A9..         MOV       R1,?V7
   \   000077   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    876              dstOff += OSAL_NV_WORD_SIZE;
    877            }
    878          
    879            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_92:
   \   00007A   EE           MOV       A,R6
   \   00007B   5403         ANL       A,#0x3
   \   00007D   F5..         MOV       ?V6,A
    880            len /= OSAL_NV_WORD_SIZE;
   \   00007F   8E..         MOV       ?V2,R6
   \   000081   8F..         MOV       ?V3,R7
   \   000083   7402         MOV       A,#0x2
   \   000085   78..         MOV       R0,#?V2
   \   000087   12....       LCALL     ?US_SHR
   \   00008A   AE..         MOV       R6,?V2
   \   00008C   AF..         MOV       R7,?V3
    881          
    882            if ( len )
   \   00008E   EE           MOV       A,R6
   \   00008F   4F           ORL       A,R7
   \   000090   6072         JZ        ??CrossCallReturnLabel_3
    883            {
    884              writeWordM( dstPg, dstOff, buf, len );
   \   000092                ; Setup parameters for call to function HalAdcCheckVdd
   \   000092   7904         MOV       R1,#0x4
   \   000094   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000097   E9           MOV       A,R1
   \   000098   6037         JZ        ??writeBuf_2
   \   00009A                ; Setup parameters for call to function HalFlashWrite
   \   00009A   78..         MOV       R0,#?V2
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   7416         MOV       A,#0x16
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000A7   85....       MOV       ?V2,?V0
   \   0000AA   85....       MOV       ?V3,?V1
   \   0000AD   7402         MOV       A,#0x2
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?US_SHR
   \   0000B4   E5..         MOV       A,?V7
   \   0000B6   F5..         MOV       ?V4,A
   \   0000B8   75..00       MOV       ?V5,#0x0
   \   0000BB   7409         MOV       A,#0x9
   \   0000BD   78..         MOV       R0,#?V4
   \   0000BF   12....       LCALL     ?S_SHL
   \   0000C2   E5..         MOV       A,?V2
   \   0000C4   2400         ADD       A,#0x0
   \   0000C6   FA           MOV       R2,A
   \   0000C7   E5..         MOV       A,?V3
   \   0000C9   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CF   8006         SJMP      ??writeBuf_3
   \                     ??writeBuf_2:
   \   0000D1   90....       MOV       DPTR,#failF
   \   0000D4   7401         MOV       A,#0x1
   \   0000D6   F0           MOVX      @DPTR,A
    885              dstOff += OSAL_NV_WORD_SIZE * len;
   \                     ??writeBuf_3:
   \   0000D7   8E..         MOV       ?V2,R6
   \   0000D9   8F..         MOV       ?V3,R7
   \   0000DB   7402         MOV       A,#0x2
   \   0000DD   78..         MOV       R0,#?V2
   \   0000DF   12....       LCALL     ?S_SHL
   \   0000E2   A8..         MOV       R0,?V2
   \   0000E4   A9..         MOV       R1,?V3
   \   0000E6   E5..         MOV       A,?V0
   \   0000E8   28           ADD       A,R0
   \   0000E9   F5..         MOV       ?V0,A
   \   0000EB   E5..         MOV       A,?V1
   \   0000ED   39           ADDC      A,R1
   \   0000EE   F5..         MOV       ?V1,A
    886              buf += OSAL_NV_WORD_SIZE * len;
   \   0000F0   7414         MOV       A,#0x14
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   28           ADD       A,R0
   \   0000F7   F8           MOV       R0,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   39           ADDC      A,R1
   \   0000FB   F9           MOV       R1,A
   \   0000FC   7414         MOV       A,#0x14
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ?Subroutine8 & 0xFFFF
    887            }
    888          
    889            if ( rem )
   \                     ??CrossCallReturnLabel_3:
   \   000104   E5..         MOV       A,?V6
   \   000106   6057         JZ        ??writeBuf_4
    890            {
    891              uint8 idx = 0;
   \   000108   7E00         MOV       R6,#0x0
    892              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00010A                ; Setup parameters for call to function HalFlashRead
   \   00010A   75..04       MOV       ?V2,#0x4
   \   00010D   8E..         MOV       ?V3,R6
   \   00010F   78..         MOV       R0,#?V2
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000114   7402         MOV       A,#0x2
   \   000116   12....       LCALL     ?XSTACK_DISP102_8
   \   000119   AA..         MOV       R2,?V0
   \   00011B   AB..         MOV       R3,?V1
   \   00011D   A9..         MOV       R1,?V7
   \   00011F   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   \   000125   8021         SJMP      ??writeBuf_5
    893              while ( rem-- )
    894              {
    895                tmp[idx++] = *buf++;
   \                     ??writeBuf_6:
   \   000127   7414         MOV       A,#0x14
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   12....       LCALL     ?Subroutine14 & 0xFFFF
    896              }
   \                     ??CrossCallReturnLabel_18:
   \   00012F   C0E0         PUSH      A
   \   000131   EE           MOV       A,R6
   \   000132   F8           MOV       R0,A
   \   000133   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000136   D0E0         POP       A
   \   000138   F0           MOVX      @DPTR,A
   \   000139   7414         MOV       A,#0x14
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000147   0E           INC       R6
   \                     ??writeBuf_5:
   \   000148   AF..         MOV       R7,?V6
   \   00014A   74FF         MOV       A,#-0x1
   \   00014C   2F           ADD       A,R7
   \   00014D   F5..         MOV       ?V6,A
   \   00014F   04           INC       A
   \   000150   70D5         JNZ       ??writeBuf_6
    897              writeWord( dstPg, dstOff, tmp );
   \   000152                ; Setup parameters for call to function writeWord
   \   000152   AC..         MOV       R4,?XSP + 0
   \   000154   AD..         MOV       R5,?XSP + 1
   \   000156   AA..         MOV       R2,?V0
   \   000158   AB..         MOV       R3,?V1
   \   00015A   A9..         MOV       R1,?V7
   \   00015C   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    898            }
    899          }
   \                     ??writeBuf_4:
   \   00015F   7404         MOV       A,#0x4
   \   000161   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E582         MOV       A,DPL
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3583         ADDC      A,DPH
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   7414         MOV       A,#0x14
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   000003   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    900          
    901          /*********************************************************************
    902           * @fn      xferBuf
    903           *
    904           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
    905           *
    906           * @return  none
    907           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    908          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
    909          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V6,R2
   \   000014   8B..         MOV       ?V7,R3
   \   000016   8C..         MOV       ?V3,R4
   \   000018   7415         MOV       A,#0x15
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V1,A
    910            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000024   E5..         MOV       A,?V0
   \   000026   5403         ANL       A,#0x3
   \   000028   F5..         MOV       ?V2,A
   \   00002A   7417         MOV       A,#0x17
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FE           MOV       R6,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FF           MOV       R7,A
    911            uint8 tmp[OSAL_NV_WORD_SIZE];
    912          
    913            if ( rem )
   \   000034   E5..         MOV       A,?V2
   \   000036   6069         JZ        ??CrossCallReturnLabel_90
    914            {
    915              dstOff -= rem;
   \   000038   F8           MOV       R0,A
   \   000039   C3           CLR       C
   \   00003A   E5..         MOV       A,?V0
   \   00003C   98           SUBB      A,R0
   \   00003D   F5..         MOV       ?V0,A
   \   00003F   E5..         MOV       A,?V1
   \   000041   9400         SUBB      A,#0x0
   \   000043   F5..         MOV       ?V1,A
    916              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000045                ; Setup parameters for call to function HalFlashRead
   \   000045   75..04       MOV       ?V4,#0x4
   \   000048   75..00       MOV       ?V5,#0x0
   \   00004B   78..         MOV       R0,#?V4
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7403         MOV       A,#0x3
   \   000052   12....       LCALL     ?XSTACK_DISP102_8
   \   000055   AA..         MOV       R2,?V0
   \   000057   AB..         MOV       R3,?V1
   \   000059   A9..         MOV       R1,?V3
   \   00005B   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   000061   EE           MOV       A,R6
   \   000062   4F           ORL       A,R7
   \   000063   6034         JZ        ??xferBuf_1
    917          
    918              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    919              {
    920                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   000065                ; Setup parameters for call to function HalFlashRead
   \   000065   75..01       MOV       ?V4,#0x1
   \   000068   78..         MOV       R0,#?V4
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   A8..         MOV       R0,?V2
   \   00006F   7403         MOV       A,#0x3
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
    921                srcOff++;
   \   000080   05..         INC       ?V6
   \   000082   E5..         MOV       A,?V6
   \   000084   7002         JNZ       ??xferBuf_2
   \   000086   05..         INC       ?V7
    922                rem++;
   \                     ??xferBuf_2:
   \   000088   05..         INC       ?V2
    923                len--;
   \   00008A   EE           MOV       A,R6
   \   00008B   24FF         ADD       A,#-0x1
   \   00008D   1E           DEC       R6
   \   00008E   EF           MOV       A,R7
   \   00008F   34FF         ADDC      A,#-0x1
   \   000091   FF           MOV       R7,A
    924              }
   \   000092   E5..         MOV       A,?V2
   \   000094   C3           CLR       C
   \   000095   9404         SUBB      A,#0x4
   \   000097   40C8         JC        ??xferBuf_0
    925          
    926              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   000099                ; Setup parameters for call to function writeWord
   \   000099   7401         MOV       A,#0x1
   \   00009B   12....       LCALL     ?XSTACK_DISP102_8
   \   00009E   12....       LCALL     ?Subroutine25 & 0xFFFF
    927              dstOff += OSAL_NV_WORD_SIZE;
    928            }
    929          
    930            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_90:
   \   0000A1   EE           MOV       A,R6
   \   0000A2   5403         ANL       A,#0x3
   \   0000A4   F5..         MOV       ?V2,A
    931            len /= OSAL_NV_WORD_SIZE;
   \   0000A6   8E..         MOV       ?V4,R6
   \   0000A8   8F..         MOV       ?V5,R7
   \   0000AA   7402         MOV       A,#0x2
   \   0000AC   78..         MOV       R0,#?V4
   \   0000AE   12....       LCALL     ?US_SHR
   \   0000B1   AE..         MOV       R6,?V4
   \   0000B3   AF..         MOV       R7,?V5
   \   0000B5   8032         SJMP      ??CrossCallReturnLabel_91
    932          
    933            while ( len-- )
    934            {
    935              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_3:
   \   0000B7                ; Setup parameters for call to function HalFlashRead
   \   0000B7   75..04       MOV       ?V4,#0x4
   \   0000BA   75..00       MOV       ?V5,#0x0
   \   0000BD   78..         MOV       R0,#?V4
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C2   7403         MOV       A,#0x3
   \   0000C4   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C7   AA..         MOV       R2,?V6
   \   0000C9   AB..         MOV       R3,?V7
   \   0000CB   7402         MOV       A,#0x2
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
    936              srcOff += OSAL_NV_WORD_SIZE;
   \   0000D6   E5..         MOV       A,?V6
   \   0000D8   2404         ADD       A,#0x4
   \   0000DA   F5..         MOV       ?V6,A
   \   0000DC   E4           CLR       A
   \   0000DD   35..         ADDC      A,?V7
   \   0000DF   F5..         MOV       ?V7,A
    937              writeWord( dstPg, dstOff, tmp );
   \   0000E1                ; Setup parameters for call to function writeWord
   \   0000E1   7401         MOV       A,#0x1
   \   0000E3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E6   12....       LCALL     ?Subroutine25 & 0xFFFF
    938              dstOff += OSAL_NV_WORD_SIZE;
    939            }
   \                     ??CrossCallReturnLabel_91:
   \   0000E9   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000EC   70C9         JNZ       ??xferBuf_3
    940          
    941            if ( rem )
   \   0000EE   E5..         MOV       A,?V2
   \   0000F0   605B         JZ        ??xferBuf_4
    942            {
    943              uint8 idx = 0;
   \   0000F2   7E00         MOV       R6,#0x0
    944              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000F4                ; Setup parameters for call to function HalFlashRead
   \   0000F4   75..04       MOV       ?V4,#0x4
   \   0000F7   8E..         MOV       ?V5,R6
   \   0000F9   78..         MOV       R0,#?V4
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FE   7403         MOV       A,#0x3
   \   000100   12....       LCALL     ?XSTACK_DISP102_8
   \   000103   AA..         MOV       R2,?V0
   \   000105   AB..         MOV       R3,?V1
   \   000107   A9..         MOV       R1,?V3
   \   000109   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010F   8024         SJMP      ??xferBuf_5
    945              while ( rem-- )
    946              {
    947                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_6:
   \   000111                ; Setup parameters for call to function HalFlashRead
   \   000111   75..01       MOV       ?V4,#0x1
   \   000114   78..         MOV       R0,#?V4
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000119   EE           MOV       A,R6
   \   00011A   F8           MOV       R0,A
   \   00011B   7403         MOV       A,#0x3
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000129   12....       LCALL     ?DEALLOC_XSTACK8
    948                srcOff++;
   \   00012C   05..         INC       ?V6
   \   00012E   E5..         MOV       A,?V6
   \   000130   7002         JNZ       ??xferBuf_7
   \   000132   05..         INC       ?V7
    949                idx++;
   \                     ??xferBuf_7:
   \   000134   0E           INC       R6
    950              }
   \                     ??xferBuf_5:
   \   000135   AF..         MOV       R7,?V2
   \   000137   74FF         MOV       A,#-0x1
   \   000139   2F           ADD       A,R7
   \   00013A   F5..         MOV       ?V2,A
   \   00013C   04           INC       A
   \   00013D   70D2         JNZ       ??xferBuf_6
    951              writeWord( dstPg, dstOff, tmp );
   \   00013F                ; Setup parameters for call to function writeWord
   \   00013F   7401         MOV       A,#0x1
   \   000141   12....       LCALL     ?XSTACK_DISP102_8
   \   000144   AA..         MOV       R2,?V0
   \   000146   AB..         MOV       R3,?V1
   \   000148   A9..         MOV       R1,?V3
   \   00014A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    952            }
    953          }
   \                     ??xferBuf_4:
   \   00014D   7405         MOV       A,#0x5
   \   00014F   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FD           MOV       R5,A
   \   000008   AA..         MOV       R2,?V6
   \   00000A   AB..         MOV       R3,?V7
   \   00000C   7402         MOV       A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   A9..         MOV       R1,?V3
   \   000006                REQUIRE ??Subroutine46_0
   \   000006                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine51_0
   \   000001                ; // Fall through to label ??Subroutine51_0
    954          
    955          /*********************************************************************
    956           * @fn      writeItem
    957           *
    958           * @brief   Writes an item header/data combo to the specified NV page.
    959           *
    960           * @param   pg - Valid NV Flash page.
    961           * @param   id - Valid NV item Id.
    962           * @param   len  - Byte count of the data to write.
    963           * @param   buf  - The data to write. If NULL, no data/checksum write.
    964           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
    965           *
    966           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
    969          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00000D   E9           MOV       A,R1
   \   00000E   FE           MOV       R6,A
   \   00000F   8C..         MOV       ?V2,R4
   \   000011   8D..         MOV       ?V3,R5
    970            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000013   29           ADD       A,R1
   \   000014   F8           MOV       R0,A
   \   000015   E4           CLR       A
   \   000016   33           RLC       A
   \   000017   F9           MOV       R1,A
   \   000018   74..         MOV       A,#(pgOff + 14) & 0xff
   \   00001A   28           ADD       A,R0
   \   00001B   F8           MOV       R0,A
   \   00001C   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00001E   39           ADDC      A,R1
   \   00001F   F9           MOV       R1,A
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000030   F5..         MOV       ?V0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V1,A
    971            uint8 rtrn = FALSE;
   \   000036   75..00       MOV       ?V6,#0x0
    972            osalNvHdr_t hdr;
    973          
    974            if ( pg == pgRes )
   \   000039   90....       MOV       DPTR,#pgRes
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6E           XRL       A,R6
   \   00003E   7007         JNZ       ??writeItem_0
    975            {
    976              /* Mark reserve page as being active, in process of receiving items.
    977               * Invoking function must effect a page compaction.
    978               */
    979              setPageUse( pg, FALSE );
   \   000040                ; Setup parameters for call to function setPageUse
   \   000040   7A00         MOV       R2,#0x0
   \   000042   EE           MOV       A,R6
   \   000043   F9           MOV       R1,A
   \   000044   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
    980            }
    981          
    982            hdr.id = id;
   \                     ??writeItem_0:
   \   000047   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine8 & 0xFFFF
    983            hdr.len = len;
   \                     ??CrossCallReturnLabel_6:
   \   000052   7406         MOV       A,#0x6
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E5..         MOV       A,?V2
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   E5..         MOV       A,?V3
   \   00005D   F0           MOVX      @DPTR,A
    984          
    985            writeWord( pg, offset, (uint8 *)&hdr );
   \   00005E                ; Setup parameters for call to function writeWord
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP102_8
   \   000063   AA..         MOV       R2,?V0
   \   000065   AB..         MOV       R3,?V1
   \   000067   EE           MOV       A,R6
   \   000068   F9           MOV       R1,A
   \   000069   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    986            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00006C                ; Setup parameters for call to function HalFlashRead
   \   00006C   75..08       MOV       ?V4,#0x8
   \   00006F   75..00       MOV       ?V5,#0x0
   \   000072   78..         MOV       R0,#?V4
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000077   7406         MOV       A,#0x6
   \   000079   12....       LCALL     ?XSTACK_DISP102_8
   \   00007C   AA..         MOV       R2,?V0
   \   00007E   AB..         MOV       R3,?V1
   \   000080   EE           MOV       A,R6
   \   000081   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
    987          
    988            if ( (hdr.id == id) && (hdr.len == len) )
   \   000087   7404         MOV       A,#0x4
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00008F   85..82       MOV       DPL,?XSP + 0
   \   000092   85..83       MOV       DPH,?XSP + 1
   \   000095   E0           MOVX      A,@DPTR
   \   000096   68           XRL       A,R0
   \   000097   7003         JNZ       ??writeItem_1
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   69           XRL       A,R1
   \                     ??writeItem_1:
   \   00009C   6003         JZ        $+5
   \   00009E   02....       LJMP      ??writeItem_2 & 0xFFFF
   \   0000A1   7406         MOV       A,#0x6
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   65..         XRL       A,?V2
   \   0000A9   7004         JNZ       ??writeItem_3
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   65..         XRL       A,?V3
   \                     ??writeItem_3:
   \   0000AF   6003         JZ        $+5
   \   0000B1   02....       LJMP      ??writeItem_2 & 0xFFFF
    989            {
    990              if ( flag )
   \   0000B4   741D         MOV       A,#0x1d
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   7003         JNZ       $+5
   \   0000BC   02....       LJMP      ??writeItem_4 & 0xFFFF
   \   0000BF   741B         MOV       A,#0x1b
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F5..         MOV       ?V4,A
   \   0000C7   A3           INC       DPTR
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   F5..         MOV       ?V5,A
    991              {
    992                uint16 chk = calcChkB( len, buf );
   \   0000CB   85..82       MOV       DPL,?V4
   \   0000CE   F583         MOV       DPH,A
   \   0000D0   A8..         MOV       R0,?V2
   \   0000D2   A9..         MOV       R1,?V3
   \   0000D4   E8           MOV       A,R0
   \   0000D5   5403         ANL       A,#0x3
   \   0000D7   FF           MOV       R7,A
   \   0000D8   E582         MOV       A,DPL
   \   0000DA   4583         ORL       A,DPH
   \   0000DC   7015         JNZ       ??writeItem_5
   \   0000DE   E8           MOV       A,R0
   \   0000DF   75F0FF       MOV       B,#-0x1
   \   0000E2   A4           MUL       AB
   \   0000E3   F8           MOV       R0,A
   \   0000E4   AAF0         MOV       R2,B
   \   0000E6   75F0FF       MOV       B,#-0x1
   \   0000E9   E9           MOV       A,R1
   \   0000EA   A4           MUL       AB
   \   0000EB   2A           ADD       A,R2
   \   0000EC   F9           MOV       R1,A
   \   0000ED   E8           MOV       A,R0
   \   0000EE   FA           MOV       R2,A
   \   0000EF   E9           MOV       A,R1
   \   0000F0   FB           MOV       R3,A
   \   0000F1   801F         SJMP      ??writeItem_6
   \                     ??writeItem_5:
   \   0000F3   7A00         MOV       R2,#0x0
   \   0000F5   7B00         MOV       R3,#0x0
   \   0000F7   8009         SJMP      ??writeItem_7
   \                     ??writeItem_8:
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   FC           MOV       R4,A
   \   0000FB   EA           MOV       A,R2
   \   0000FC   2C           ADD       A,R4
   \   0000FD   FA           MOV       R2,A
   \   0000FE   E4           CLR       A
   \   0000FF   3B           ADDC      A,R3
   \   000100   FB           MOV       R3,A
   \   000101   A3           INC       DPTR
   \                     ??writeItem_7:
   \   000102   E8           MOV       A,R0
   \   000103   FC           MOV       R4,A
   \   000104   E9           MOV       A,R1
   \   000105   FD           MOV       R5,A
   \   000106   EC           MOV       A,R4
   \   000107   24FF         ADD       A,#-0x1
   \   000109   18           DEC       R0
   \   00010A   ED           MOV       A,R5
   \   00010B   34FF         ADDC      A,#-0x1
   \   00010D   F9           MOV       R1,A
   \   00010E   EC           MOV       A,R4
   \   00010F   4D           ORL       A,R5
   \   000110   70E7         JNZ       ??writeItem_8
   \                     ??writeItem_6:
   \   000112   EF           MOV       A,R7
   \   000113   601E         JZ        ??writeItem_9
   \   000115   F8           MOV       R0,A
   \   000116   7404         MOV       A,#0x4
   \   000118   C3           CLR       C
   \   000119   98           SUBB      A,R0
   \   00011A   F8           MOV       R0,A
   \   00011B   95E0         SUBB      A,0xE0 /* A   */
   \   00011D   F9           MOV       R1,A
   \   00011E   E8           MOV       A,R0
   \   00011F   75F0FF       MOV       B,#-0x1
   \   000122   A4           MUL       AB
   \   000123   F8           MOV       R0,A
   \   000124   ACF0         MOV       R4,B
   \   000126   75F0FF       MOV       B,#-0x1
   \   000129   E9           MOV       A,R1
   \   00012A   A4           MUL       AB
   \   00012B   2C           ADD       A,R4
   \   00012C   F9           MOV       R1,A
   \   00012D   EA           MOV       A,R2
   \   00012E   28           ADD       A,R0
   \   00012F   FA           MOV       R2,A
   \   000130   EB           MOV       A,R3
   \   000131   39           ADDC      A,R1
   \   000132   FB           MOV       R3,A
    993          
    994                offset += OSAL_NV_HDR_SIZE;
    995                if ( buf != NULL )
    996                {
    997                  writeBuf( pg, offset, len, buf );
    998                }
    999          
   1000                if ( chk == calcChkF( pg, offset, len ) )
   1001                {
   1002                  writeWordH(pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk);
   1003                  HalFlashRead(pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   1004          
   1005                  if ( chk == hdr.chk )
   1006                  {
   1007                    rtrn = pg;
   1008                  }
   1009                }
   1010              }
   1011              else
   1012              {
   1013                rtrn = pg;
   1014              }
   1015            }
   \                     ??writeItem_9:
   \   000133   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000136   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000139   E5..         MOV       A,?V4
   \   00013B   45..         ORL       A,?V5
   \   00013D   6017         JZ        ??writeItem_10
   \   00013F                ; Setup parameters for call to function writeBuf
   \   00013F   78..         MOV       R0,#?V4
   \   000141   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000144   AC..         MOV       R4,?V2
   \   000146   AD..         MOV       R5,?V3
   \   000148   AA..         MOV       R2,?V0
   \   00014A   AB..         MOV       R3,?V1
   \   00014C   EE           MOV       A,R6
   \   00014D   F9           MOV       R1,A
   \   00014E   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   000151   7402         MOV       A,#0x2
   \   000153   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeItem_10:
   \   000156                ; Setup parameters for call to function calcChkF
   \   000156   AC..         MOV       R4,?V2
   \   000158   AD..         MOV       R5,?V3
   \   00015A   AA..         MOV       R2,?V0
   \   00015C   AB..         MOV       R3,?V1
   \   00015E   EE           MOV       A,R6
   \   00015F   F9           MOV       R1,A
   \   000160   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000163   8A..         MOV       ?V2,R2
   \   000165   8B..         MOV       ?V3,R3
   \   000167   A8..         MOV       R0,?V2
   \   000169   A9..         MOV       R1,?V3
   \   00016B   85..82       MOV       DPL,?XSP + 0
   \   00016E   85..83       MOV       DPH,?XSP + 1
   \   000171   E0           MOVX      A,@DPTR
   \   000172   68           XRL       A,R0
   \   000173   7003         JNZ       ??writeItem_11
   \   000175   A3           INC       DPTR
   \   000176   E0           MOVX      A,@DPTR
   \   000177   69           XRL       A,R1
   \                     ??writeItem_11:
   \   000178   7047         JNZ       ??writeItem_2
   \   00017A                ; Setup parameters for call to function writeWordH
   \   00017A   AC..         MOV       R4,?XSP + 0
   \   00017C   AD..         MOV       R5,?XSP + 1
   \   00017E   E5..         MOV       A,?V0
   \   000180   24FC         ADD       A,#-0x4
   \   000182   FA           MOV       R2,A
   \   000183   E5..         MOV       A,?V1
   \   000185   34FF         ADDC      A,#-0x1
   \   000187   FB           MOV       R3,A
   \   000188   EE           MOV       A,R6
   \   000189   F9           MOV       R1,A
   \   00018A   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
   \   00018D                ; Setup parameters for call to function HalFlashRead
   \   00018D   75..08       MOV       ?V2,#0x8
   \   000190   75..00       MOV       ?V3,#0x0
   \   000193   78..         MOV       R0,#?V2
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000198   7406         MOV       A,#0x6
   \   00019A   12....       LCALL     ?XSTACK_DISP102_8
   \   00019D   E5..         MOV       A,?V0
   \   00019F   24F8         ADD       A,#-0x8
   \   0001A1   FA           MOV       R2,A
   \   0001A2   E5..         MOV       A,?V1
   \   0001A4   34FF         ADDC      A,#-0x1
   \   0001A6   FB           MOV       R3,A
   \   0001A7   EE           MOV       A,R6
   \   0001A8   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0001AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AE   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0001B1   7408         MOV       A,#0x8
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   68           XRL       A,R0
   \   0001B8   7003         JNZ       ??writeItem_12
   \   0001BA   A3           INC       DPTR
   \   0001BB   E0           MOVX      A,@DPTR
   \   0001BC   69           XRL       A,R1
   \                     ??writeItem_12:
   \   0001BD   7002         JNZ       ??writeItem_2
   \                     ??writeItem_4:
   \   0001BF   8E..         MOV       ?V6,R6
   1016          
   1017            len = OSAL_NV_ITEM_SIZE( hdr.len );
   1018            pgOff[pg-OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_2:
   \   0001C1   7406         MOV       A,#0x6
   \   0001C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C6   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001C9   F8           MOV       R0,A
   \   0001CA   5001         JNC       ??writeItem_13
   \   0001CC   09           INC       R1
   \                     ??writeItem_13:
   \   0001CD   7402         MOV       A,#0x2
   \   0001CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   FA           MOV       R2,A
   \   0001D4   A3           INC       DPTR
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   F583         MOV       DPH,A
   \   0001D8   8A82         MOV       DPL,R2
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   28           ADD       A,R0
   \   0001DC   F0           MOVX      @DPTR,A
   \   0001DD   A3           INC       DPTR
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   39           ADDC      A,R1
   \   0001E0   F0           MOVX      @DPTR,A
   1019          
   1020            return rtrn;
   \   0001E1   A9..         MOV       R1,?V6
   \   0001E3   740C         MOV       A,#0xc
   \   0001E5   02....       LJMP      ?Subroutine4 & 0xFFFF
   1021          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0
   1022          
   1023          /*********************************************************************
   1024           * @fn      osal_nv_init
   1025           *
   1026           * @brief   Initialize NV service.
   1027           *
   1028           * @param   p - Not used.
   1029           *
   1030           * @return  none
   1031           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1032          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1033          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1034            (void)p;  // Suppress Lint warning.
   1035            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   1036          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
   1037          
   1038          /*********************************************************************
   1039           * @fn      osal_nv_item_init
   1040           *
   1041           * @brief   If the NV item does not already exist, it is created and
   1042           *          initialized with the data passed to the function, if any.
   1043           *          This function must be called before calling osal_nv_read() or
   1044           *          osal_nv_write().
   1045           *
   1046           * @param   id  - Valid NV item Id.
   1047           * @param   len - Item length.
   1048           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1049           *
   1050           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1051           *          ZSUCCESS       - Id already existed, no action taken.
   1052           *          NV_OPER_FAILED - Failure to find or create Id.
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1056            /* Global fail flag for fail due to low bus voltage has less impact on code
   1057             * size than passing back a return value all the way from the lowest level.
   1058             */
   1059            failF = FALSE;
   \   00000D   90....       MOV       DPTR,#failF
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   1060          
   1061            if ( (findItem( id ) != OSAL_NV_ITEM_NULL) )
   \   000012                ; Setup parameters for call to function findItem
   \   000012   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6004         JZ        ??osal_nv_item_init_0
   1062            {
   1063              return ZSUCCESS;
   \   000019   7900         MOV       R1,#0x0
   \   00001B   802E         SJMP      ??osal_nv_item_init_1
   1064            }
   1065            else if ( initItem( TRUE, id, len, buf ) )
   \                     ??osal_nv_item_init_0:
   \   00001D                ; Setup parameters for call to function initItem
   \   00001D   740C         MOV       A,#0xc
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000025   AC..         MOV       R4,?V0
   \   000027   AD..         MOV       R5,?V1
   \   000029   EE           MOV       A,R6
   \   00002A   FA           MOV       R2,A
   \   00002B   EF           MOV       A,R7
   \   00002C   FB           MOV       R3,A
   \   00002D   7901         MOV       R1,#0x1
   \   00002F   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
   \   000037   E9           MOV       A,R1
   \   000038   600F         JZ        ??osal_nv_item_init_2
   1066            {
   1067              if ( failF )
   \   00003A   90....       MOV       DPTR,#failF
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   6005         JZ        ??osal_nv_item_init_3
   1068              {
   1069                (void)initNV();  // See comment at the declaration of failF.
   \   000040                ; Setup parameters for call to function initNV
   \   000040   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   1070                return NV_OPER_FAILED;
   \   000043   8004         SJMP      ??osal_nv_item_init_2
   1071              }
   1072              else
   1073              {
   1074                return NV_ITEM_UNINIT;
   \                     ??osal_nv_item_init_3:
   \   000045   7909         MOV       R1,#0x9
   \   000047   8002         SJMP      ??osal_nv_item_init_1
   1075              }
   1076            }
   1077            else
   1078            {
   1079              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_2:
   \   000049   790A         MOV       R1,#0xa
   1080            }
   \                     ??osal_nv_item_init_1:
   \   00004B   02....       LJMP      ?Subroutine0 & 0xFFFF
   1081          }
   1082          
   1083          /*********************************************************************
   1084           * @fn      osal_nv_item_len
   1085           *
   1086           * @brief   Get the data length of the item stored in NV memory.
   1087           *
   1088           * @param   id  - Valid NV item Id.
   1089           *
   1090           * @return  Item length, if found; zero otherwise.
   1091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1092          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1093          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1094            uint16 offset = findItem( id );
   \   00000A                ; Setup parameters for call to function findItem
   \   00000A   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   1095          
   1096            if ( offset == OSAL_NV_ITEM_NULL )
   \   00000D   EA           MOV       A,R2
   \   00000E   4B           ORL       A,R3
   \   00000F   7006         JNZ       ??osal_nv_item_len_0
   1097            {
   1098              return 0;
   \   000011   7A00         MOV       R2,#0x0
   \   000013   7B00         MOV       R3,#0x0
   \   000015   8023         SJMP      ??CrossCallReturnLabel_39
   1099            }
   1100            else
   1101            {
   1102              osalNvHdr_t hdr;
   1103              HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_item_len_0:
   \   000017                ; Setup parameters for call to function HalFlashRead
   \   000017   75..08       MOV       ?V0,#0x8
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP102_8
   \   000027   EA           MOV       A,R2
   \   000028   24F8         ADD       A,#-0x8
   \   00002A   FA           MOV       R2,A
   \   00002B   EB           MOV       A,R3
   \   00002C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   1104              return hdr.len;
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ?Subroutine22 & 0xFFFF
   1105            }
   \                     ??CrossCallReturnLabel_39:
   \   00003A   7408         MOV       A,#0x8
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F                REQUIRE ?Subroutine5
   \   00003F                ; // Fall through to label ?Subroutine5
   1106          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   34FF         ADDC      A,#-0x1
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   FB           MOV       R3,A
   \   000001   90....       MOV       DPTR,#findPg
   \   000004                REQUIRE ??Subroutine50_0
   \   000004                ; // Fall through to label ??Subroutine50_0
   1107          
   1108          /*********************************************************************
   1109           * @fn      osal_nv_write
   1110           *
   1111           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1112           *          an element of an item by indexing into the item with an offset.
   1113           *
   1114           * @param   id  - Valid NV item Id.
   1115           * @param   ndx - Index offset into item
   1116           * @param   len - Length of data to write.
   1117           * @param  *buf - Data to write.
   1118           *
   1119           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1120           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1122          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1123          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7406         MOV       A,#0x6
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000012   8C..         MOV       ?V4,R4
   \   000014   8D..         MOV       ?V5,R5
   1124            uint8 rtrn = ZSUCCESS;
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   1125          
   1126            /* Global fail flag for fail due to low bus voltage has less impact on code
   1127             * size than passing back a return value all the way from the lowest level.
   1128             */
   1129            failF = FALSE;
   \   00001D   90....       MOV       DPTR,#failF
   \   000020   F0           MOVX      @DPTR,A
   1130          
   1131            if ( len != 0 )
   \   000021   7420         MOV       A,#0x20
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??osal_nv_write_0 & 0xFFFF
   1132            {
   1133              osalNvHdr_t hdr;
   1134              uint16 origOff, srcOff;
   1135              uint16 cnt;
   1136              uint8 *ptr;
   1137          
   1138              origOff = srcOff = findItem( id );
   \   00002E                ; Setup parameters for call to function findItem
   \   00002E   7406         MOV       A,#0x6
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000036   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000039   7404         MOV       A,#0x4
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   1139              if ( srcOff == OSAL_NV_ITEM_NULL )
   \                     ??CrossCallReturnLabel_78:
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000049   7005         JNZ       ??osal_nv_write_1
   1140              {
   1141                return NV_ITEM_UNINIT;
   \   00004B   7909         MOV       R1,#0x9
   \   00004D   02....       LJMP      ??osal_nv_write_2 & 0xFFFF
   1142              }
   1143          
   1144              HalFlashRead(findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_1:
   \   000050                ; Setup parameters for call to function HalFlashRead
   \   000050   75..08       MOV       ?V0,#0x8
   \   000053   75..00       MOV       ?V1,#0x0
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   740A         MOV       A,#0xa
   \   00005D   12....       LCALL     ?XSTACK_DISP102_8
   \   000060   7406         MOV       A,#0x6
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   E0           MOVX      A,@DPTR
   \   000066   24F8         ADD       A,#-0x8
   \   000068   FA           MOV       R2,A
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   1145              if ( hdr.len < (ndx + len) )
   \   000071   740A         MOV       A,#0xa
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   C082         PUSH      DPL
   \   000078   C083         PUSH      DPH
   \   00007A   7420         MOV       A,#0x20
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   25..         ADD       A,?V4
   \   000082   F8           MOV       R0,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   35..         ADDC      A,?V5
   \   000087   F9           MOV       R1,A
   \   000088   D083         POP       DPH
   \   00008A   D082         POP       DPL
   \   00008C   C3           CLR       C
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   98           SUBB      A,R0
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   99           SUBB      A,R1
   \   000092   5005         JNC       ??osal_nv_write_3
   1146              {
   1147                return NV_OPER_FAILED;
   \   000094   790A         MOV       R1,#0xa
   \   000096   02....       LJMP      ??osal_nv_write_2 & 0xFFFF
   1148              }
   1149          
   1150              srcOff += ndx;
   \                     ??osal_nv_write_3:
   \   000099   7404         MOV       A,#0x4
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   25..         ADD       A,?V4
   \   0000A1   F5..         MOV       ?V0,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   35..         ADDC      A,?V5
   \   0000A7   F5..         MOV       ?V1,A
   \   0000A9   AE..         MOV       R6,?V0
   \   0000AB   FF           MOV       R7,A
   1151              ptr = buf;
   \   0000AC   7422         MOV       A,#0x22
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F5..         MOV       ?V6,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F5..         MOV       ?V7,A
   1152              cnt = len;
   \   0000B8   7420         MOV       A,#0x20
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL     ?Subroutine8 & 0xFFFF
   1153              while ( cnt )
   1154              {
   1155                uint8 tmp;
   1156                HalFlashRead(findPg, srcOff++, &tmp, 1);
   \                     ??CrossCallReturnLabel_7:
   \   0000C8                ; Setup parameters for call to function HalFlashRead
   \   0000C8   75..01       MOV       ?V2,#0x1
   \   0000CB   75..00       MOV       ?V3,#0x0
   \   0000CE   78..         MOV       R0,#?V2
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E1   0E           INC       R6
   \   0000E2   EE           MOV       A,R6
   \   0000E3   7001         JNZ       ??osal_nv_write_4
   \   0000E5   0F           INC       R7
   1157                if ( tmp != *ptr++ )
   \                     ??osal_nv_write_4:
   \   0000E6   A8..         MOV       R0,?V6
   \   0000E8   A9..         MOV       R1,?V7
   \   0000EA   8882         MOV       DPL,R0
   \   0000EC   8983         MOV       DPH,R1
   \   0000EE   A3           INC       DPTR
   \   0000EF   8582..       MOV       ?V6,DPL
   \   0000F2   8583..       MOV       ?V7,DPH
   \   0000F5   85..82       MOV       DPL,?XSP + 0
   \   0000F8   85..83       MOV       DPH,?XSP + 1
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   FA           MOV       R2,A
   \   0000FD   8882         MOV       DPL,R0
   \   0000FF   8983         MOV       DPH,R1
   \   000101   E0           MOVX      A,@DPTR
   \   000102   6A           XRL       A,R2
   \   000103   7019         JNZ       ??osal_nv_write_5
   1158                {
   1159                  break;
   1160                }
   1161                cnt--;
   1162              }
   \   000105   7402         MOV       A,#0x2
   \   000107   12....       LCALL     ?XSTACK_DISP0_8
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   24FF         ADD       A,#-0x1
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   F8           MOV       R0,A
   \   00010F   A3           INC       DPTR
   \   000110   E0           MOVX      A,@DPTR
   \   000111   34FF         ADDC      A,#-0x1
   \   000113   F0           MOVX      @DPTR,A
   \   000114   F9           MOV       R1,A
   \   000115   E8           MOV       A,R0
   \   000116   49           ORL       A,R1
   \   000117   7003         JNZ       $+5
   \   000119   02....       LJMP      ??osal_nv_write_6 & 0xFFFF
   \   00011C   80AA         SJMP      ??CrossCallReturnLabel_7
   1163          
   1164              if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
   1165              {
   1166                uint8 comPg, dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \                     ??osal_nv_write_5:
   \   00011E                ; Setup parameters for call to function initItem
   \   00011E   A8..         MOV       R0,?XSP + 0
   \   000120   A9..         MOV       R1,?XSP + 1
   \   000122   88..         MOV       ?V2,R0
   \   000124   89..         MOV       ?V3,R1
   \   000126   78..         MOV       R0,#?V2
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012B   740C         MOV       A,#0xc
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000133   7408         MOV       A,#0x8
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00013B   7900         MOV       R1,#0x0
   \   00013D   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   000140   7402         MOV       A,#0x2
   \   000142   12....       LCALL     ?DEALLOC_XSTACK8
   \   000145   E9           MOV       A,R1
   \   000146   F5..         MOV       ?V2,A
   1167          
   1168                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000148   7003         JNZ       $+5
   \   00014A   02....       LJMP      ??osal_nv_write_7 & 0xFFFF
   1169                {
   1170                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   00014D   740A         MOV       A,#0xa
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000155   F8           MOV       R0,A
   \   000156   7402         MOV       A,#0x2
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   12....       LCALL     ?Subroutine8 & 0xFFFF
   1171                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??CrossCallReturnLabel_8:
   \   00015E   A8..         MOV       R0,?V2
   \   000160   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000163   F8           MOV       R0,A
   \   000164   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000166   39           ADDC      A,R1
   \   000167   F9           MOV       R1,A
   \   000168   7406         MOV       A,#0x6
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000170   7406         MOV       A,#0x6
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000178   C082         PUSH      DPL
   \   00017A   C083         PUSH      DPH
   \   00017C   7402         MOV       A,#0x2
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000184   D083         POP       DPH
   \   000186   D082         POP       DPL
   \   000188   12....       LCALL     ?Subroutine24 & 0xFFFF
   1172                  uint8 srcPg = findPg;
   \                     ??CrossCallReturnLabel_45:
   \   00018B   90....       MOV       DPTR,#findPg
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   F5..         MOV       ?V3,A
   1173                  srcOff = origOff;
   1174          
   1175                  setItem( srcPg, srcOff, eNvXfer );
   \   000191                ; Setup parameters for call to function setItem
   \   000191   7C00         MOV       R4,#0x0
   \   000193   7404         MOV       A,#0x4
   \   000195   12....       LCALL     ?XSTACK_DISP0_8
   \   000198   12....       LCALL     ?Subroutine19 & 0xFFFF
   1176          
   1177                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??CrossCallReturnLabel_31:
   \   00019B                ; Setup parameters for call to function xferBuf
   \   00019B   78..         MOV       R0,#?V4
   \   00019D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A0   8E..         MOV       ?V6,R6
   \   0001A2   8F..         MOV       ?V7,R7
   \   0001A4   78..         MOV       R0,#?V6
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A9   AC..         MOV       R4,?V2
   \   0001AB   7408         MOV       A,#0x8
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0001B3   A9..         MOV       R1,?V3
   \   0001B5   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   0001B8   7404         MOV       A,#0x4
   \   0001BA   12....       LCALL     ?DEALLOC_XSTACK8
   1178                  srcOff += ndx;
   1179                  dstOff += ndx;
   \   0001BD   EE           MOV       A,R6
   \   0001BE   25..         ADD       A,?V4
   \   0001C0   FE           MOV       R6,A
   \   0001C1   EF           MOV       A,R7
   \   0001C2   35..         ADDC      A,?V5
   \   0001C4   FF           MOV       R7,A
   1180          
   1181                  writeBuf( dstPg, dstOff, len, buf );
   \   0001C5                ; Setup parameters for call to function writeBuf
   \   0001C5   7422         MOV       A,#0x22
   \   0001C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CA   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001CD   7422         MOV       A,#0x22
   \   0001CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D2   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001D5   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   0001D8   7402         MOV       A,#0x2
   \   0001DA   12....       LCALL     ?DEALLOC_XSTACK8
   1182                  srcOff += len;
   1183                  dstOff += len;
   1184          
   1185                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0001DD                ; Setup parameters for call to function xferBuf
   \   0001DD   740A         MOV       A,#0xa
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   E0           MOVX      A,@DPTR
   \   0001E3   C3           CLR       C
   \   0001E4   95..         SUBB      A,?V4
   \   0001E6   FA           MOV       R2,A
   \   0001E7   A3           INC       DPTR
   \   0001E8   E0           MOVX      A,@DPTR
   \   0001E9   95..         SUBB      A,?V5
   \   0001EB   FB           MOV       R3,A
   \   0001EC   7420         MOV       A,#0x20
   \   0001EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F1   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0001F4   EA           MOV       A,R2
   \   0001F5   C3           CLR       C
   \   0001F6   98           SUBB      A,R0
   \   0001F7   F5..         MOV       ?V4,A
   \   0001F9   EB           MOV       A,R3
   \   0001FA   99           SUBB      A,R1
   \   0001FB   F5..         MOV       ?V5,A
   \   0001FD   78..         MOV       R0,#?V4
   \   0001FF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000202   7422         MOV       A,#0x22
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   E0           MOVX      A,@DPTR
   \   000208   2E           ADD       A,R6
   \   000209   F5..         MOV       ?V4,A
   \   00020B   A3           INC       DPTR
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   3F           ADDC      A,R7
   \   00020E   F5..         MOV       ?V5,A
   \   000210   78..         MOV       R0,#?V4
   \   000212   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000215   AC..         MOV       R4,?V2
   \   000217   7424         MOV       A,#0x24
   \   000219   12....       LCALL     ?XSTACK_DISP0_8
   \   00021C   E0           MOVX      A,@DPTR
   \   00021D   25..         ADD       A,?V0
   \   00021F   FA           MOV       R2,A
   \   000220   A3           INC       DPTR
   \   000221   E0           MOVX      A,@DPTR
   \   000222   35..         ADDC      A,?V1
   \   000224   FB           MOV       R3,A
   \   000225   A9..         MOV       R1,?V3
   \   000227   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   00022A   7404         MOV       A,#0x4
   \   00022C   12....       LCALL     ?DEALLOC_XSTACK8
   1186          
   1187                  // Calculate and write the new checksum.
   1188                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   00022F   7406         MOV       A,#0x6
   \   000231   12....       LCALL     ?XSTACK_DISP0_8
   \   000234   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000237   C082         PUSH      DPL
   \   000239   C083         PUSH      DPH
   \   00023B   7402         MOV       A,#0x2
   \   00023D   12....       LCALL     ?XSTACK_DISP0_8
   \   000240   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000243   D083         POP       DPH
   \   000245   D082         POP       DPL
   \   000247   12....       LCALL     ?Subroutine24 & 0xFFFF
   1189                  tmp = calcChkF( dstPg, dstOff, hdr.len );
   \                     ??CrossCallReturnLabel_46:
   \   00024A                ; Setup parameters for call to function calcChkF
   \   00024A   740A         MOV       A,#0xa
   \   00024C   12....       LCALL     ?XSTACK_DISP0_8
   \   00024F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000252   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000255   7402         MOV       A,#0x2
   \   000257   12....       LCALL     ?XSTACK_DISP0_8
   \   00025A   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   1190                  dstOff -= OSAL_NV_HDR_SIZE;
   \                     ??CrossCallReturnLabel_79:
   \   00025D   EE           MOV       A,R6
   \   00025E   24F8         ADD       A,#-0x8
   \   000260   FE           MOV       R6,A
   \   000261   EF           MOV       A,R7
   \   000262   34FF         ADDC      A,#-0x1
   \   000264   FF           MOV       R7,A
   1191                  writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
   \   000265                ; Setup parameters for call to function writeWordH
   \   000265   7402         MOV       A,#0x2
   \   000267   12....       LCALL     ?XSTACK_DISP102_8
   \   00026A   EE           MOV       A,R6
   \   00026B   2404         ADD       A,#0x4
   \   00026D   FA           MOV       R2,A
   \   00026E   E4           CLR       A
   \   00026F   3F           ADDC      A,R7
   \   000270   FB           MOV       R3,A
   \   000271   A9..         MOV       R1,?V2
   \   000273   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
   1192                  HalFlashRead(dstPg, dstOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000276                ; Setup parameters for call to function HalFlashRead
   \   000276   75..08       MOV       ?V0,#0x8
   \   000279   75..00       MOV       ?V1,#0x0
   \   00027C   78..         MOV       R0,#?V0
   \   00027E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000281   740A         MOV       A,#0xa
   \   000283   12....       LCALL     ?XSTACK_DISP102_8
   \   000286   EE           MOV       A,R6
   \   000287   FA           MOV       R2,A
   \   000288   EF           MOV       A,R7
   \   000289   FB           MOV       R3,A
   \   00028A   A9..         MOV       R1,?V2
   \   00028C   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00028F   12....       LCALL     ?DEALLOC_XSTACK8
   1193          
   1194                  if ( tmp == hdr.chk )
   \   000292   7402         MOV       A,#0x2
   \   000294   12....       LCALL     ?XSTACK_DISP0_8
   \   000297   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00029A   740C         MOV       A,#0xc
   \   00029C   12....       LCALL     ?XSTACK_DISP0_8
   \   00029F   E0           MOVX      A,@DPTR
   \   0002A0   68           XRL       A,R0
   \   0002A1   7003         JNZ       ??osal_nv_write_8
   \   0002A3   A3           INC       DPTR
   \   0002A4   E0           MOVX      A,@DPTR
   \   0002A5   69           XRL       A,R1
   \                     ??osal_nv_write_8:
   \   0002A6   700C         JNZ       ??osal_nv_write_9
   1195                  {
   1196                    setItem( srcPg, origOff, eNvZero );
   \   0002A8                ; Setup parameters for call to function setItem
   \   0002A8   7C01         MOV       R4,#0x1
   \   0002AA   7404         MOV       A,#0x4
   \   0002AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AF   12....       LCALL     ?Subroutine19 & 0xFFFF
   1197                  }
   \                     ??CrossCallReturnLabel_32:
   \   0002B2   8008         SJMP      ??osal_nv_write_10
   1198                  else
   1199                  {
   1200                    rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_9:
   \   0002B4   7401         MOV       A,#0x1
   \   0002B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B9   740A         MOV       A,#0xa
   \   0002BB   F0           MOVX      @DPTR,A
   1201                  }
   1202          
   1203                  if ( dstPg == pgRes )
   \                     ??osal_nv_write_10:
   \   0002BC   90....       MOV       DPTR,#pgRes
   \   0002BF   E0           MOVX      A,@DPTR
   \   0002C0   65..         XRL       A,?V2
   \   0002C2   7015         JNZ       ??osal_nv_write_6
   1204                  {
   1205                    compactPage( comPg );
   \   0002C4                ; Setup parameters for call to function compactPage
   \   0002C4   85..82       MOV       DPL,?XSP + 0
   \   0002C7   85..83       MOV       DPH,?XSP + 1
   \   0002CA   E0           MOVX      A,@DPTR
   \   0002CB   F9           MOV       R1,A
   \   0002CC   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   0002CF   8008         SJMP      ??osal_nv_write_6
   1206                  }
   1207                }
   1208                else
   1209                {
   1210                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_7:
   \   0002D1   7401         MOV       A,#0x1
   \   0002D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D6   740A         MOV       A,#0xa
   \   0002D8   F0           MOVX      @DPTR,A
   1211                }
   1212              }
   1213            }
   1214          
   1215            if ( failF )
   \                     ??osal_nv_write_6:
   \   0002D9   90....       MOV       DPTR,#failF
   \   0002DC   E0           MOVX      A,@DPTR
   \   0002DD   600B         JZ        ??osal_nv_write_0
   1216            {
   1217              (void)initNV();  // See comment at the declaration of failF.
   \   0002DF                ; Setup parameters for call to function initNV
   \   0002DF   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   1218              rtrn = NV_OPER_FAILED;
   \   0002E2   7401         MOV       A,#0x1
   \   0002E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E7   740A         MOV       A,#0xa
   \   0002E9   F0           MOVX      @DPTR,A
   1219            }
   1220          
   1221            return rtrn;
   \                     ??osal_nv_write_0:
   \   0002EA   7401         MOV       A,#0x1
   \   0002EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EF   E0           MOVX      A,@DPTR
   \   0002F0   F9           MOV       R1,A
   \                     ??osal_nv_write_2:
   \   0002F1   7410         MOV       A,#0x10
   \   0002F3                REQUIRE ?Subroutine2
   \   0002F3                ; // Fall through to label ?Subroutine2
   1222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   C3           CLR       C
   \   000002   98           SUBB      A,R0
   \   000003   FE           MOV       R6,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   99           SUBB      A,R1
   \   000007   FF           MOV       R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   A9..         MOV       R1,?V3
   \   000005   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   EE           MOV       A,R6
   \   000006   FA           MOV       R2,A
   \   000007   EF           MOV       A,R7
   \   000008   FB           MOV       R3,A
   \   000009   A9..         MOV       R1,?V2
   \   00000B   22           RET
   1223          
   1224          /*********************************************************************
   1225           * @fn      osal_nv_read
   1226           *
   1227           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1228           *          an element of an item by indexing into the item with an offset.
   1229           *          Read data is copied into *buf.
   1230           *
   1231           * @param   id  - Valid NV item Id.
   1232           * @param   ndx - Index offset into item
   1233           * @param   len - Length of data to read.
   1234           * @param  *buf - Data is read into this buffer.
   1235           *
   1236           * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
   1237           *          Otherwise, NV_OPER_FAILED for failure.
   1238           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1239          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1240          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   1241            uint16 offset;
   1242          
   1243            offset = findItem( id );
   \   000009                ; Setup parameters for call to function findItem
   \   000009   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A9..         MOV       R1,?V1
   1244            if ( offset == OSAL_NV_ITEM_NULL )
   \   000010   EA           MOV       A,R2
   \   000011   49           ORL       A,R1
   \   000012   7004         JNZ       ??osal_nv_read_0
   1245            {
   1246              return NV_OPER_FAILED;
   \   000014   790A         MOV       R1,#0xa
   \   000016   801D         SJMP      ??osal_nv_read_1
   1247            }
   1248          
   1249            HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_0:
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   740A         MOV       A,#0xa
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000020   740E         MOV       A,#0xe
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000028   EA           MOV       A,R2
   \   000029   2E           ADD       A,R6
   \   00002A   FA           MOV       R2,A
   \   00002B   EB           MOV       A,R3
   \   00002C   3F           ADDC      A,R7
   \   00002D   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1250          
   1251            return ZSUCCESS;
   \   000033   7900         MOV       R1,#0x0
   \                     ??osal_nv_read_1:
   \   000035   02....       LJMP      ?Subroutine5 & 0xFFFF
   1252          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setPageUse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??erasePage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??compactPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??findItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkF::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWord::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordH::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xferBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_len::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read
   1253          
   1254          /*********************************************************************
   1255          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     53   calcChkF
        0     21   -> HalFlashRead
      0     60   compactPage
        0     26   -> HalFlashRead
        0     24   -> calcChkF
        0     24   -> erasePage
        0     24   -> setItem
        0     24   -> setPageUse
        0     26   -> writeBuf
        0     24   -> writeWordH
        0     28   -> xferBuf
      0     33   erasePage
        0      9   -> HalAdcCheckVdd
        0      9   -> HalFlashErase
      0     44   findItem
        0     12   -> initPage
      1     53   initItem
        0     16   -> compactPage
        0     19   -> writeItem
      0     54   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initNV
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> findItem
        0     14   -> initItem
        0     12   -> initNV
      0     20   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
      0     16   osal_nv_read
        0     12   -> HalFlashRead
        0     10   -> findItem
      2     40   osal_nv_write
        0     34   -> HalFlashRead
        0     32   -> calcChkF
        0     32   -> compactPage
        0     32   -> findItem
        0     34   -> initItem
        0     32   -> initNV
        0     32   -> setItem
        0     34   -> writeBuf
        0     32   -> writeWordH
        0     36   -> xferBuf
      0     56   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     44   setPageUse
        0     17   -> writeWord
      1     56   writeBuf
        0     20   -> HalAdcCheckVdd
        0     22   -> HalFlashRead
        0     22   -> HalFlashWrite
        0     20   -> writeWord
      0     48   writeItem
        0     29   -> HalFlashRead
        0     27   -> calcChkF
        0     27   -> setPageUse
        0     29   -> writeBuf
        0     27   -> writeWord
        0     27   -> writeWordH
      0     43   writeWord
        0     14   -> HalAdcCheckVdd
        0     16   -> HalFlashWrite
      1     45   writeWordH
        0     13   -> writeWord
      1     59   xferBuf
        0     23   -> HalFlashRead
        0     21   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine41_0
       6  ??Subroutine42_0
       5  ??Subroutine43_0
       9  ??Subroutine44_0
       8  ??Subroutine45_0
       7  ??Subroutine46_0
       6  ??Subroutine47_0
       5  ??Subroutine48_0
       4  ??Subroutine49_0
       1  ??Subroutine50_0
       1  ??Subroutine51_0
       6  ??Subroutine52_0
       5  ?Subroutine0
       3  ?Subroutine1
       2  ?Subroutine10
       8  ?Subroutine11
       6  ?Subroutine12
      10  ?Subroutine13
       5  ?Subroutine14
       6  ?Subroutine15
      12  ?Subroutine16
       6  ?Subroutine17
      15  ?Subroutine18
       9  ?Subroutine19
       3  ?Subroutine2
      12  ?Subroutine20
       5  ?Subroutine21
       4  ?Subroutine22
       4  ?Subroutine23
       9  ?Subroutine24
       6  ?Subroutine25
      12  ?Subroutine26
      15  ?Subroutine27
      10  ?Subroutine28
      17  ?Subroutine29
       3  ?Subroutine3
      11  ?Subroutine30
      14  ?Subroutine31
       1  ?Subroutine32
      15  ?Subroutine33
       9  ?Subroutine34
      13  ?Subroutine35
       6  ?Subroutine36
       9  ?Subroutine37
      15  ?Subroutine38
      11  ?Subroutine39
       8  ?Subroutine4
      12  ?Subroutine40
       5  ?Subroutine5
       7  ?Subroutine6
       5  ?Subroutine7
       6  ?Subroutine8
       6  ?Subroutine9
   12288  _nvBuf
       8  _nvIEEE
     127  calcChkF
       6  calcChkF::?relay
     316  compactPage
       6  compactPage::?relay
      47  erasePage
       6  erasePage::?relay
       1  failF
      64  findItem
       6  findItem::?relay
       1  findPg
     210  initItem
       6  initItem::?relay
     210  initNV
       6  initNV::?relay
     418  initPage
       6  initPage::?relay
      14  osal_nv_init
       6  osal_nv_init::?relay
      78  osal_nv_item_init
       6  osal_nv_item_init::?relay
      63  osal_nv_item_len
       6  osal_nv_item_len::?relay
      56  osal_nv_read
       6  osal_nv_read::?relay
     755  osal_nv_write
       6  osal_nv_write::?relay
      12  pgLost
      12  pgOff
       1  pgRes
     135  setItem
       6  setItem::?relay
      50  setPageUse
       6  setPageUse::?relay
     356  writeBuf
       6  writeBuf::?relay
     488  writeItem
       6  writeItem::?relay
      80  writeWord
       6  writeWord::?relay
      66  writeWordH
       6  writeWordH::?relay
     338  xferBuf
       6  xferBuf::?relay

 
  4 274 bytes in segment BANKED_CODE
    114 bytes in segment BANK_RELAYS
      8 bytes in segment IEEE_ADDRESS_SPACE
     27 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
    114 bytes of CODE     memory
  4 274 bytes of HUGECODE memory
 12 323 bytes of XDATA    memory

Errors: none
Warnings: none
