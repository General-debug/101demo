###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  15:12:20
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\SRC\DemoPrj\Components\zmac\f8w\zmac.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW2FC5.tmp
#        (D:\SRC\DemoPrj\Components\zmac\f8w\zmac.c -D ZIGBEEPRO -D
#        HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\zmac.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\zmac.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\zmac\f8w\zmac.c
      1          /**************************************************************************************************
      2            Filename:       zmac.c
      3            Revised:        $Date: 2009-03-31 11:40:58 -0700 (Tue, 31 Mar 2009) $
      4            Revision:       $Revision: 19611 $
      5          
      6          
      7            Description:    This file contains the ZStack MAC Porting Layer
      8          
      9          
     10            Copyright 2005-2007 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /********************************************************************************************************
     42           *                                               INCLUDES
     43           ********************************************************************************************************/
     44          
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "ZMAC.h"
     48          #include "mac_main.h"
     49          
     50          #if !defined NONWK
     51            #include "ZGlobals.h"
     52          #endif
     53          
     54          /********************************************************************************************************
     55           *                                                 MACROS
     56           ********************************************************************************************************/
     57          
     58          /********************************************************************************************************
     59           *                                               CONSTANTS
     60           ********************************************************************************************************/
     61          
     62          /********************************************************************************************************
     63           *                                               GLOBALS
     64           ********************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     65          uint32 _ScanChannels;
   \                     _ScanChannels:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     66          
     67          extern uint8 aExtendedAddress[];
     68          
     69          /********************************************************************************************************
     70           *                                               LOCALS
     71           ********************************************************************************************************/
     72          
     73          /* Pointer to scan result buffer */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          void *ZMac_ScanBuf = NULL;
   \                     ZMac_ScanBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     75          
     76          /********************************************************************************************************
     77           * LOCAL FUNCTION PROTOTYPES
     78           ********************************************************************************************************/
     79          
     80          /********************************************************************************************************
     81           *                                                TYPEDEFS
     82           ********************************************************************************************************/
     83          
     84          
     85          /********************************************************************************************************
     86           *                                                FUNCTIONS
     87           ********************************************************************************************************/
     88          
     89          /********************************************************************************************************
     90           * @fn      ZMacInit
     91           *
     92           * @brief   Initialize MAC.
     93           *
     94           * @param   none.
     95           *
     96           * @return  status.
     97           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     98          uint8 ZMacInit( void )
   \                     ZMacInit:
     99          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    100            uint8 stat;
    101          
    102            MAC_Init();
   \   000005                ; Setup parameters for call to function MAC_Init
   \   000005   12....       LCALL     `??MAC_Init::?relay`; Banked call to: MAC_Init
    103            MAC_InitDevice();
   \   000008                ; Setup parameters for call to function MAC_InitDevice
   \   000008   12....       LCALL     `??MAC_InitDevice::?relay`; Banked call to: MAC_InitDevice
    104          
    105          #if !defined NONWK
    106            if ( ZG_BUILD_RTR_TYPE )
    107            {
    108              MAC_InitCoord();
   \   00000B                ; Setup parameters for call to function MAC_InitCoord
   \   00000B   12....       LCALL     `??MAC_InitCoord::?relay`; Banked call to: MAC_InitCoord
    109            }
    110          #endif
    111          
    112            // If OK, initialize the MAC
    113            stat = ZMacReset( TRUE );
   \   00000E                ; Setup parameters for call to function ZMacReset
   \   00000E   7901         MOV       R1,#0x1
   \   000010   12....       LCALL     `??ZMacReset::?relay`; Banked call to: ZMacReset
   \   000013   E9           MOV       A,R1
   \   000014   FE           MOV       R6,A
    114          
    115            // Turn off interrupts
    116            osal_int_disable( INTS_ALL );
   \   000015                ; Setup parameters for call to function osal_int_disable
   \   000015   79FF         MOV       R1,#-0x1
   \   000017   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
    117          
    118            return ( stat );
   \   00001A   EE           MOV       A,R6
   \   00001B   F9           MOV       R1,A
   \   00001C   02....       LJMP      ??Subroutine7_0 & 0xFFFF
    119          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    120          
    121          /********************************************************************************************************
    122           * @fn      ZMacReset
    123           *
    124           * @brief   Reset the MAC.
    125           *
    126           * @param   Default to PIB defaults.
    127           *
    128           * @return  status.
    129           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          uint8 ZMacReset( bool SetDefaultPIB )
   \                     ZMacReset:
    131          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    132            byte stat;
    133            byte value;
    134          
    135            stat = MAC_MlmeResetReq( SetDefaultPIB );
   \   00000A                ; Setup parameters for call to function MAC_MlmeResetReq
   \   00000A   12....       LCALL     `??MAC_MlmeResetReq::?relay`; Banked call to: MAC_MlmeResetReq
   \   00000D   E9           MOV       A,R1
   \   00000E   FE           MOV       R6,A
    136          
    137            // Don't send PAN ID conflict
    138            value = FALSE;
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
    139            MAC_MlmeSetReq( MAC_ASSOCIATED_PAN_COORD, &value );
   \   000017                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000017   AA..         MOV       R2,?XSP + 0
   \   000019   AB..         MOV       R3,?XSP + 1
   \   00001B   7956         MOV       R1,#0x56
   \   00001D   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
    140            MAC_MlmeSetReq( MAC_EXTENDED_ADDRESS, &aExtendedAddress );
   \   000020                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000020   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000022   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000024   79E2         MOV       R1,#-0x1e
   \   000026   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
    141          
    142            if (ZMac_ScanBuf)
   \   000029   90....       MOV       DPTR,#ZMac_ScanBuf
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   49           ORL       A,R1
   \   000033   6012         JZ        ??ZMacReset_0
    143            {
    144              osal_mem_free(ZMac_ScanBuf);
   \   000035                ; Setup parameters for call to function osal_mem_free
   \   000035   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FA           MOV       R2,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    145              ZMac_ScanBuf = NULL;
   \   000040   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000043   E4           CLR       A
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   F0           MOVX      @DPTR,A
    146            }
    147          
    148            return ( stat );
   \                     ??ZMacReset_0:
   \   000047   EE           MOV       A,R6
   \   000048   F9           MOV       R1,A
   \   000049   80..         SJMP      ?Subroutine0
    149          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine7_0
   \   000005                ; // Fall through to label ??Subroutine7_0
    150          
    151          
    152          /********************************************************************************************************
    153           * @fn      ZMacGetReq
    154           *
    155           * @brief   Read a MAC PIB attribute.
    156           *
    157           * @param   attr - PIB attribute to get
    158           * @param   value - pointer to the buffer to store the attribute
    159           *
    160           * @return  status
    161           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    162          uint8 ZMacGetReq( uint8 attr, uint8 *value )
   \                     ZMacGetReq:
    163          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    164            if ( attr == ZMacExtAddr )
   \   000007   74E2         MOV       A,#-0x1e
   \   000009   6E           XRL       A,R6
   \   00000A   700B         JNZ       ??ZMacGetReq_0
    165            {
    166              osal_cpyExtAddr( value, &aExtendedAddress );
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   00000E   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000010   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    167              return ZMacSuccess;
   \   000013   7900         MOV       R1,#0x0
   \   000015   8003         SJMP      ??ZMacGetReq_1
    168            }
    169          
    170            return (ZMacStatus_t) MAC_MlmeGetReq( attr, value );
   \                     ??ZMacGetReq_0:
   \   000017                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000017   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
   \                     ??ZMacGetReq_1:
   \   00001A   80..         SJMP      ??Subroutine7_0
    171          }
    172          
    173          
    174          /********************************************************************************************************
    175           * @fn      ZMacSetReq
    176           *
    177           * @brief   Write a MAC PIB attribute.
    178           *
    179           * @param   attr - PIB attribute to Set
    180           * @param   value - pointer to the data
    181           *
    182           * @return  status
    183           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          uint8 ZMacSetReq( uint8 attr, byte *value )
   \                     ZMacSetReq:
    185          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    186            if ( attr == ZMacExtAddr )
   \   00000B   74E2         MOV       A,#-0x1e
   \   00000D   69           XRL       A,R1
   \   00000E   700B         JNZ       ??ZMacSetReq_0
    187            {
    188              osal_cpyExtAddr( aExtendedAddress, value );
   \   000010                ; Setup parameters for call to function sAddrExtCpy
   \   000010   EA           MOV       A,R2
   \   000011   FC           MOV       R4,A
   \   000012   EB           MOV       A,R3
   \   000013   FD           MOV       R5,A
   \   000014   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000016   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000018   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    189            }
    190          
    191            return (ZMacStatus_t) MAC_MlmeSetReq( attr, value );
   \                     ??ZMacSetReq_0:
   \   00001B                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00001B   EE           MOV       A,R6
   \   00001C   FA           MOV       R2,A
   \   00001D   EF           MOV       A,R7
   \   00001E   FB           MOV       R3,A
   \   00001F   A9..         MOV       R1,?V0
   \   000021   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   000024   80..         SJMP      ??Subroutine7_0
    192          }
    193          
    194          /********************************************************************************************************
    195           * @fn      ZMacAssociateReq
    196           *
    197           * @brief   Request an association with a coordinator.
    198           *
    199           * @param   structure with info need to associate.
    200           *
    201           * @return  status
    202           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    203          uint8 ZMacAssociateReq( ZMacAssociateReq_t *pData )
   \                     ZMacAssociateReq:
    204          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    205            /* Right now, set security to zero */
    206            pData->Sec.SecurityLevel = false;
   \   000004   EA           MOV       A,R2
   \   000005   2416         ADD       A,#0x16
   \   000007   12....       LCALL     ?Subroutine5 & 0xFFFF
    207          
    208            MAC_MlmeAssociateReq ( (macMlmeAssociateReq_t *)pData);
   \                     ??CrossCallReturnLabel_3:
   \   00000A                ; Setup parameters for call to function MAC_MlmeAssociateReq
   \   00000A   12....       LCALL     `??MAC_MlmeAssociateReq::?relay`; Banked call to: MAC_MlmeAssociateReq
    209            return ( ZMacSuccess );
   \   00000D   02....       LJMP      ?Subroutine1 & 0xFFFF
    210          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7900         MOV       R1,#0x0
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    211          
    212          /********************************************************************************************************
    213           * @fn      ZMacAssociateRsp
    214           *
    215           * @brief   Request to send an association response message.
    216           *
    217           * @param   structure with associate response and info needed to send it.
    218           *
    219           * @return  status
    220           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    221          uint8 ZMacAssociateRsp( ZMacAssociateRsp_t *pData )
   \                     ZMacAssociateRsp:
    222          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    223            /* Right now, set security to zero */
    224            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL     ?Subroutine4 & 0xFFFF
    225          
    226            MAC_MlmeAssociateRsp( (macMlmeAssociateRsp_t *) pData );
   \                     ??CrossCallReturnLabel_0:
   \   000007                ; Setup parameters for call to function MAC_MlmeAssociateRsp
   \   000007   12....       LCALL     `??MAC_MlmeAssociateRsp::?relay`; Banked call to: MAC_MlmeAssociateRsp
    227            return ( ZMacSuccess );
   \   00000A   02....       LJMP      ?Subroutine1 & 0xFFFF
    228          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EA           MOV       A,R2
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET
    229          
    230          /********************************************************************************************************
    231           * @fn      ZMacDisassociateReq
    232           *
    233           * @brief   Request to send a disassociate request message.
    234           *
    235           * @param   structure with info need send it.
    236           *
    237           * @return  status
    238           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    239          uint8 ZMacDisassociateReq( ZMacDisassociateReq_t *pData )
   \                     ZMacDisassociateReq:
    240          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    241            /* Right now, set security to zero */
    242            pData->Sec.SecurityLevel = false;
   \   000004   EA           MOV       A,R2
   \   000005   2415         ADD       A,#0x15
   \   000007   12....       LCALL     ?Subroutine5 & 0xFFFF
    243          
    244            MAC_MlmeDisassociateReq( (macMlmeDisassociateReq_t *)pData);
   \                     ??CrossCallReturnLabel_4:
   \   00000A                ; Setup parameters for call to function MAC_MlmeDisassociateReq
   \   00000A   12....       LCALL     `??MAC_MlmeDisassociateReq::?relay`; Banked call to: MAC_MlmeDisassociateReq
    245            return ( ZMacSuccess );
   \   00000D   02....       LJMP      ?Subroutine1 & 0xFFFF
    246          }
    247          
    248          /********************************************************************************************************
    249           * @fn      ZMacOrphanRsp
    250           *
    251           * @brief   Allows next higher layer to respond to an orphan indication message.
    252           *
    253           * @param   structure with info need send it.
    254           *
    255           * @return  status
    256           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          uint8 ZMacOrphanRsp( ZMacOrphanRsp_t *pData )
   \                     ZMacOrphanRsp:
    258          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    259            /* Right now, set security to zero */
    260            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL     ?Subroutine4 & 0xFFFF
    261          
    262            MAC_MlmeOrphanRsp( (macMlmeOrphanRsp_t *)pData);
   \                     ??CrossCallReturnLabel_1:
   \   000007                ; Setup parameters for call to function MAC_MlmeOrphanRsp
   \   000007   12....       LCALL     `??MAC_MlmeOrphanRsp::?relay`; Banked call to: MAC_MlmeOrphanRsp
    263            return ( ZMacSuccess );
   \   00000A   02....       LJMP      ?Subroutine1 & 0xFFFF
    264          }
    265          
    266          /********************************************************************************************************
    267           * @fn      ZMacScanReq
    268           *
    269           * @brief   This function is called to perform a network scan.
    270           *
    271           * @param   param - structure with info need send it.
    272           *
    273           * @return  status
    274           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          uint8 ZMacScanReq( ZMacScanReq_t *pData )
   \                     ZMacScanReq:
    276          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    277            _ScanChannels = pData->ScanChannels;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?XLOAD_R0123
   \   000010   90....       MOV       DPTR,#_ScanChannels
   \   000013   12....       LCALL     ?XSTORE_R0123
    278          
    279            /* scan in progress */
    280            if (ZMac_ScanBuf != NULL)
   \   000016   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   6004         JZ        ??ZMacScanReq_0
    281            {
    282              return MAC_SCAN_IN_PROGRESS;
   \   000022   79FC         MOV       R1,#-0x4
   \   000024   8071         SJMP      ??ZMacScanReq_1
    283            }
    284          
    285            if (pData->ScanType != ZMAC_ORPHAN_SCAN)
   \                     ??ZMacScanReq_0:
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   7403         MOV       A,#0x3
   \   000032   68           XRL       A,R0
   \   000033   6043         JZ        ??ZMacScanReq_2
    286            {
    287              /* Allocate memory depends on the scan type */
    288              if (pData->ScanType == ZMAC_ED_SCAN)
   \   000035   EE           MOV       A,R6
   \   000036   2413         ADD       A,#0x13
   \   000038   F5..         MOV       ?V0,A
   \   00003A   E4           CLR       A
   \   00003B   3F           ADDC      A,R7
   \   00003C   F5..         MOV       ?V1,A
   \   00003E   E8           MOV       A,R0
   \   00003F   7059         JNZ       ??ZMacScanReq_3
    289              {
    290                if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
   \   000041                ; Setup parameters for call to function osal_mem_alloc
   \   000041   7A1B         MOV       R2,#0x1b
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8B..         MOV       ?V3,R3
   \   00004A   A9..         MOV       R1,?V3
   \   00004C   90....       MOV       DPTR,#ZMac_ScanBuf
   \   00004F   EA           MOV       A,R2
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   EB           MOV       A,R3
   \   000053   F0           MOVX      @DPTR,A
   \   000054   EA           MOV       A,R2
   \   000055   49           ORL       A,R1
   \   000056   6075         JZ        ??ZMacScanReq_4
    291                {
    292                  return MAC_NO_RESOURCES;
    293                }
    294                osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000058                ; Setup parameters for call to function osal_memset
   \   000058   7C1B         MOV       R4,#0x1b
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   7900         MOV       R1,#0x0
   \   00005E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    295                pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
   \   000061   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000064   E0           MOVX      A,@DPTR
   \   000065   240B         ADD       A,#0xb
   \   000067   F8           MOV       R0,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   3400         ADDC      A,#0x0
   \   00006C   F9           MOV       R1,A
   \   00006D   85..82       MOV       DPL,?V0
   \   000070   85..83       MOV       DPH,?V1
   \   000073   E8           MOV       A,R0
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   E9           MOV       A,R1
   \   000077   F0           MOVX      @DPTR,A
    296              }
    297              else if (pData->MaxResults > 0)
    298              {
    299                if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
    300                     osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
    301                {
    302                  return MAC_NO_RESOURCES;
    303                }
    304              }
    305            }
    306          
    307            /* Right now, set security to zero */
    308            pData->Sec.SecurityLevel = false;
   \                     ??ZMacScanReq_2:
   \   000078   EE           MOV       A,R6
   \   000079   2410         ADD       A,#0x10
   \   00007B   F582         MOV       DPL,A
   \   00007D   E4           CLR       A
   \   00007E   3F           ADDC      A,R7
   \   00007F   F583         MOV       DPH,A
   \   000081   E4           CLR       A
   \   000082   F0           MOVX      @DPTR,A
    309          
    310            /* Channel Page */
    311            pData->ChannelPage = 0x00;
   \   000083   8E82         MOV       DPL,R6
   \   000085   8F83         MOV       DPH,R7
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   F0           MOVX      @DPTR,A
    312          
    313            MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
   \   00008E                ; Setup parameters for call to function MAC_MlmeScanReq
   \   00008E   EE           MOV       A,R6
   \   00008F   FA           MOV       R2,A
   \   000090   EF           MOV       A,R7
   \   000091   FB           MOV       R3,A
   \   000092   12....       LCALL     `??MAC_MlmeScanReq::?relay`; Banked call to: MAC_MlmeScanReq
    314          
    315            return ZMacSuccess;
   \   000095   7900         MOV       R1,#0x0
   \                     ??ZMacScanReq_1:
   \   000097   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??ZMacScanReq_3:
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   60D0         JZ        ??ZMacScanReq_2
   \   0000A8                ; Setup parameters for call to function osal_mem_alloc
   \   0000A8   75F021       MOV       B,#0x21
   \   0000AB   A4           MUL       AB
   \   0000AC   FA           MOV       R2,A
   \   0000AD   ABF0         MOV       R3,B
   \   0000AF   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B2   8B..         MOV       ?V3,R3
   \   0000B4   A9..         MOV       R1,?V3
   \   0000B6   85..82       MOV       DPL,?V0
   \   0000B9   85..83       MOV       DPH,?V1
   \   0000BC   EA           MOV       A,R2
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   EB           MOV       A,R3
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0000C4   EA           MOV       A,R2
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   EB           MOV       A,R3
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   EA           MOV       A,R2
   \   0000CA   49           ORL       A,R1
   \   0000CB   70AB         JNZ       ??ZMacScanReq_2
   \                     ??ZMacScanReq_4:
   \   0000CD   791A         MOV       R1,#0x1a
   \   0000CF   80C6         SJMP      ??ZMacScanReq_1
    316          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    317          
    318          
    319          /********************************************************************************************************
    320           * @fn      ZMacStartReq
    321           *
    322           * @brief   This function is called to tell the MAC to transmit beacons
    323           *          and become a coordinator.
    324           *
    325           * @param   structure with info need send it.
    326           *
    327           * @return  status
    328           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    329          uint8 ZMacStartReq( ZMacStartReq_t *pData )
   \                     ZMacStartReq:
    330          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    331            uint8 stat;
    332          
    333            // Probably want to keep the receiver on
    334            stat = true;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
    335            MAC_MlmeSetReq( MAC_RX_ON_WHEN_IDLE, &stat );
   \   000017                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000017   AA..         MOV       R2,?XSP + 0
   \   000019   AB..         MOV       R3,?XSP + 1
   \   00001B   7952         MOV       R1,#0x52
   \   00001D   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
    336          
    337            /* Right now, set security to zero */
    338            pData->RealignSec.SecurityLevel = false;
   \   000020   EE           MOV       A,R6
   \   000021   2415         ADD       A,#0x15
   \   000023   F582         MOV       DPL,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   F583         MOV       DPH,A
   \   000029   E4           CLR       A
   \   00002A   F0           MOVX      @DPTR,A
    339            pData->BeaconSec.SecurityLevel = false;
   \   00002B   EE           MOV       A,R6
   \   00002C   2420         ADD       A,#0x20
   \   00002E   12....       LCALL     ?Subroutine6 & 0xFFFF
    340          
    341          
    342            MAC_MlmeStartReq((macMlmeStartReq_t *) pData);
   \                     ??CrossCallReturnLabel_7:
   \   000031   12....       LCALL     `??MAC_MlmeStartReq::?relay`; Banked call to: MAC_MlmeStartReq
    343          
    344            // MAC does not issue mlmeStartConfirm(), so we have to
    345            // mlmeStartConfirm( stat );  This needs to be addressed some how
    346          
    347            return ZMacSuccess;
   \   000034   7900         MOV       R1,#0x0
   \   000036   02....       LJMP      ?Subroutine0 & 0xFFFF
    348          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function MAC_MlmeStartReq
   \   000008                ; Setup parameters for call to function MAC_McpsDataReq
   \   000008   EE           MOV       A,R6
   \   000009   FA           MOV       R2,A
   \   00000A   EF           MOV       A,R7
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
    349          
    350          /********************************************************************************************************
    351           * @fn      ZMacSyncReq
    352           *
    353           * @brief   This function is called to request a sync to the current
    354           *          networks beacons.
    355           *
    356           * @param   LogicalChannel -
    357           * @param   TrackBeacon - true/false
    358           *
    359           * @return  status
    360           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          uint8 ZMacSyncReq( ZMacSyncReq_t *pData )
   \                     ZMacSyncReq:
    362          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    363            MAC_MlmeSyncReq( (macMlmeSyncReq_t *)pData);
   \   000004                ; Setup parameters for call to function MAC_MlmeSyncReq
   \   000004   12....       LCALL     `??MAC_MlmeSyncReq::?relay`; Banked call to: MAC_MlmeSyncReq
    364            return ZMacSuccess;
   \   000007   02....       LJMP      ?Subroutine1 & 0xFFFF
    365          }
    366          
    367          /********************************************************************************************************
    368           * @fn      ZMacPollReq
    369           *
    370           * @brief   This function is called to request MAC data request poll.
    371           *
    372           * @param   coordAddr -
    373           * @param   coordPanId -
    374           * @param   SecurityEnable - true or false.
    375           *
    376           * @return  status
    377           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          uint8 ZMacPollReq( ZMacPollReq_t *pData )
   \                     ZMacPollReq:
    379          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    380            /* Right now, set security to zero */
    381            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL     ?Subroutine4 & 0xFFFF
    382          
    383            MAC_MlmePollReq ((macMlmePollReq_t *)pData);
   \                     ??CrossCallReturnLabel_2:
   \   000007                ; Setup parameters for call to function MAC_MlmePollReq
   \   000007   12....       LCALL     `??MAC_MlmePollReq::?relay`; Banked call to: MAC_MlmePollReq
    384            return ( ZMacSuccess );
   \   00000A   02....       LJMP      ?Subroutine1 & 0xFFFF
    385          }
    386          
    387          /********************************************************************************************************
    388           * @fn      ZMacDataReq
    389           *
    390           * @brief   Send a MAC Data Frame packet.
    391           *
    392           * @param   structure containing data and where to send it.
    393           *
    394           * @return  status
    395           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    396          uint8 ZMacDataReq( ZMacDataReq_t *pData )
   \                     ZMacDataReq:
    397          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
    398            macMcpsDataReq_t *pBuf;
    399          
    400            /* Allocate memory */
    401            pBuf = MAC_McpsDataAlloc(pData->msduLength, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
   \   000009   EA           MOV       A,R2
   \   00000A   241B         ADD       A,#0x1b
   \   00000C   F5..         MOV       ?V6,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V5
   \   000011   F5..         MOV       ?V7,A
   \   000013                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   000013   7B00         MOV       R3,#0x0
   \   000015   7A00         MOV       R2,#0x0
   \   000017   85..82       MOV       DPL,?V6
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   12....       LCALL     `??MAC_McpsDataAlloc::?relay`; Banked call to: MAC_McpsDataAlloc
   \   000021   8A..         MOV       ?V0,R2
   \   000023   8B..         MOV       ?V1,R3
   \   000025   AE..         MOV       R6,?V0
   \   000027   AF..         MOV       R7,?V1
    402          
    403            if (pBuf)
   \   000029   EA           MOV       A,R2
   \   00002A   4F           ORL       A,R7
   \   00002B   6072         JZ        ??ZMacDataReq_0
    404            {
    405              /* Copy the addresses */
    406              osal_memcpy (&pBuf->mac, pData, sizeof (macDataReq_t));
   \   00002D                ; Setup parameters for call to function osal_memcpy
   \   00002D   85....       MOV       ?V0,?V4
   \   000030   85....       MOV       ?V1,?V5
   \   000033   75..00       MOV       ?V2,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003B   7C10         MOV       R4,#0x10
   \   00003D   7D00         MOV       R5,#0x0
   \   00003F   EA           MOV       A,R2
   \   000040   2422         ADD       A,#0x22
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000049   7403         MOV       A,#0x3
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
    407          
    408              /* Copy data */
    409              pBuf->msdu.len = pData->msduLength;
   \   00004E   85..82       MOV       DPL,?V6
   \   000051   85..83       MOV       DPH,?V7
   \   000054   E0           MOVX      A,@DPTR
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
    410              osal_memcpy (pBuf->msdu.p, pData->msdu, pData->msduLength);
   \   00005E                ; Setup parameters for call to function osal_memcpy
   \   00005E   E5..         MOV       A,?V4
   \   000060   241C         ADD       A,#0x1c
   \   000062   F582         MOV       DPL,A
   \   000064   E4           CLR       A
   \   000065   35..         ADDC      A,?V5
   \   000067   F583         MOV       DPH,A
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F5..         MOV       ?V0,A
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F5..         MOV       ?V1,A
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000075   85..82       MOV       DPL,?V6
   \   000078   85..83       MOV       DPH,?V7
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   FC           MOV       R4,A
   \   00007D   7D00         MOV       R5,#0x0
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   FA           MOV       R2,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   FB           MOV       R3,A
   \   00008A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008D   7403         MOV       A,#0x3
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
    411          
    412              /* Right now, set security to zero */
    413              pBuf->sec.securityLevel = false;
   \   000092   EE           MOV       A,R6
   \   000093   241F         ADD       A,#0x1f
   \   000095   12....       LCALL     ?Subroutine6 & 0xFFFF
    414          
    415              /* Call Mac Data Request */
    416              MAC_McpsDataReq(pBuf);
   \                     ??CrossCallReturnLabel_8:
   \   000098   12....       LCALL     `??MAC_McpsDataReq::?relay`; Banked call to: MAC_McpsDataReq
    417          
    418              return ( ZMacSuccess );
   \   00009B   7900         MOV       R1,#0x0
   \   00009D   8002         SJMP      ??ZMacDataReq_1
    419            }
    420          
    421            return MAC_NO_RESOURCES;
   \                     ??ZMacDataReq_0:
   \   00009F   791A         MOV       R1,#0x1a
   \                     ??ZMacDataReq_1:
   \   0000A1   7F08         MOV       R7,#0x8
   \   0000A3   02....       LJMP      ?BANKED_LEAVE_XDATA
    422          }
    423          
    424          /********************************************************************************************************
    425           * @fn      ZMacPurgeReq
    426           *
    427           * @brief   Purge a MAC Data Frame packet.
    428           *
    429           * @param   MSDU data handle.
    430           *
    431           * @return  status
    432           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    433          uint8 ZMacPurgeReq( byte Handle )
   \                     ZMacPurgeReq:
    434          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    435            MAC_McpsPurgeReq( Handle );
   \   000005                ; Setup parameters for call to function MAC_McpsPurgeReq
   \   000005   12....       LCALL     `??MAC_McpsPurgeReq::?relay`; Banked call to: MAC_McpsPurgeReq
    436            return ZMacSuccess;
   \   000008                REQUIRE ?Subroutine3
   \   000008                ; // Fall through to label ?Subroutine3
    437          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ??Subroutine7_0 & 0xFFFF
    438          
    439          /********************************************************************************************************
    440           * @fn      ZMacSrcMatchEnable
    441           *
    442           * @brief   This function is call to enable AUTOPEND and source address matching.
    443           *
    444           * @param   addressType - address type that the application uses
    445           *                        SADDR_MODE_SHORT or SADDR_MODE_EXT.
    446           *          numEntries  - number of source address table entries to be used
    447           *
    448           * @return  status
    449           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    450          ZMacStatus_t ZMacSrcMatchEnable (uint8 addrType, uint8 numEntries)
   \                     ZMacSrcMatchEnable:
    451          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    452            return (MAC_SrcMatchEnable(addrType, numEntries));
   \   000005                ; Setup parameters for call to function MAC_SrcMatchEnable
   \   000005   12....       LCALL     `??MAC_SrcMatchEnable::?relay`; Banked call to: MAC_SrcMatchEnable
   \   000008   02....       LJMP      ??Subroutine7_0 & 0xFFFF
    453          }
    454          
    455          /********************************************************************************************************
    456           * @fn      ZMacSrcMatchAddEntry
    457           *
    458           * @brief   This function is called to add a short or extended address to source address table.
    459           *
    460           * @param   addr - a pointer to sAddr_t which contains addrMode
    461           *                     and a union of a short 16-bit MAC address or an extended
    462           *                     64-bit MAC address to be added to the source address table.
    463           *          panID - the device PAN ID. It is only used when the addr is
    464           *                      using short address
    465           *
    466           * @return  status
    467           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          ZMacStatus_t ZMacSrcMatchAddEntry (zAddrType_t *addr, uint16 panID)
   \                     ZMacSrcMatchAddEntry:
    469          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    470            return (MAC_SrcMatchAddEntry ((sAddr_t*)addr, panID));
   \   000004                ; Setup parameters for call to function MAC_SrcMatchAddEntry
   \   000004   12....       LCALL     `??MAC_SrcMatchAddEntry::?relay`; Banked call to: MAC_SrcMatchAddEntry
   \   000007   80..         SJMP      ??Subroutine8_0
    471          }
    472          
    473          /********************************************************************************************************
    474           * @fn      ZMacSrcMatchDeleteEntry
    475           *
    476           * @brief   This function is called to delete a short or extended address from source address table.
    477           *
    478           * @param   addr - a pointer to sAddr_t which contains addrMode
    479           *                     and a union of a short 16-bit MAC address or an extended
    480           *                     64-bit MAC address to be added to the source address table.
    481           *          panID - the device PAN ID. It is only used when the addr is
    482           *                      using short address
    483           *
    484           * @return  status
    485           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          ZMacStatus_t ZMacSrcMatchDeleteEntry (zAddrType_t *addr, uint16 panID)
   \                     ZMacSrcMatchDeleteEntry:
    487          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    488            return (MAC_SrcMatchDeleteEntry ((sAddr_t*)addr, panID));
   \   000004                ; Setup parameters for call to function MAC_SrcMatchDeleteEntry
   \   000004   12....       LCALL     `??MAC_SrcMatchDeleteEntry::?relay`; Banked call to: MAC_SrcMatchDeleteEntry
   \   000007   80..         SJMP      ??Subroutine8_0
    489          }
    490          
    491          /********************************************************************************************************
    492           * @fn       ZMacSrcMatchAckAllPending
    493           *
    494           * @brief    Enabled/disable acknowledging all packets with pending bit set
    495           *           It is normally enabled when adding new entries to
    496           *           the source address table fails due to the table is full, or
    497           *           disabled when more entries are deleted and the table has
    498           *           empty slots.
    499           *
    500           * @param    option - true (acknowledging all packets with pending field set)
    501           *                    false (acknowledging all packets with pending field cleared)
    502           *
    503           * @return   status
    504           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          ZMacStatus_t ZMacSrcMatchAckAllPending (uint8 option)
   \                     ZMacSrcMatchAckAllPending:
    506          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    507            MAC_SrcMatchAckAllPending (option);
   \   000005                ; Setup parameters for call to function MAC_SrcMatchAckAllPending
   \   000005   12....       LCALL     `??MAC_SrcMatchAckAllPending::?relay`; Banked call to: MAC_SrcMatchAckAllPending
    508          
    509            return ZMacSuccess;
   \   000008   80..         SJMP      ?Subroutine3
    510          }
    511          
    512          /********************************************************************************************************
    513           * @fn       ZMacSrcMatchCheckAllPending
    514           *
    515           * @brief    This function is called to check if acknowledging all packets with pending bit set is enabled.
    516           *
    517           * @param    none
    518           *
    519           * @return   status
    520           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          ZMacStatus_t ZMacSrcMatchCheckAllPending (void)
   \                     ZMacSrcMatchCheckAllPending:
    522          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    523            return (MAC_SrcMatchCheckAllPending ());
   \   000004                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   000004   12....       LCALL     `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   000007   80..         SJMP      ??Subroutine8_0
    524          }
    525          
    526          /********************************************************************************************************
    527           * @fn      - ZMACPwrOnReq
    528           *
    529           * @brief   - This function requests the MAC to power on the radio hardware
    530           *            and wake up.  When the power on procedure is complete the MAC
    531           *            will send a MAC_PWR_ON_CNF to the application.
    532           *
    533           * @input   - None.
    534           *
    535           * @output  - None.
    536           *
    537           * @return  - None.
    538           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    539          void ZMacPwrOnReq ( void )
   \                     ZMacPwrOnReq:
    540          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    541            MAC_PwrOnReq();
   \   000004                ; Setup parameters for call to function MAC_PwrOnReq
   \   000004   12....       LCALL     `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
    542          }
   \   000007   80..         SJMP      ??Subroutine8_0
    543          
    544          /********************************************************************************************************
    545           * @fn          MAC_PwrMode
    546           *
    547           * @brief       This function returns the current power mode of the MAC.
    548           *
    549           * input parameters
    550           *
    551           * None.
    552           *
    553           * output parameters
    554           *
    555           * None.
    556           *
    557           * @return      The current power mode of the MAC.
    558           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          uint8 ZMac_PwrMode(void)
   \                     ZMac_PwrMode:
    560          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    561            return (MAC_PwrMode());
   \   000004                ; Setup parameters for call to function MAC_PwrMode
   \   000004   12....       LCALL     `??MAC_PwrMode::?relay`; Banked call to: MAC_PwrMode
   \   000007   80..         SJMP      ??Subroutine8_0
    562          }
    563          
    564          /********************************************************************************************************
    565           * @fn      ZMacSetTransmitPower
    566           *
    567           * @brief   Set the transmitter power according to the level setting param.
    568           *
    569           * @param   Valid power level setting as defined in ZMAC.h.
    570           *
    571           * @return  ZMacSuccess if PHY_TRANSMIT_POWER found or ZMacUnsupportedAttribute.
    572           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    573          uint8 ZMacSetTransmitPower( ZMacTransmitPower_t level )
   \                     ZMacSetTransmitPower:
    574          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
    575            return MAC_MlmeSetReq( ZMacPhyTransmitPower, &level );
   \   000011                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000011   AA..         MOV       R2,?XSP + 0
   \   000013   AB..         MOV       R3,?XSP + 1
   \   000015   79E0         MOV       R1,#-0x20
   \   000017   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001F   80..         SJMP      ??Subroutine8_0
    576          }
    577          
    578          /********************************************************************************************************
    579           * @fn      ZMacSendNoData
    580           *
    581           * @brief   This function sends an empty msg
    582           *
    583           * @param   DstAddr   - destination short address
    584           *          DstPANId  - destination pan id
    585           *
    586           * @return  None
    587           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    588          void ZMacSendNoData ( uint16 DstAddr, uint16 DstPANId )
   \                     ZMacSendNoData:
    589          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    590            macMcpsDataReq_t *pBuf;
    591          
    592            /* Allocate memory */
    593            pBuf = MAC_McpsDataAlloc(0, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
   \   00000D                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??MAC_McpsDataAlloc::?relay`; Banked call to: MAC_McpsDataAlloc
    594          
    595            if (pBuf)
   \   000016   EA           MOV       A,R2
   \   000017   4B           ORL       A,R3
   \   000018   6051         JZ        ??ZMacSendNoData_0
    596            {
    597              /* Fill in src information */
    598              pBuf->mac.srcAddrMode              = SADDR_MODE_SHORT;
   \   00001A   EA           MOV       A,R2
   \   00001B   242D         ADD       A,#0x2d
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   3B           ADDC      A,R3
   \   000021   F583         MOV       DPH,A
   \   000023   7402         MOV       A,#0x2
   \   000025   F0           MOVX      @DPTR,A
    599          
    600              /* Fill in dst information */
    601              pBuf->mac.dstAddr.addr.shortAddr   = DstAddr;
   \   000026   EA           MOV       A,R2
   \   000027   2422         ADD       A,#0x22
   \   000029   F582         MOV       DPL,A
   \   00002B   E4           CLR       A
   \   00002C   3B           ADDC      A,R3
   \   00002D   F583         MOV       DPH,A
   \   00002F   E5..         MOV       A,?V0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   E5..         MOV       A,?V1
   \   000035   F0           MOVX      @DPTR,A
    602              pBuf->mac.dstAddr.addrMode         = SADDR_MODE_SHORT;
   \   000036   EA           MOV       A,R2
   \   000037   242A         ADD       A,#0x2a
   \   000039   F582         MOV       DPL,A
   \   00003B   E4           CLR       A
   \   00003C   3B           ADDC      A,R3
   \   00003D   F583         MOV       DPH,A
   \   00003F   7402         MOV       A,#0x2
   \   000041   F0           MOVX      @DPTR,A
    603              pBuf->mac.dstPanId                 = DstPANId;
   \   000042   EA           MOV       A,R2
   \   000043   242B         ADD       A,#0x2b
   \   000045   F582         MOV       DPL,A
   \   000047   E4           CLR       A
   \   000048   3B           ADDC      A,R3
   \   000049   F583         MOV       DPH,A
   \   00004B   EE           MOV       A,R6
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EF           MOV       A,R7
   \   00004F   F0           MOVX      @DPTR,A
    604          
    605              /* Misc information */
    606              pBuf->mac.msduHandle               = 0;
   \   000050   EA           MOV       A,R2
   \   000051   242E         ADD       A,#0x2e
   \   000053   12....       LCALL     ?Subroutine5 & 0xFFFF
    607              pBuf->mac.txOptions                = ZMAC_TXOPTION_ACK | ZMAC_TXOPTION_NO_RETRANS | ZMAC_TXOPTION_NO_CNF;
   \                     ??CrossCallReturnLabel_5:
   \   000056   EA           MOV       A,R2
   \   000057   242F         ADD       A,#0x2f
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   3B           ADDC      A,R3
   \   00005D   F583         MOV       DPH,A
   \   00005F   7431         MOV       A,#0x31
   \   000061   F0           MOVX      @DPTR,A
    608          
    609              /* Right now, set security to zero */
    610              pBuf->sec.securityLevel = false;
   \   000062   EA           MOV       A,R2
   \   000063   241F         ADD       A,#0x1f
   \   000065   12....       LCALL     ?Subroutine5 & 0xFFFF
    611          
    612              /* Call Mac Data Request */
    613              MAC_McpsDataReq(pBuf);
   \                     ??CrossCallReturnLabel_6:
   \   000068                ; Setup parameters for call to function MAC_McpsDataReq
   \   000068   12....       LCALL     `??MAC_McpsDataReq::?relay`; Banked call to: MAC_McpsDataReq
    614            }
    615          
    616          }
   \                     ??ZMacSendNoData_0:
   \   00006B                REQUIRE ?Subroutine2
   \   00006B                ; // Fall through to label ?Subroutine2
    617          
    618          /********************************************************************************************************
    619           * @fn      ZMacStateIdle
    620           *
    621           * @brief   This function returns true if the MAC state is idle.
    622           *
    623           * @param   none
    624           *
    625           * @return  TRUE if the MAC state is idle, FALSE otherwise.
    626           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    627          uint8 ZMacStateIdle( void )
   \                     ZMacStateIdle:
    628          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    629            return macStateIdle();
   \   000004                ; Setup parameters for call to function macStateIdle
   \   000004   12....       LCALL     `??macStateIdle::?relay`; Banked call to: macStateIdle
   \   000007   02....       LJMP      ??Subroutine8_0 & 0xFFFF
    630          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacGetReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacGetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSetReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSetReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacAssociateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacAssociateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacAssociateRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacAssociateRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacDisassociateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDisassociateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacOrphanRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacOrphanRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacScanReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacScanReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacStartReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacStartReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSyncReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSyncReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPollReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPollReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacDataReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacDataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPurgeReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPurgeReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchDeleteEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchAckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSrcMatchCheckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacPwrOnReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacPwrOnReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMac_PwrMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMac_PwrMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSetTransmitPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSetTransmitPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacSendNoData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacSendNoData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacStateIdle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacStateIdle

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   ZMacAssociateReq
        2      0   -> MAC_MlmeAssociateReq
      2      0   ZMacAssociateRsp
        2      0   -> MAC_MlmeAssociateRsp
      1     19   ZMacDataReq
        0     16   -> MAC_McpsDataAlloc
        0     16   -> MAC_McpsDataReq
        0     19   -> osal_memcpy
      2      0   ZMacDisassociateReq
        2      0   -> MAC_MlmeDisassociateReq
      0      9   ZMacGetReq
        0      9   -> MAC_MlmeGetReq
        0      9   -> sAddrExtCpy
      0      9   ZMacInit
        0      9   -> MAC_Init
        0      9   -> MAC_InitCoord
        0      9   -> MAC_InitDevice
        0      9   -> ZMacReset
        0      9   -> osal_int_disable
      2      0   ZMacOrphanRsp
        2      0   -> MAC_MlmeOrphanRsp
      2      0   ZMacPollReq
        2      0   -> MAC_MlmePollReq
      0      9   ZMacPurgeReq
        0      9   -> MAC_McpsPurgeReq
      2      0   ZMacPwrOnReq
        2      0   -> MAC_PwrOnReq
      0     19   ZMacReset
        0     10   -> MAC_MlmeResetReq
        0     10   -> MAC_MlmeSetReq
        0     10   -> osal_mem_free
      0     12   ZMacScanReq
        0     12   -> MAC_MlmeScanReq
        0     12   -> osal_mem_alloc
        0     12   -> osal_memset
      0     12   ZMacSendNoData
        0     12   -> MAC_McpsDataAlloc
        0     12   -> MAC_McpsDataReq
      0      9   ZMacSetReq
        0      9   -> MAC_MlmeSetReq
        0      9   -> sAddrExtCpy
      3      1   ZMacSetTransmitPower
        2      1   -> MAC_MlmeSetReq
      0      9   ZMacSrcMatchAckAllPending
        0      9   -> MAC_SrcMatchAckAllPending
      2      0   ZMacSrcMatchAddEntry
        2      0   -> MAC_SrcMatchAddEntry
      2      0   ZMacSrcMatchCheckAllPending
        2      0   -> MAC_SrcMatchCheckAllPending
      2      0   ZMacSrcMatchDeleteEntry
        2      0   -> MAC_SrcMatchDeleteEntry
      0      9   ZMacSrcMatchEnable
        0      9   -> MAC_SrcMatchEnable
      0     10   ZMacStartReq
        0     10   -> MAC_MlmeSetReq
        0     10   -> MAC_MlmeStartReq
      2      0   ZMacStateIdle
        2      0   -> macStateIdle
      2      0   ZMacSyncReq
        2      0   -> MAC_MlmeSyncReq
      2      0   ZMac_PwrMode
        2      0   -> MAC_PwrMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine7_0
       7  ??Subroutine8_0
       5  ?Subroutine0
       2  ?Subroutine1
       5  ?Subroutine2
       5  ?Subroutine3
      12  ?Subroutine4
       9  ?Subroutine5
      13  ?Subroutine6
      16  ZMacAssociateReq
       6  ZMacAssociateReq::?relay
      13  ZMacAssociateRsp
       6  ZMacAssociateRsp::?relay
     166  ZMacDataReq
       6  ZMacDataReq::?relay
      16  ZMacDisassociateReq
       6  ZMacDisassociateReq::?relay
      28  ZMacGetReq
       6  ZMacGetReq::?relay
      31  ZMacInit
       6  ZMacInit::?relay
      13  ZMacOrphanRsp
       6  ZMacOrphanRsp::?relay
      13  ZMacPollReq
       6  ZMacPollReq::?relay
       8  ZMacPurgeReq
       6  ZMacPurgeReq::?relay
       9  ZMacPwrOnReq
       6  ZMacPwrOnReq::?relay
      75  ZMacReset
       6  ZMacReset::?relay
     209  ZMacScanReq
       6  ZMacScanReq::?relay
     107  ZMacSendNoData
       6  ZMacSendNoData::?relay
      38  ZMacSetReq
       6  ZMacSetReq::?relay
      33  ZMacSetTransmitPower
       6  ZMacSetTransmitPower::?relay
      10  ZMacSrcMatchAckAllPending
       6  ZMacSrcMatchAckAllPending::?relay
       9  ZMacSrcMatchAddEntry
       6  ZMacSrcMatchAddEntry::?relay
       9  ZMacSrcMatchCheckAllPending
       6  ZMacSrcMatchCheckAllPending::?relay
       9  ZMacSrcMatchDeleteEntry
       6  ZMacSrcMatchDeleteEntry::?relay
      11  ZMacSrcMatchEnable
       6  ZMacSrcMatchEnable::?relay
      57  ZMacStartReq
       6  ZMacStartReq::?relay
      10  ZMacStateIdle
       6  ZMacStateIdle::?relay
      10  ZMacSyncReq
       6  ZMacSyncReq::?relay
       9  ZMac_PwrMode
       6  ZMac_PwrMode::?relay
       2  ZMac_ScanBuf
       4  _ScanChannels

 
 972 bytes in segment BANKED_CODE
 144 bytes in segment BANK_RELAYS
   6 bytes in segment XDATA_Z
 
 144 bytes of CODE     memory
 972 bytes of HUGECODE memory
   6 bytes of XDATA    memory

Errors: none
Warnings: none
