###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               18/Jun/2021  17:52:26
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\SRC\DemoPrj\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWD39A.tmp
#        (D:\SRC\DemoPrj\Components\mt\MT_AF.c -D ZIGBEEPRO -D HAL_UART=TRUE -D
#        SERIAL_APP_PORT=0 -D LCD_SUPPORTED -lC
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        -lA
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1223
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\ -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\SOURCE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\List\MT_AF.lst
#    Object file        =  
#        D:\SRC\DemoPrj\Projects\zstack\Utilities\SerialApp\CC2530DB\CoordinatorEB-Pro\Obj\MT_AF.r51
#
###############################################################################

D:\SRC\DemoPrj\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2008-10-10 09:56:24 -0700 (Fri, 10 Oct 2008) $
      4            Revision:       $Revision: 18257 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "MT.h"
     48          #include "MT_AF.h"
     49          #include "nwk.h"
     50          #include "OnBoard.h"
     51          #include "MT_UART.h"
     52          
     53          
     54          /***************************************************************************************************
     55           * GLOBAL VARIABLES
     56           ***************************************************************************************************/
     57          
     58          #if defined ( MT_AF_CB_FUNC )
     59          uint16 _afCallbackSub;
     60          #endif
     61          
     62          /***************************************************************************************************
     63           * LOCAL FUNCTIONS
     64           ***************************************************************************************************/
     65          void MT_AfRegister(uint8 *pBuf);
     66          void MT_AfDataRequest(uint8 *pBuf);
     67          
     68          /***************************************************************************************************
     69           * @fn      MT_afCommandProcessing
     70           *
     71           * @brief   Process all the AF commands that are issued by test tool
     72           *
     73           * @param   pBuf - pointer to the received buffer
     74           *
     75           * @return  status
     76           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
     78          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     79            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV       R6,#0x0
     80          
     81            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6005         JZ        ??MT_AfCommandProcessing_0
   \   000010   14           DEC       A
   \   000011   6007         JZ        ??MT_AfCommandProcessing_1
   \   000013   800A         SJMP      ??MT_AfCommandProcessing_2
     82            {
     83              case MT_AF_REGISTER:
     84                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000015                ; Setup parameters for call to function MT_AfRegister
   \   000015   12....       LCALL     `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
     85                break;
   \   000018   8007         SJMP      ??MT_AfCommandProcessing_3
     86          
     87              case MT_AF_DATA_REQUEST:
     88                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   00001A                ; Setup parameters for call to function MT_AfDataRequest
   \   00001A   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
     89                break;
   \   00001D   8002         SJMP      ??MT_AfCommandProcessing_3
     90          
     91              default:
     92                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_2:
   \   00001F   7E02         MOV       R6,#0x2
     93                break;
     94            }
     95          
     96            return status;
   \                     ??MT_AfCommandProcessing_3:
   \   000021   EE           MOV       A,R6
   \   000022   F9           MOV       R1,A
   \   000023   7F01         MOV       R7,#0x1
   \   000025   02....       LJMP      ?BANKED_LEAVE_XDATA
     97          }
     98          
     99          /***************************************************************************************************
    100           * @fn      MT_AfRegister
    101           *
    102           * @brief   Process AF Register command
    103           *
    104           * @param   pBuf - pointer to the received buffer
    105           *
    106           * @return  none
    107           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    108          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    109          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
    110            uint8 cmdId;
    111            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   12....       LCALL     ?Subroutine5 & 0xFFFF
    112            endPointDesc_t *epDesc;
    113          
    114            /* parse header */
    115            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_12:
   \   000019   F5..         MOV       ?V0,A
    116            pBuf += MT_RPC_FRAME_HDR_SZ;
    117          
    118            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A06         MOV       R2,#0x6
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
    119            if ( epDesc )
   \   00002A   EA           MOV       A,R2
   \   00002B   4F           ORL       A,R7
   \   00002C   603F         JZ        ??MT_AfRegister_0
    120            {
    121              epDesc->task_id = &MT_TaskID;
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   A3           INC       DPTR
   \   000033   74..         MOV       A,#MT_TaskID & 0xff
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   000039   F0           MOVX      @DPTR,A
    122              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00003A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00003A   EA           MOV       A,R2
   \   00003B   FC           MOV       R4,A
   \   00003C   EB           MOV       A,R3
   \   00003D   FD           MOV       R5,A
   \   00003E   E5..         MOV       A,?V2
   \   000040   2403         ADD       A,#0x3
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   35..         ADDC      A,?V3
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   00004A   E9           MOV       A,R1
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   F0           MOVX      @DPTR,A
    123              if ( retValue == ZSuccess )
   \   000052   700F         JNZ       ??MT_AfRegister_1
    124              {
    125                retValue = afRegister( epDesc );
   \   000054                ; Setup parameters for call to function afRegister
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   00005B   E9           MOV       A,R1
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   F0           MOVX      @DPTR,A
    126              }
    127          
    128              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6007         JZ        ??MT_AfRegister_0
    129              {
    130                osal_mem_free( epDesc );
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   EE           MOV       A,R6
   \   000067   FA           MOV       R2,A
   \   000068   EF           MOV       A,R7
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    131              }
    132            }
    133          
    134            /* Build and send back the response */
    135            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   00006D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   7B01         MOV       R3,#0x1
   \   000073   AA..         MOV       R2,?V0
   \   000075   7964         MOV       R1,#0x64
   \   000077   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    136          }
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   7F06         MOV       R7,#0x6
   \   000081   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
    137          
    138          /***************************************************************************************************
    139           * @fn      MT_AfDataRequest
    140           *
    141           * @brief   Process AF Register command
    142           *
    143           * @param   pBuf - pointer to the received buffer
    144           *
    145           * @return  none
    146           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    148          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    149            uint8 cmdId, tempLen = 0;
    150            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine5 & 0xFFFF
    151            endPointDesc_t *epDesc;
    152            byte transId;
    153            afAddrType_t dstAddr;
    154            cId_t cId;
    155            byte txOpts, radius, srcEP;
    156          
    157              /* parse header */
    158            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_13:
   \   000017   F5..         MOV       ?V2,A
    159            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   EA           MOV       A,R2
   \   00001A   2403         ADD       A,#0x3
   \   00001C   FE           MOV       R6,A
   \   00001D   5001         JNC       ??MT_AfDataRequest_0
   \   00001F   0F           INC       R7
    160          
    161            /* Destination address */
    162            dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_0:
   \   000020   740A         MOV       A,#0xa
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   7402         MOV       A,#0x2
   \   000027   F0           MOVX      @DPTR,A
    163            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FA           MOV       R2,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   EA           MOV       A,R2
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   E9           MOV       A,R1
   \   00003A   F0           MOVX      @DPTR,A
    164            pBuf += 2;
    165          
    166            /* Destination endpoint */
    167            dstAddr.endPoint = *pBuf++;
   \   00003B   8E82         MOV       DPL,R6
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   C0E0         PUSH      A
   \   000044   740B         MOV       A,#0xb
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   D0E0         POP       A
   \   00004B   F0           MOVX      @DPTR,A
    168          
    169            /* Source endpoint */
    170            srcEP = *pBuf++;
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F9           MOV       R1,A
   \   000055   EE           MOV       A,R6
   \   000056   2404         ADD       A,#0x4
   \   000058   FE           MOV       R6,A
   \   000059   5001         JNC       ??MT_AfDataRequest_1
   \   00005B   0F           INC       R7
    171            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequest_1:
   \   00005C                ; Setup parameters for call to function afFindEndPointDesc
   \   00005C   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00005F   8A..         MOV       ?V0,R2
   \   000061   8B..         MOV       ?V1,R3
   \   000063   AC..         MOV       R4,?V0
   \   000065   AD..         MOV       R5,?V1
    172          
    173            /* ClusterId */
    174            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   FA           MOV       R2,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   E4           CLR       A
   \   000071   C8           XCH       A,R0
   \   000072   F9           MOV       R1,A
   \   000073   EA           MOV       A,R2
   \   000074   28           ADD       A,R0
   \   000075   E4           CLR       A
   \   000076   39           ADDC      A,R1
   \   000077   FB           MOV       R3,A
    175            pBuf +=2;
    176          
    177            /* TransId */
    178            transId = *pBuf++;
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   C0E0         PUSH      A
   \   000081   7401         MOV       A,#0x1
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   D0E0         POP       A
   \   000088   F0           MOVX      @DPTR,A
    179          
    180            /* TxOption */
    181            txOpts = *pBuf++;
    182          
    183            /* Radius */
    184            radius = *pBuf++;
    185          
    186            /* Length */
    187            tempLen = *pBuf++;
    188          
    189            if ( epDesc == NULL )
   \   000089   EC           MOV       A,R4
   \   00008A   4D           ORL       A,R5
   \   00008B   700A         JNZ       ??MT_AfDataRequest_2
    190            {
    191              retValue = afStatus_INVALID_PARAMETER;
   \   00008D   85..82       MOV       DPL,?XSP + 0
   \   000090   85..83       MOV       DPH,?XSP + 1
   \   000093   7402         MOV       A,#0x2
   \   000095   8066         SJMP      ??MT_AfDataRequest_3
    192            }
    193            else
    194            {
    195              retValue = AF_DataRequest( &dstAddr, epDesc, cId, tempLen, pBuf, &transId, txOpts, radius );
   \                     ??MT_AfDataRequest_2:
   \   000097                ; Setup parameters for call to function AF_DataRequest
   \   000097   8E82         MOV       DPL,R6
   \   000099   8F83         MOV       DPH,R7
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F5..         MOV       ?V0,A
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A7   7402         MOV       A,#0x2
   \   0000A9   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AC   88..         MOV       ?V0,R0
   \   0000AE   89..         MOV       ?V1,R1
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   EE           MOV       A,R6
   \   0000B6   2406         ADD       A,#0x6
   \   0000B8   F5..         MOV       ?V0,A
   \   0000BA   E4           CLR       A
   \   0000BB   3F           ADDC      A,R7
   \   0000BC   F5..         MOV       ?V1,A
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   8E82         MOV       DPL,R6
   \   0000C5   8F83         MOV       DPH,R7
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F5..         MOV       ?V0,A
   \   0000CF   75..00       MOV       ?V1,#0x0
   \   0000D2   78..         MOV       R0,#?V0
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D7   8A..         MOV       ?V0,R2
   \   0000D9   8B..         MOV       ?V1,R3
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   8E82         MOV       DPL,R6
   \   0000E2   8F83         MOV       DPH,R7
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   F9           MOV       R1,A
   \   0000E9   740B         MOV       A,#0xb
   \   0000EB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EE   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000F1   7409         MOV       A,#0x9
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F6   E9           MOV       A,R1
   \   0000F7   85..82       MOV       DPL,?XSP + 0
   \   0000FA   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_3:
   \   0000FD   F0           MOVX      @DPTR,A
    196            }
    197          
    198            /* Build and send back the response */
    199            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \   0000FE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000FE   AC..         MOV       R4,?XSP + 0
   \   000100   AD..         MOV       R5,?XSP + 1
   \   000102   7B01         MOV       R3,#0x1
   \   000104   AA..         MOV       R2,?V2
   \   000106   7964         MOV       R1,#0x64
   \   000108   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    200          }
   \   00010B   740E         MOV       A,#0xe
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000110   7F03         MOV       R7,#0x3
   \   000112   02....       LJMP      ?BANKED_LEAVE_XDATA
    201          
    202          /***************************************************************************************************
    203           * @fn      MT_AfDataConfirm
    204           *
    205           * @brief   Process
    206           *
    207           * @param   pBuf - pointer to the received buffer
    208           *
    209           * @return  none
    210           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    212          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    213            uint8 retArray[3];
    214          
    215            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   12....       LCALL     ?Subroutine5 & 0xFFFF
    216            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_14:
   \   000018   C0E0         PUSH      A
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   F0           MOVX      @DPTR,A
    217            retArray[2] = pMsg->transID;
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   C0E0         PUSH      A
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   D0E0         POP       A
   \   000033   F0           MOVX      @DPTR,A
    218          
    219            /* Build and send back the response */
    220            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000034                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000034   AC..         MOV       R4,?XSP + 0
   \   000036   AD..         MOV       R5,?XSP + 1
   \   000038   7B03         MOV       R3,#0x3
   \   00003A   7A80         MOV       R2,#-0x80
   \   00003C   7944         MOV       R1,#0x44
   \   00003E   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    221          }
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   D083         POP       DPH
   \   000048   D082         POP       DPL
   \   00004A   02....       LJMP      ?BRET
    222          
    223          /***************************************************************************************************
    224           * @fn          MT_AfIncomingMsg
    225           *
    226           * @brief       Process the callback subscription for AF Incoming data.
    227           *
    228           * @param       pkt - Incoming AF data.
    229           *
    230           * @return      none
    231           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    233          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
    234            uint8 respLen;            /* Length of the whole response packet */
    235            uint8 dataLen;            /* Length of the data section in the response packet */
    236            uint8 *respPtr, *tempPtr;
    237          
    238            /* dataLen */
    239            dataLen = pMsg->cmd.DataLength;
   \   000009   EA           MOV       A,R2
   \   00000A   241F         ADD       A,#0x1f
   \   00000C   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00000F   F5..         MOV       ?V6,A
    240            /* respLen */
    241            respLen = 17 + dataLen;
   \   000011   7411         MOV       A,#0x11
   \   000013   25..         ADD       A,?V6
   \   000015   F5..         MOV       ?V7,A
    242          
    243            /* Allocate memory for the response packet */
    244            respPtr = osal_mem_alloc(respLen);
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   FA           MOV       R2,A
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   8A..         MOV       ?V0,R2
   \   00001F   8B..         MOV       ?V1,R3
   \   000021   AE..         MOV       R6,?V0
   \   000023   AF..         MOV       R7,?V1
    245            if (!respPtr)
   \   000025   EA           MOV       A,R2
   \   000026   4F           ORL       A,R7
   \   000027   7003         JNZ       $+5
   \   000029   02....       LJMP      ??MT_AfIncomingMsg_0 & 0xFFFF
    246            {
    247              return;
    248            }
    249            tempPtr = respPtr;
    250          
    251            /* Fill in the data */
    252          
    253            /* Group ID */
    254            *tempPtr++ = LO_UINT16(pMsg->groupId);
   \   00002C   E5..         MOV       A,?V4
   \   00002E   2402         ADD       A,#0x2
   \   000030   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000033   12....       LCALL     ?Subroutine8 & 0xFFFF
    255            *tempPtr++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_21:
   \   000036   F0           MOVX      @DPTR,A
    256          
    257            /* Cluster ID */
    258            *tempPtr++ = LO_UINT16(pMsg->clusterId);
   \   000037   E5..         MOV       A,?V4
   \   000039   2404         ADD       A,#0x4
   \   00003B   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00003E   12....       LCALL     ?Subroutine3 & 0xFFFF
    259            *tempPtr++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_7:
   \   000041   F0           MOVX      @DPTR,A
    260          
    261            /* Source Address */
    262            *tempPtr++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000042   E5..         MOV       A,?V4
   \   000044   2406         ADD       A,#0x6
   \   000046   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   12....       LCALL     ?Subroutine3 & 0xFFFF
    263            *tempPtr++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_8:
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   F0           MOVX      @DPTR,A
    264          
    265            /* Source EP */
    266            *tempPtr++ = pMsg->srcAddr.endPoint;
   \   000051   E5..         MOV       A,?V4
   \   000053   240F         ADD       A,#0xf
   \   000055   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   F0           MOVX      @DPTR,A
    267          
    268            /* Destination EP */
    269            *tempPtr++ = pMsg->endPoint;
   \   000063   E5..         MOV       A,?V4
   \   000065   2414         ADD       A,#0x14
   \   000067   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00006A   F0           MOVX      @DPTR,A
    270          
    271            /* WasBroadCast */
    272            *tempPtr++ = pMsg->wasBroadcast;
   \   00006B   E5..         MOV       A,?V4
   \   00006D   2415         ADD       A,#0x15
   \   00006F   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000072   A3           INC       DPTR
   \   000073   F0           MOVX      @DPTR,A
    273          
    274            /* LinkQuality */
    275            *tempPtr++ = pMsg->LinkQuality;
   \   000074   E5..         MOV       A,?V4
   \   000076   2416         ADD       A,#0x16
   \   000078   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00007B   F0           MOVX      @DPTR,A
    276          
    277            /* SecurityUse */
    278            *tempPtr++ = pMsg->SecurityUse;
   \   00007C   E5..         MOV       A,?V4
   \   00007E   2419         ADD       A,#0x19
   \   000080   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000083   A3           INC       DPTR
   \   000084   F0           MOVX      @DPTR,A
    279          
    280            /* Timestamp */
    281            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   000085   E5..         MOV       A,?V4
   \   000087   241A         ADD       A,#0x1a
   \   000089   FA           MOV       R2,A
   \   00008A   E4           CLR       A
   \   00008B   35..         ADDC      A,?V5
   \   00008D   FB           MOV       R3,A
   \   00008E   8A82         MOV       DPL,R2
   \   000090   F583         MOV       DPH,A
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?L_MOV_X
   \   000097   EE           MOV       A,R6
   \   000098   240B         ADD       A,#0xb
   \   00009A   12....       LCALL     ?Subroutine0 & 0xFFFF
    282            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_0:
   \   00009D   12....       LCALL     ?L_MOV_X
   \   0000A0   E5..         MOV       A,?V1
   \   0000A2   F5..         MOV       ?V0,A
   \   0000A4   EE           MOV       A,R6
   \   0000A5   240C         ADD       A,#0xc
   \   0000A7   12....       LCALL     ?Subroutine0 & 0xFFFF
    283            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_1:
   \   0000AA   12....       LCALL     ?L_MOV_X
   \   0000AD   7410         MOV       A,#0x10
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?UL_SHR
   \   0000B4   EE           MOV       A,R6
   \   0000B5   240D         ADD       A,#0xd
   \   0000B7   12....       LCALL     ?Subroutine0 & 0xFFFF
    284            *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_2:
   \   0000BA   12....       LCALL     ?L_MOV_X
   \   0000BD   7418         MOV       A,#0x18
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?UL_SHR
   \   0000C4   EE           MOV       A,R6
   \   0000C5   240E         ADD       A,#0xe
   \   0000C7   F582         MOV       DPL,A
   \   0000C9   E4           CLR       A
   \   0000CA   3F           ADDC      A,R7
   \   0000CB   F583         MOV       DPH,A
   \   0000CD   E5..         MOV       A,?V0
   \   0000CF   F0           MOVX      @DPTR,A
    285          
    286            /* Transmit Sequence Number */
    287            *tempPtr++ = pMsg->cmd.TransSeqNumber;
   \   0000D0   E5..         MOV       A,?V4
   \   0000D2   241E         ADD       A,#0x1e
   \   0000D4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000D7   C0E0         PUSH      A
   \   0000D9   EE           MOV       A,R6
   \   0000DA   240F         ADD       A,#0xf
   \   0000DC   F582         MOV       DPL,A
   \   0000DE   E4           CLR       A
   \   0000DF   3F           ADDC      A,R7
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   D0E0         POP       A
   \   0000E4   F0           MOVX      @DPTR,A
    288          
    289            /* Data Length */
    290            *tempPtr++ = dataLen;
   \   0000E5   EE           MOV       A,R6
   \   0000E6   2410         ADD       A,#0x10
   \   0000E8   F582         MOV       DPL,A
   \   0000EA   E4           CLR       A
   \   0000EB   3F           ADDC      A,R7
   \   0000EC   F583         MOV       DPH,A
   \   0000EE   E5..         MOV       A,?V6
   \   0000F0   F0           MOVX      @DPTR,A
    291          
    292            /* Data */
    293            if (dataLen)
   \   0000F1   6025         JZ        ??MT_AfIncomingMsg_1
    294            {
    295              osal_memcpy(tempPtr, pMsg->cmd.Data, dataLen);
   \   0000F3                ; Setup parameters for call to function osal_memcpy
   \   0000F3   E5..         MOV       A,?V4
   \   0000F5   2421         ADD       A,#0x21
   \   0000F7   12....       LCALL     ?Subroutine6 & 0xFFFF
    296            }
   \                     ??CrossCallReturnLabel_18:
   \   0000FA   F5..         MOV       ?V0,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F5..         MOV       ?V1,A
   \   000100   78..         MOV       R0,#?V0
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000105   AC..         MOV       R4,?V6
   \   000107   7D00         MOV       R5,#0x0
   \   000109   EE           MOV       A,R6
   \   00010A   2411         ADD       A,#0x11
   \   00010C   FA           MOV       R2,A
   \   00010D   E4           CLR       A
   \   00010E   3F           ADDC      A,R7
   \   00010F   FB           MOV       R3,A
   \   000110   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000113   7403         MOV       A,#0x3
   \   000115   12....       LCALL     ?DEALLOC_XSTACK8
    297          
    298            /* Build and send back the response */
    299            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_INCOMING_MSG, respLen, respPtr );
   \                     ??MT_AfIncomingMsg_1:
   \   000118                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000118   EE           MOV       A,R6
   \   000119   FC           MOV       R4,A
   \   00011A   EF           MOV       A,R7
   \   00011B   FD           MOV       R5,A
   \   00011C   AB..         MOV       R3,?V7
   \   00011E   7A81         MOV       R2,#-0x7f
   \   000120   7944         MOV       R1,#0x44
   \   000122   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    300          
    301            /* Free memory */
    302            osal_mem_free(respPtr);
   \   000125                ; Setup parameters for call to function osal_mem_free
   \   000125   EE           MOV       A,R6
   \   000126   FA           MOV       R2,A
   \   000127   EF           MOV       A,R7
   \   000128   FB           MOV       R3,A
   \   000129   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    303          
    304          }
   \                     ??MT_AfIncomingMsg_0:
   \   00012C   7F08         MOV       R7,#0x8
   \   00012E   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V5
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V5
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V5
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E5..         MOV       A,?V0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   78..         MOV       R0,#?V0
   \   00000F   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg
    305          
    306          /***************************************************************************************************
    307          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MT_AfCommandProcessing
        0      9   -> MT_AfDataRequest
        0      9   -> MT_AfRegister
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     43   MT_AfDataRequest
        0     34   -> AF_DataRequest
        0     25   -> MT_BuildAndSendZToolResponse
        0     25   -> afFindEndPointDesc
      1     19   MT_AfIncomingMsg
        0     16   -> MT_BuildAndSendZToolResponse
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     19   -> osal_memcpy
      1     24   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?Subroutine0
       6  ?Subroutine1
       4  ?Subroutine2
       8  ?Subroutine3
      15  ?Subroutine4
       9  ?Subroutine5
       9  ?Subroutine6
      20  ?Subroutine7
      13  ?Subroutine8
      40  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      77  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
     277  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     305  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
     132  MT_AfRegister
       6  MT_AfRegister::?relay

 
 931 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
  30 bytes of CODE     memory
 931 bytes of HUGECODE memory

Errors: none
Warnings: none
